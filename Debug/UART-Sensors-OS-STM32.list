
UART-Sensors-OS-STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005944  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08005b00  08005b00  00006b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b70  08005b70  0000708c  2**0
                  CONTENTS
  4 .ARM          00000008  08005b70  08005b70  00006b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b78  08005b78  0000708c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b78  08005b78  00006b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005b7c  08005b7c  00006b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  08005b80  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d0  2000008c  08005c0c  0000708c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000025c  08005c0c  0000725c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018990  00000000  00000000  000070bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000342d  00000000  00000000  0001fa4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001580  00000000  00000000  00022e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010b7  00000000  00000000  00024400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cc49  00000000  00000000  000254b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001abe5  00000000  00000000  00052100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001125db  00000000  00000000  0006cce5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017f2c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005950  00000000  00000000  0017f304  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  00184c54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000008c 	.word	0x2000008c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08005ae8 	.word	0x08005ae8

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000090 	.word	0x20000090
 80001f8:	08005ae8 	.word	0x08005ae8

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000210:	f000 b96a 	b.w	80004e8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	460c      	mov	r4, r1
 8000234:	2b00      	cmp	r3, #0
 8000236:	d14e      	bne.n	80002d6 <__udivmoddi4+0xaa>
 8000238:	4694      	mov	ip, r2
 800023a:	458c      	cmp	ip, r1
 800023c:	4686      	mov	lr, r0
 800023e:	fab2 f282 	clz	r2, r2
 8000242:	d962      	bls.n	800030a <__udivmoddi4+0xde>
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0320 	rsb	r3, r2, #32
 800024a:	4091      	lsls	r1, r2
 800024c:	fa20 f303 	lsr.w	r3, r0, r3
 8000250:	fa0c fc02 	lsl.w	ip, ip, r2
 8000254:	4319      	orrs	r1, r3
 8000256:	fa00 fe02 	lsl.w	lr, r0, r2
 800025a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800025e:	fa1f f68c 	uxth.w	r6, ip
 8000262:	fbb1 f4f7 	udiv	r4, r1, r7
 8000266:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800026a:	fb07 1114 	mls	r1, r7, r4, r1
 800026e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000272:	fb04 f106 	mul.w	r1, r4, r6
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000282:	f080 8112 	bcs.w	80004aa <__udivmoddi4+0x27e>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 810f 	bls.w	80004aa <__udivmoddi4+0x27e>
 800028c:	3c02      	subs	r4, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a59      	subs	r1, r3, r1
 8000292:	fa1f f38e 	uxth.w	r3, lr
 8000296:	fbb1 f0f7 	udiv	r0, r1, r7
 800029a:	fb07 1110 	mls	r1, r7, r0, r1
 800029e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a2:	fb00 f606 	mul.w	r6, r0, r6
 80002a6:	429e      	cmp	r6, r3
 80002a8:	d90a      	bls.n	80002c0 <__udivmoddi4+0x94>
 80002aa:	eb1c 0303 	adds.w	r3, ip, r3
 80002ae:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002b2:	f080 80fc 	bcs.w	80004ae <__udivmoddi4+0x282>
 80002b6:	429e      	cmp	r6, r3
 80002b8:	f240 80f9 	bls.w	80004ae <__udivmoddi4+0x282>
 80002bc:	4463      	add	r3, ip
 80002be:	3802      	subs	r0, #2
 80002c0:	1b9b      	subs	r3, r3, r6
 80002c2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11d      	cbz	r5, 80002d2 <__udivmoddi4+0xa6>
 80002ca:	40d3      	lsrs	r3, r2
 80002cc:	2200      	movs	r2, #0
 80002ce:	e9c5 3200 	strd	r3, r2, [r5]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d905      	bls.n	80002e6 <__udivmoddi4+0xba>
 80002da:	b10d      	cbz	r5, 80002e0 <__udivmoddi4+0xb4>
 80002dc:	e9c5 0100 	strd	r0, r1, [r5]
 80002e0:	2100      	movs	r1, #0
 80002e2:	4608      	mov	r0, r1
 80002e4:	e7f5      	b.n	80002d2 <__udivmoddi4+0xa6>
 80002e6:	fab3 f183 	clz	r1, r3
 80002ea:	2900      	cmp	r1, #0
 80002ec:	d146      	bne.n	800037c <__udivmoddi4+0x150>
 80002ee:	42a3      	cmp	r3, r4
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xcc>
 80002f2:	4290      	cmp	r0, r2
 80002f4:	f0c0 80f0 	bcc.w	80004d8 <__udivmoddi4+0x2ac>
 80002f8:	1a86      	subs	r6, r0, r2
 80002fa:	eb64 0303 	sbc.w	r3, r4, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	2d00      	cmp	r5, #0
 8000302:	d0e6      	beq.n	80002d2 <__udivmoddi4+0xa6>
 8000304:	e9c5 6300 	strd	r6, r3, [r5]
 8000308:	e7e3      	b.n	80002d2 <__udivmoddi4+0xa6>
 800030a:	2a00      	cmp	r2, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x204>
 8000310:	eba1 040c 	sub.w	r4, r1, ip
 8000314:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000318:	fa1f f78c 	uxth.w	r7, ip
 800031c:	2101      	movs	r1, #1
 800031e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000322:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000326:	fb08 4416 	mls	r4, r8, r6, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb07 f006 	mul.w	r0, r7, r6
 8000332:	4298      	cmp	r0, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x11c>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x11a>
 8000340:	4298      	cmp	r0, r3
 8000342:	f200 80cd 	bhi.w	80004e0 <__udivmoddi4+0x2b4>
 8000346:	4626      	mov	r6, r4
 8000348:	1a1c      	subs	r4, r3, r0
 800034a:	fa1f f38e 	uxth.w	r3, lr
 800034e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000352:	fb08 4410 	mls	r4, r8, r0, r4
 8000356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035a:	fb00 f707 	mul.w	r7, r0, r7
 800035e:	429f      	cmp	r7, r3
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x148>
 8000362:	eb1c 0303 	adds.w	r3, ip, r3
 8000366:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x146>
 800036c:	429f      	cmp	r7, r3
 800036e:	f200 80b0 	bhi.w	80004d2 <__udivmoddi4+0x2a6>
 8000372:	4620      	mov	r0, r4
 8000374:	1bdb      	subs	r3, r3, r7
 8000376:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800037a:	e7a5      	b.n	80002c8 <__udivmoddi4+0x9c>
 800037c:	f1c1 0620 	rsb	r6, r1, #32
 8000380:	408b      	lsls	r3, r1
 8000382:	fa22 f706 	lsr.w	r7, r2, r6
 8000386:	431f      	orrs	r7, r3
 8000388:	fa20 fc06 	lsr.w	ip, r0, r6
 800038c:	fa04 f301 	lsl.w	r3, r4, r1
 8000390:	ea43 030c 	orr.w	r3, r3, ip
 8000394:	40f4      	lsrs	r4, r6
 8000396:	fa00 f801 	lsl.w	r8, r0, r1
 800039a:	0c38      	lsrs	r0, r7, #16
 800039c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a0:	fbb4 fef0 	udiv	lr, r4, r0
 80003a4:	fa1f fc87 	uxth.w	ip, r7
 80003a8:	fb00 441e 	mls	r4, r0, lr, r4
 80003ac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b0:	fb0e f90c 	mul.w	r9, lr, ip
 80003b4:	45a1      	cmp	r9, r4
 80003b6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x1a6>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003c2:	f080 8084 	bcs.w	80004ce <__udivmoddi4+0x2a2>
 80003c6:	45a1      	cmp	r9, r4
 80003c8:	f240 8081 	bls.w	80004ce <__udivmoddi4+0x2a2>
 80003cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	eba4 0409 	sub.w	r4, r4, r9
 80003d6:	fa1f f983 	uxth.w	r9, r3
 80003da:	fbb4 f3f0 	udiv	r3, r4, r0
 80003de:	fb00 4413 	mls	r4, r0, r3, r4
 80003e2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x1d2>
 80003ee:	193c      	adds	r4, r7, r4
 80003f0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003f4:	d267      	bcs.n	80004c6 <__udivmoddi4+0x29a>
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d965      	bls.n	80004c6 <__udivmoddi4+0x29a>
 80003fa:	3b02      	subs	r3, #2
 80003fc:	443c      	add	r4, r7
 80003fe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000402:	fba0 9302 	umull	r9, r3, r0, r2
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	429c      	cmp	r4, r3
 800040c:	46ce      	mov	lr, r9
 800040e:	469c      	mov	ip, r3
 8000410:	d351      	bcc.n	80004b6 <__udivmoddi4+0x28a>
 8000412:	d04e      	beq.n	80004b2 <__udivmoddi4+0x286>
 8000414:	b155      	cbz	r5, 800042c <__udivmoddi4+0x200>
 8000416:	ebb8 030e 	subs.w	r3, r8, lr
 800041a:	eb64 040c 	sbc.w	r4, r4, ip
 800041e:	fa04 f606 	lsl.w	r6, r4, r6
 8000422:	40cb      	lsrs	r3, r1
 8000424:	431e      	orrs	r6, r3
 8000426:	40cc      	lsrs	r4, r1
 8000428:	e9c5 6400 	strd	r6, r4, [r5]
 800042c:	2100      	movs	r1, #0
 800042e:	e750      	b.n	80002d2 <__udivmoddi4+0xa6>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f103 	lsr.w	r1, r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa24 f303 	lsr.w	r3, r4, r3
 8000440:	4094      	lsls	r4, r2
 8000442:	430c      	orrs	r4, r1
 8000444:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000448:	fa00 fe02 	lsl.w	lr, r0, r2
 800044c:	fa1f f78c 	uxth.w	r7, ip
 8000450:	fbb3 f0f8 	udiv	r0, r3, r8
 8000454:	fb08 3110 	mls	r1, r8, r0, r3
 8000458:	0c23      	lsrs	r3, r4, #16
 800045a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045e:	fb00 f107 	mul.w	r1, r0, r7
 8000462:	4299      	cmp	r1, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x24c>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800046e:	d22c      	bcs.n	80004ca <__udivmoddi4+0x29e>
 8000470:	4299      	cmp	r1, r3
 8000472:	d92a      	bls.n	80004ca <__udivmoddi4+0x29e>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1a5b      	subs	r3, r3, r1
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000480:	fb08 3311 	mls	r3, r8, r1, r3
 8000484:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000488:	fb01 f307 	mul.w	r3, r1, r7
 800048c:	42a3      	cmp	r3, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x276>
 8000490:	eb1c 0404 	adds.w	r4, ip, r4
 8000494:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000498:	d213      	bcs.n	80004c2 <__udivmoddi4+0x296>
 800049a:	42a3      	cmp	r3, r4
 800049c:	d911      	bls.n	80004c2 <__udivmoddi4+0x296>
 800049e:	3902      	subs	r1, #2
 80004a0:	4464      	add	r4, ip
 80004a2:	1ae4      	subs	r4, r4, r3
 80004a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004a8:	e739      	b.n	800031e <__udivmoddi4+0xf2>
 80004aa:	4604      	mov	r4, r0
 80004ac:	e6f0      	b.n	8000290 <__udivmoddi4+0x64>
 80004ae:	4608      	mov	r0, r1
 80004b0:	e706      	b.n	80002c0 <__udivmoddi4+0x94>
 80004b2:	45c8      	cmp	r8, r9
 80004b4:	d2ae      	bcs.n	8000414 <__udivmoddi4+0x1e8>
 80004b6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ba:	eb63 0c07 	sbc.w	ip, r3, r7
 80004be:	3801      	subs	r0, #1
 80004c0:	e7a8      	b.n	8000414 <__udivmoddi4+0x1e8>
 80004c2:	4631      	mov	r1, r6
 80004c4:	e7ed      	b.n	80004a2 <__udivmoddi4+0x276>
 80004c6:	4603      	mov	r3, r0
 80004c8:	e799      	b.n	80003fe <__udivmoddi4+0x1d2>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e7d4      	b.n	8000478 <__udivmoddi4+0x24c>
 80004ce:	46d6      	mov	lr, sl
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1a6>
 80004d2:	4463      	add	r3, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e74d      	b.n	8000374 <__udivmoddi4+0x148>
 80004d8:	4606      	mov	r6, r0
 80004da:	4623      	mov	r3, r4
 80004dc:	4608      	mov	r0, r1
 80004de:	e70f      	b.n	8000300 <__udivmoddi4+0xd4>
 80004e0:	3e02      	subs	r6, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	e730      	b.n	8000348 <__udivmoddi4+0x11c>
 80004e6:	bf00      	nop

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f0:	f001 f91a 	bl	8001728 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f4:	f000 f812 	bl	800051c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f8:	f000 f93c 	bl	8000774 <MX_GPIO_Init>
  MX_I2C2_Init();
 80004fc:	f000 f860 	bl	80005c0 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8000500:	f000 f8ec 	bl	80006dc <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000504:	f000 f89c 	bl	8000640 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* Initialize the peripherals */
  BSP_HSENSOR_Init();
 8000508:	f000 fb26 	bl	8000b58 <BSP_HSENSOR_Init>
  BSP_MAGNETO_Init();
 800050c:	f000 fb52 	bl	8000bb4 <BSP_MAGNETO_Init>
  BSP_ACCELERO_Init();
 8000510:	f000 facc 	bl	8000aac <BSP_ACCELERO_Init>
  BSP_PSENSOR_Init();
 8000514:	f000 fb92 	bl	8000c3c <BSP_PSENSOR_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000518:	bf00      	nop
 800051a:	e7fd      	b.n	8000518 <main+0x2c>

0800051c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b096      	sub	sp, #88	@ 0x58
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 0314 	add.w	r3, r7, #20
 8000526:	2244      	movs	r2, #68	@ 0x44
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f005 fab0 	bl	8005a90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	463b      	mov	r3, r7
 8000532:	2200      	movs	r2, #0
 8000534:	601a      	str	r2, [r3, #0]
 8000536:	605a      	str	r2, [r3, #4]
 8000538:	609a      	str	r2, [r3, #8]
 800053a:	60da      	str	r2, [r3, #12]
 800053c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800053e:	2000      	movs	r0, #0
 8000540:	f002 fb6e 	bl	8002c20 <HAL_PWREx_ControlVoltageScaling>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <SystemClock_Config+0x32>
  {
    Error_Handler();
 800054a:	f000 f959 	bl	8000800 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800054e:	2310      	movs	r3, #16
 8000550:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000552:	2301      	movs	r3, #1
 8000554:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000556:	2300      	movs	r3, #0
 8000558:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800055a:	2360      	movs	r3, #96	@ 0x60
 800055c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800055e:	2302      	movs	r3, #2
 8000560:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000562:	2301      	movs	r3, #1
 8000564:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000566:	2301      	movs	r3, #1
 8000568:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 800056a:	233c      	movs	r3, #60	@ 0x3c
 800056c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800056e:	2302      	movs	r3, #2
 8000570:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000572:	2302      	movs	r3, #2
 8000574:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000576:	2302      	movs	r3, #2
 8000578:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057a:	f107 0314 	add.w	r3, r7, #20
 800057e:	4618      	mov	r0, r3
 8000580:	f002 fbf2 	bl	8002d68 <HAL_RCC_OscConfig>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800058a:	f000 f939 	bl	8000800 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058e:	230f      	movs	r3, #15
 8000590:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000592:	2303      	movs	r3, #3
 8000594:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000596:	2300      	movs	r3, #0
 8000598:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800059a:	2300      	movs	r3, #0
 800059c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800059e:	2300      	movs	r3, #0
 80005a0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005a2:	463b      	mov	r3, r7
 80005a4:	2105      	movs	r1, #5
 80005a6:	4618      	mov	r0, r3
 80005a8:	f002 fff8 	bl	800359c <HAL_RCC_ClockConfig>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005b2:	f000 f925 	bl	8000800 <Error_Handler>
  }
}
 80005b6:	bf00      	nop
 80005b8:	3758      	adds	r7, #88	@ 0x58
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
	...

080005c0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80005c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000634 <MX_I2C2_Init+0x74>)
 80005c6:	4a1c      	ldr	r2, [pc, #112]	@ (8000638 <MX_I2C2_Init+0x78>)
 80005c8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30A175AB;
 80005ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000634 <MX_I2C2_Init+0x74>)
 80005cc:	4a1b      	ldr	r2, [pc, #108]	@ (800063c <MX_I2C2_Init+0x7c>)
 80005ce:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80005d0:	4b18      	ldr	r3, [pc, #96]	@ (8000634 <MX_I2C2_Init+0x74>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005d6:	4b17      	ldr	r3, [pc, #92]	@ (8000634 <MX_I2C2_Init+0x74>)
 80005d8:	2201      	movs	r2, #1
 80005da:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005dc:	4b15      	ldr	r3, [pc, #84]	@ (8000634 <MX_I2C2_Init+0x74>)
 80005de:	2200      	movs	r2, #0
 80005e0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80005e2:	4b14      	ldr	r3, [pc, #80]	@ (8000634 <MX_I2C2_Init+0x74>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005e8:	4b12      	ldr	r3, [pc, #72]	@ (8000634 <MX_I2C2_Init+0x74>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005ee:	4b11      	ldr	r3, [pc, #68]	@ (8000634 <MX_I2C2_Init+0x74>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000634 <MX_I2C2_Init+0x74>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80005fa:	480e      	ldr	r0, [pc, #56]	@ (8000634 <MX_I2C2_Init+0x74>)
 80005fc:	f001 fc9e 	bl	8001f3c <HAL_I2C_Init>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000606:	f000 f8fb 	bl	8000800 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800060a:	2100      	movs	r1, #0
 800060c:	4809      	ldr	r0, [pc, #36]	@ (8000634 <MX_I2C2_Init+0x74>)
 800060e:	f002 fa4f 	bl	8002ab0 <HAL_I2CEx_ConfigAnalogFilter>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000618:	f000 f8f2 	bl	8000800 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800061c:	2100      	movs	r1, #0
 800061e:	4805      	ldr	r0, [pc, #20]	@ (8000634 <MX_I2C2_Init+0x74>)
 8000620:	f002 fa91 	bl	8002b46 <HAL_I2CEx_ConfigDigitalFilter>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800062a:	f000 f8e9 	bl	8000800 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800062e:	bf00      	nop
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	200000a8 	.word	0x200000a8
 8000638:	40005800 	.word	0x40005800
 800063c:	30a175ab 	.word	0x30a175ab

08000640 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b088      	sub	sp, #32
 8000644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000646:	f107 0310 	add.w	r3, r7, #16
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	605a      	str	r2, [r3, #4]
 8000650:	609a      	str	r2, [r3, #8]
 8000652:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	605a      	str	r2, [r3, #4]
 800065c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800065e:	4b1e      	ldr	r3, [pc, #120]	@ (80006d8 <MX_TIM2_Init+0x98>)
 8000660:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000664:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000666:	4b1c      	ldr	r3, [pc, #112]	@ (80006d8 <MX_TIM2_Init+0x98>)
 8000668:	2200      	movs	r2, #0
 800066a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800066c:	4b1a      	ldr	r3, [pc, #104]	@ (80006d8 <MX_TIM2_Init+0x98>)
 800066e:	2200      	movs	r2, #0
 8000670:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000672:	4b19      	ldr	r3, [pc, #100]	@ (80006d8 <MX_TIM2_Init+0x98>)
 8000674:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000678:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800067a:	4b17      	ldr	r3, [pc, #92]	@ (80006d8 <MX_TIM2_Init+0x98>)
 800067c:	2200      	movs	r2, #0
 800067e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000680:	4b15      	ldr	r3, [pc, #84]	@ (80006d8 <MX_TIM2_Init+0x98>)
 8000682:	2200      	movs	r2, #0
 8000684:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000686:	4814      	ldr	r0, [pc, #80]	@ (80006d8 <MX_TIM2_Init+0x98>)
 8000688:	f003 ff5e 	bl	8004548 <HAL_TIM_Base_Init>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000692:	f000 f8b5 	bl	8000800 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000696:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800069a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800069c:	f107 0310 	add.w	r3, r7, #16
 80006a0:	4619      	mov	r1, r3
 80006a2:	480d      	ldr	r0, [pc, #52]	@ (80006d8 <MX_TIM2_Init+0x98>)
 80006a4:	f004 f8ae 	bl	8004804 <HAL_TIM_ConfigClockSource>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80006ae:	f000 f8a7 	bl	8000800 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80006b2:	2320      	movs	r3, #32
 80006b4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006b6:	2300      	movs	r3, #0
 80006b8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	4619      	mov	r1, r3
 80006be:	4806      	ldr	r0, [pc, #24]	@ (80006d8 <MX_TIM2_Init+0x98>)
 80006c0:	f004 fad2 	bl	8004c68 <HAL_TIMEx_MasterConfigSynchronization>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80006ca:	f000 f899 	bl	8000800 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006ce:	bf00      	nop
 80006d0:	3720      	adds	r7, #32
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	200000fc 	.word	0x200000fc

080006dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006e0:	4b22      	ldr	r3, [pc, #136]	@ (800076c <MX_USART1_UART_Init+0x90>)
 80006e2:	4a23      	ldr	r2, [pc, #140]	@ (8000770 <MX_USART1_UART_Init+0x94>)
 80006e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006e6:	4b21      	ldr	r3, [pc, #132]	@ (800076c <MX_USART1_UART_Init+0x90>)
 80006e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006ee:	4b1f      	ldr	r3, [pc, #124]	@ (800076c <MX_USART1_UART_Init+0x90>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006f4:	4b1d      	ldr	r3, [pc, #116]	@ (800076c <MX_USART1_UART_Init+0x90>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006fa:	4b1c      	ldr	r3, [pc, #112]	@ (800076c <MX_USART1_UART_Init+0x90>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000700:	4b1a      	ldr	r3, [pc, #104]	@ (800076c <MX_USART1_UART_Init+0x90>)
 8000702:	220c      	movs	r2, #12
 8000704:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000706:	4b19      	ldr	r3, [pc, #100]	@ (800076c <MX_USART1_UART_Init+0x90>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800070c:	4b17      	ldr	r3, [pc, #92]	@ (800076c <MX_USART1_UART_Init+0x90>)
 800070e:	2200      	movs	r2, #0
 8000710:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000712:	4b16      	ldr	r3, [pc, #88]	@ (800076c <MX_USART1_UART_Init+0x90>)
 8000714:	2200      	movs	r2, #0
 8000716:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000718:	4b14      	ldr	r3, [pc, #80]	@ (800076c <MX_USART1_UART_Init+0x90>)
 800071a:	2200      	movs	r2, #0
 800071c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800071e:	4b13      	ldr	r3, [pc, #76]	@ (800076c <MX_USART1_UART_Init+0x90>)
 8000720:	2200      	movs	r2, #0
 8000722:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000724:	4811      	ldr	r0, [pc, #68]	@ (800076c <MX_USART1_UART_Init+0x90>)
 8000726:	f004 fb45 	bl	8004db4 <HAL_UART_Init>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000730:	f000 f866 	bl	8000800 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000734:	2100      	movs	r1, #0
 8000736:	480d      	ldr	r0, [pc, #52]	@ (800076c <MX_USART1_UART_Init+0x90>)
 8000738:	f005 f8e0 	bl	80058fc <HAL_UARTEx_SetTxFifoThreshold>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000742:	f000 f85d 	bl	8000800 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000746:	2100      	movs	r1, #0
 8000748:	4808      	ldr	r0, [pc, #32]	@ (800076c <MX_USART1_UART_Init+0x90>)
 800074a:	f005 f915 	bl	8005978 <HAL_UARTEx_SetRxFifoThreshold>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000754:	f000 f854 	bl	8000800 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000758:	4804      	ldr	r0, [pc, #16]	@ (800076c <MX_USART1_UART_Init+0x90>)
 800075a:	f005 f896 	bl	800588a <HAL_UARTEx_DisableFifoMode>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000764:	f000 f84c 	bl	8000800 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}
 800076c:	20000148 	.word	0x20000148
 8000770:	40013800 	.word	0x40013800

08000774 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077a:	4b09      	ldr	r3, [pc, #36]	@ (80007a0 <MX_GPIO_Init+0x2c>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800077e:	4a08      	ldr	r2, [pc, #32]	@ (80007a0 <MX_GPIO_Init+0x2c>)
 8000780:	f043 0302 	orr.w	r3, r3, #2
 8000784:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000786:	4b06      	ldr	r3, [pc, #24]	@ (80007a0 <MX_GPIO_Init+0x2c>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800078a:	f003 0302 	and.w	r3, r3, #2
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000792:	bf00      	nop
 8000794:	370c      	adds	r7, #12
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	40021000 	.word	0x40021000

080007a4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

/* Set up Timer interrupts */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim) {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	4a0f      	ldr	r2, [pc, #60]	@ (80007ec <HAL_TIM_PeriodElapsedCallback+0x48>)
 80007b0:	4293      	cmp	r3, r2
 80007b2:	d117      	bne.n	80007e4 <HAL_TIM_PeriodElapsedCallback+0x40>
		humidity = BSP_HSENSOR_ReadHumidity();
 80007b4:	f000 f9f0 	bl	8000b98 <BSP_HSENSOR_ReadHumidity>
 80007b8:	ee07 0a90 	vmov	s15, r0
 80007bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007c0:	4b0b      	ldr	r3, [pc, #44]	@ (80007f0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80007c2:	edc3 7a00 	vstr	s15, [r3]
		BSP_MAGNETO_GetXYZ(magneticfield);
 80007c6:	480b      	ldr	r0, [pc, #44]	@ (80007f4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80007c8:	f000 fa20 	bl	8000c0c <BSP_MAGNETO_GetXYZ>
		BSP_ACCELERO_AccGetXYZ(acceleration);
 80007cc:	480a      	ldr	r0, [pc, #40]	@ (80007f8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80007ce:	f000 f9ab 	bl	8000b28 <BSP_ACCELERO_AccGetXYZ>
		pressure = BSP_PSENSOR_ReadPressure();
 80007d2:	f000 fa53 	bl	8000c7c <BSP_PSENSOR_ReadPressure>
 80007d6:	ee07 0a90 	vmov	s15, r0
 80007da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007de:	4b07      	ldr	r3, [pc, #28]	@ (80007fc <HAL_TIM_PeriodElapsedCallback+0x58>)
 80007e0:	edc3 7a00 	vstr	s15, [r3]



	}
}
 80007e4:	bf00      	nop
 80007e6:	3708      	adds	r7, #8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	200000fc 	.word	0x200000fc
 80007f0:	200001dc 	.word	0x200001dc
 80007f4:	200001e0 	.word	0x200001e0
 80007f8:	200001e8 	.word	0x200001e8
 80007fc:	200001f0 	.word	0x200001f0

08000800 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000804:	b672      	cpsid	i
}
 8000806:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000808:	bf00      	nop
 800080a:	e7fd      	b.n	8000808 <Error_Handler+0x8>

0800080c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08a      	sub	sp, #40	@ 0x28
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000814:	4b27      	ldr	r3, [pc, #156]	@ (80008b4 <I2Cx_MspInit+0xa8>)
 8000816:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000818:	4a26      	ldr	r2, [pc, #152]	@ (80008b4 <I2Cx_MspInit+0xa8>)
 800081a:	f043 0302 	orr.w	r3, r3, #2
 800081e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000820:	4b24      	ldr	r3, [pc, #144]	@ (80008b4 <I2Cx_MspInit+0xa8>)
 8000822:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000824:	f003 0302 	and.w	r3, r3, #2
 8000828:	613b      	str	r3, [r7, #16]
 800082a:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 800082c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000830:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000832:	2312      	movs	r3, #18
 8000834:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8000836:	2301      	movs	r3, #1
 8000838:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800083a:	2303      	movs	r3, #3
 800083c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800083e:	2304      	movs	r3, #4
 8000840:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000842:	f107 0314 	add.w	r3, r7, #20
 8000846:	4619      	mov	r1, r3
 8000848:	481b      	ldr	r0, [pc, #108]	@ (80008b8 <I2Cx_MspInit+0xac>)
 800084a:	f001 f8f3 	bl	8001a34 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	4619      	mov	r1, r3
 8000854:	4818      	ldr	r0, [pc, #96]	@ (80008b8 <I2Cx_MspInit+0xac>)
 8000856:	f001 f8ed 	bl	8001a34 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800085a:	4b16      	ldr	r3, [pc, #88]	@ (80008b4 <I2Cx_MspInit+0xa8>)
 800085c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800085e:	4a15      	ldr	r2, [pc, #84]	@ (80008b4 <I2Cx_MspInit+0xa8>)
 8000860:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000864:	6593      	str	r3, [r2, #88]	@ 0x58
 8000866:	4b13      	ldr	r3, [pc, #76]	@ (80008b4 <I2Cx_MspInit+0xa8>)
 8000868:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800086a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8000872:	4b10      	ldr	r3, [pc, #64]	@ (80008b4 <I2Cx_MspInit+0xa8>)
 8000874:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000876:	4a0f      	ldr	r2, [pc, #60]	@ (80008b4 <I2Cx_MspInit+0xa8>)
 8000878:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800087c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800087e:	4b0d      	ldr	r3, [pc, #52]	@ (80008b4 <I2Cx_MspInit+0xa8>)
 8000880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000882:	4a0c      	ldr	r2, [pc, #48]	@ (80008b4 <I2Cx_MspInit+0xa8>)
 8000884:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8000888:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800088a:	2200      	movs	r2, #0
 800088c:	210f      	movs	r1, #15
 800088e:	2021      	movs	r0, #33	@ 0x21
 8000890:	f001 f899 	bl	80019c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8000894:	2021      	movs	r0, #33	@ 0x21
 8000896:	f001 f8b2 	bl	80019fe <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800089a:	2200      	movs	r2, #0
 800089c:	210f      	movs	r1, #15
 800089e:	2022      	movs	r0, #34	@ 0x22
 80008a0:	f001 f891 	bl	80019c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 80008a4:	2022      	movs	r0, #34	@ 0x22
 80008a6:	f001 f8aa 	bl	80019fe <HAL_NVIC_EnableIRQ>
}
 80008aa:	bf00      	nop
 80008ac:	3728      	adds	r7, #40	@ 0x28
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40021000 	.word	0x40021000
 80008b8:	48000400 	.word	0x48000400

080008bc <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	4a12      	ldr	r2, [pc, #72]	@ (8000910 <I2Cx_Init+0x54>)
 80008c8:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	4a11      	ldr	r2, [pc, #68]	@ (8000914 <I2Cx_Init+0x58>)
 80008ce:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	2200      	movs	r2, #0
 80008d4:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	2201      	movs	r2, #1
 80008da:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	2200      	movs	r2, #0
 80008e0:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	2200      	movs	r2, #0
 80008e6:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	2200      	movs	r2, #0
 80008ec:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	2200      	movs	r2, #0
 80008f2:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 80008f4:	6878      	ldr	r0, [r7, #4]
 80008f6:	f7ff ff89 	bl	800080c <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80008fa:	6878      	ldr	r0, [r7, #4]
 80008fc:	f001 fb1e 	bl	8001f3c <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8000900:	2100      	movs	r1, #0
 8000902:	6878      	ldr	r0, [r7, #4]
 8000904:	f002 f8d4 	bl	8002ab0 <HAL_I2CEx_ConfigAnalogFilter>
}
 8000908:	bf00      	nop
 800090a:	3708      	adds	r7, #8
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40005800 	.word	0x40005800
 8000914:	00702681 	.word	0x00702681

08000918 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b08a      	sub	sp, #40	@ 0x28
 800091c:	af04      	add	r7, sp, #16
 800091e:	60f8      	str	r0, [r7, #12]
 8000920:	4608      	mov	r0, r1
 8000922:	4611      	mov	r1, r2
 8000924:	461a      	mov	r2, r3
 8000926:	4603      	mov	r3, r0
 8000928:	72fb      	strb	r3, [r7, #11]
 800092a:	460b      	mov	r3, r1
 800092c:	813b      	strh	r3, [r7, #8]
 800092e:	4613      	mov	r3, r2
 8000930:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000932:	2300      	movs	r3, #0
 8000934:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000936:	7afb      	ldrb	r3, [r7, #11]
 8000938:	b299      	uxth	r1, r3
 800093a:	88f8      	ldrh	r0, [r7, #6]
 800093c:	893a      	ldrh	r2, [r7, #8]
 800093e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000942:	9302      	str	r3, [sp, #8]
 8000944:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000946:	9301      	str	r3, [sp, #4]
 8000948:	6a3b      	ldr	r3, [r7, #32]
 800094a:	9300      	str	r3, [sp, #0]
 800094c:	4603      	mov	r3, r0
 800094e:	68f8      	ldr	r0, [r7, #12]
 8000950:	f001 fcd2 	bl	80022f8 <HAL_I2C_Mem_Read>
 8000954:	4603      	mov	r3, r0
 8000956:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8000958:	7dfb      	ldrb	r3, [r7, #23]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d004      	beq.n	8000968 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800095e:	7afb      	ldrb	r3, [r7, #11]
 8000960:	4619      	mov	r1, r3
 8000962:	68f8      	ldr	r0, [r7, #12]
 8000964:	f000 f832 	bl	80009cc <I2Cx_Error>
  }
  return status;
 8000968:	7dfb      	ldrb	r3, [r7, #23]
}
 800096a:	4618      	mov	r0, r3
 800096c:	3718      	adds	r7, #24
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}

08000972 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8000972:	b580      	push	{r7, lr}
 8000974:	b08a      	sub	sp, #40	@ 0x28
 8000976:	af04      	add	r7, sp, #16
 8000978:	60f8      	str	r0, [r7, #12]
 800097a:	4608      	mov	r0, r1
 800097c:	4611      	mov	r1, r2
 800097e:	461a      	mov	r2, r3
 8000980:	4603      	mov	r3, r0
 8000982:	72fb      	strb	r3, [r7, #11]
 8000984:	460b      	mov	r3, r1
 8000986:	813b      	strh	r3, [r7, #8]
 8000988:	4613      	mov	r3, r2
 800098a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800098c:	2300      	movs	r3, #0
 800098e:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000990:	7afb      	ldrb	r3, [r7, #11]
 8000992:	b299      	uxth	r1, r3
 8000994:	88f8      	ldrh	r0, [r7, #6]
 8000996:	893a      	ldrh	r2, [r7, #8]
 8000998:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800099c:	9302      	str	r3, [sp, #8]
 800099e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80009a0:	9301      	str	r3, [sp, #4]
 80009a2:	6a3b      	ldr	r3, [r7, #32]
 80009a4:	9300      	str	r3, [sp, #0]
 80009a6:	4603      	mov	r3, r0
 80009a8:	68f8      	ldr	r0, [r7, #12]
 80009aa:	f001 fb91 	bl	80020d0 <HAL_I2C_Mem_Write>
 80009ae:	4603      	mov	r3, r0
 80009b0:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80009b2:	7dfb      	ldrb	r3, [r7, #23]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d004      	beq.n	80009c2 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80009b8:	7afb      	ldrb	r3, [r7, #11]
 80009ba:	4619      	mov	r1, r3
 80009bc:	68f8      	ldr	r0, [r7, #12]
 80009be:	f000 f805 	bl	80009cc <I2Cx_Error>
  }
  return status;
 80009c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	3718      	adds	r7, #24
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}

080009cc <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	460b      	mov	r3, r1
 80009d6:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80009d8:	6878      	ldr	r0, [r7, #4]
 80009da:	f001 fb4a 	bl	8002072 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80009de:	6878      	ldr	r0, [r7, #4]
 80009e0:	f7ff ff6c 	bl	80008bc <I2Cx_Init>
}
 80009e4:	bf00      	nop
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}

080009ec <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 80009f0:	4802      	ldr	r0, [pc, #8]	@ (80009fc <SENSOR_IO_Init+0x10>)
 80009f2:	f7ff ff63 	bl	80008bc <I2Cx_Init>
}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	200001f4 	.word	0x200001f4

08000a00 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af02      	add	r7, sp, #8
 8000a06:	4603      	mov	r3, r0
 8000a08:	71fb      	strb	r3, [r7, #7]
 8000a0a:	460b      	mov	r3, r1
 8000a0c:	71bb      	strb	r3, [r7, #6]
 8000a0e:	4613      	mov	r3, r2
 8000a10:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8000a12:	79bb      	ldrb	r3, [r7, #6]
 8000a14:	b29a      	uxth	r2, r3
 8000a16:	79f9      	ldrb	r1, [r7, #7]
 8000a18:	2301      	movs	r3, #1
 8000a1a:	9301      	str	r3, [sp, #4]
 8000a1c:	1d7b      	adds	r3, r7, #5
 8000a1e:	9300      	str	r3, [sp, #0]
 8000a20:	2301      	movs	r3, #1
 8000a22:	4803      	ldr	r0, [pc, #12]	@ (8000a30 <SENSOR_IO_Write+0x30>)
 8000a24:	f7ff ffa5 	bl	8000972 <I2Cx_WriteMultiple>
}
 8000a28:	bf00      	nop
 8000a2a:	3708      	adds	r7, #8
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	200001f4 	.word	0x200001f4

08000a34 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b086      	sub	sp, #24
 8000a38:	af02      	add	r7, sp, #8
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	460a      	mov	r2, r1
 8000a3e:	71fb      	strb	r3, [r7, #7]
 8000a40:	4613      	mov	r3, r2
 8000a42:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8000a44:	2300      	movs	r3, #0
 8000a46:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8000a48:	79bb      	ldrb	r3, [r7, #6]
 8000a4a:	b29a      	uxth	r2, r3
 8000a4c:	79f9      	ldrb	r1, [r7, #7]
 8000a4e:	2301      	movs	r3, #1
 8000a50:	9301      	str	r3, [sp, #4]
 8000a52:	f107 030f 	add.w	r3, r7, #15
 8000a56:	9300      	str	r3, [sp, #0]
 8000a58:	2301      	movs	r3, #1
 8000a5a:	4804      	ldr	r0, [pc, #16]	@ (8000a6c <SENSOR_IO_Read+0x38>)
 8000a5c:	f7ff ff5c 	bl	8000918 <I2Cx_ReadMultiple>

  return read_value;
 8000a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3710      	adds	r7, #16
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	200001f4 	.word	0x200001f4

08000a70 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af02      	add	r7, sp, #8
 8000a76:	603a      	str	r2, [r7, #0]
 8000a78:	461a      	mov	r2, r3
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	71fb      	strb	r3, [r7, #7]
 8000a7e:	460b      	mov	r3, r1
 8000a80:	71bb      	strb	r3, [r7, #6]
 8000a82:	4613      	mov	r3, r2
 8000a84:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8000a86:	79bb      	ldrb	r3, [r7, #6]
 8000a88:	b29a      	uxth	r2, r3
 8000a8a:	79f9      	ldrb	r1, [r7, #7]
 8000a8c:	88bb      	ldrh	r3, [r7, #4]
 8000a8e:	9301      	str	r3, [sp, #4]
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	9300      	str	r3, [sp, #0]
 8000a94:	2301      	movs	r3, #1
 8000a96:	4804      	ldr	r0, [pc, #16]	@ (8000aa8 <SENSOR_IO_ReadMultiple+0x38>)
 8000a98:	f7ff ff3e 	bl	8000918 <I2Cx_ReadMultiple>
 8000a9c:	4603      	mov	r3, r0
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	200001f4 	.word	0x200001f4

08000aac <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8000aba:	4b19      	ldr	r3, [pc, #100]	@ (8000b20 <BSP_ACCELERO_Init+0x74>)
 8000abc:	689b      	ldr	r3, [r3, #8]
 8000abe:	4798      	blx	r3
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b6a      	cmp	r3, #106	@ 0x6a
 8000ac4:	d002      	beq.n	8000acc <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	73fb      	strb	r3, [r7, #15]
 8000aca:	e024      	b.n	8000b16 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8000acc:	4b15      	ldr	r3, [pc, #84]	@ (8000b24 <BSP_ACCELERO_Init+0x78>)
 8000ace:	4a14      	ldr	r2, [pc, #80]	@ (8000b20 <BSP_ACCELERO_Init+0x74>)
 8000ad0:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8000ad2:	2330      	movs	r3, #48	@ 0x30
 8000ad4:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8000ada:	2300      	movs	r3, #0
 8000adc:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8000ade:	2340      	movs	r3, #64	@ 0x40
 8000ae0:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8000aea:	797a      	ldrb	r2, [r7, #5]
 8000aec:	7abb      	ldrb	r3, [r7, #10]
 8000aee:	4313      	orrs	r3, r2
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8000af4:	7a3b      	ldrb	r3, [r7, #8]
 8000af6:	f043 0304 	orr.w	r3, r3, #4
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	021b      	lsls	r3, r3, #8
 8000afe:	b21a      	sxth	r2, r3
 8000b00:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000b04:	4313      	orrs	r3, r2
 8000b06:	b21b      	sxth	r3, r3
 8000b08:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8000b0a:	4b06      	ldr	r3, [pc, #24]	@ (8000b24 <BSP_ACCELERO_Init+0x78>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	89ba      	ldrh	r2, [r7, #12]
 8000b12:	4610      	mov	r0, r2
 8000b14:	4798      	blx	r3
  }  

  return ret;
 8000b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3710      	adds	r7, #16
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	20000050 	.word	0x20000050
 8000b24:	20000248 	.word	0x20000248

08000b28 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8000b30:	4b08      	ldr	r3, [pc, #32]	@ (8000b54 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d009      	beq.n	8000b4c <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8000b38:	4b06      	ldr	r3, [pc, #24]	@ (8000b54 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d004      	beq.n	8000b4c <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8000b42:	4b04      	ldr	r3, [pc, #16]	@ (8000b54 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	4798      	blx	r3
    }
  }
}
 8000b4c:	bf00      	nop
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	20000248 	.word	0x20000248

08000b58 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b90 <BSP_HSENSOR_Init+0x38>)
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	20be      	movs	r0, #190	@ 0xbe
 8000b64:	4798      	blx	r3
 8000b66:	4603      	mov	r3, r0
 8000b68:	2bbc      	cmp	r3, #188	@ 0xbc
 8000b6a:	d002      	beq.n	8000b72 <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	e009      	b.n	8000b86 <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 8000b72:	4b08      	ldr	r3, [pc, #32]	@ (8000b94 <BSP_HSENSOR_Init+0x3c>)
 8000b74:	4a06      	ldr	r2, [pc, #24]	@ (8000b90 <BSP_HSENSOR_Init+0x38>)
 8000b76:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8000b78:	4b06      	ldr	r3, [pc, #24]	@ (8000b94 <BSP_HSENSOR_Init+0x3c>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	20be      	movs	r0, #190	@ 0xbe
 8000b80:	4798      	blx	r3
    ret = HSENSOR_OK;
 8000b82:	2300      	movs	r3, #0
 8000b84:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8000b86:	687b      	ldr	r3, [r7, #4]
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20000004 	.word	0x20000004
 8000b94:	2000024c 	.word	0x2000024c

08000b98 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 8000b9c:	4b04      	ldr	r3, [pc, #16]	@ (8000bb0 <BSP_HSENSOR_ReadHumidity+0x18>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	689b      	ldr	r3, [r3, #8]
 8000ba2:	20be      	movs	r0, #190	@ 0xbe
 8000ba4:	4798      	blx	r3
 8000ba6:	eef0 7a40 	vmov.f32	s15, s0
}
 8000baa:	eeb0 0a67 	vmov.f32	s0, s15
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	2000024c 	.word	0x2000024c

08000bb4 <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 8000bbe:	4b11      	ldr	r3, [pc, #68]	@ (8000c04 <BSP_MAGNETO_Init+0x50>)
 8000bc0:	689b      	ldr	r3, [r3, #8]
 8000bc2:	4798      	blx	r3
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b3d      	cmp	r3, #61	@ 0x3d
 8000bc8:	d002      	beq.n	8000bd0 <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	71fb      	strb	r3, [r7, #7]
 8000bce:	e013      	b.n	8000bf8 <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 8000bd0:	4b0d      	ldr	r3, [pc, #52]	@ (8000c08 <BSP_MAGNETO_Init+0x54>)
 8000bd2:	4a0c      	ldr	r2, [pc, #48]	@ (8000c04 <BSP_MAGNETO_Init+0x50>)
 8000bd4:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 8000bd6:	2358      	movs	r3, #88	@ 0x58
 8000bd8:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 8000bde:	2300      	movs	r3, #0
 8000be0:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 8000be2:	2308      	movs	r3, #8
 8000be4:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 8000be6:	2340      	movs	r3, #64	@ 0x40
 8000be8:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 8000bea:	4b07      	ldr	r3, [pc, #28]	@ (8000c08 <BSP_MAGNETO_Init+0x54>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	463a      	mov	r2, r7
 8000bf2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bf6:	4798      	blx	r3
  } 

  return ret;  
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20000010 	.word	0x20000010
 8000c08:	20000250 	.word	0x20000250

08000c0c <BSP_MAGNETO_GetXYZ>:
  * @brief  Get XYZ magnetometer values.
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  if(MagnetoDrv != NULL)
 8000c14:	4b08      	ldr	r3, [pc, #32]	@ (8000c38 <BSP_MAGNETO_GetXYZ+0x2c>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d009      	beq.n	8000c30 <BSP_MAGNETO_GetXYZ+0x24>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 8000c1c:	4b06      	ldr	r3, [pc, #24]	@ (8000c38 <BSP_MAGNETO_GetXYZ+0x2c>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d004      	beq.n	8000c30 <BSP_MAGNETO_GetXYZ+0x24>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 8000c26:	4b04      	ldr	r3, [pc, #16]	@ (8000c38 <BSP_MAGNETO_GetXYZ+0x2c>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	4798      	blx	r3
    }
  }
}
 8000c30:	bf00      	nop
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	20000250 	.word	0x20000250

08000c3c <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 8000c42:	4b0c      	ldr	r3, [pc, #48]	@ (8000c74 <BSP_PSENSOR_Init+0x38>)
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	20ba      	movs	r0, #186	@ 0xba
 8000c48:	4798      	blx	r3
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2bb1      	cmp	r3, #177	@ 0xb1
 8000c4e:	d002      	beq.n	8000c56 <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 8000c50:	2301      	movs	r3, #1
 8000c52:	607b      	str	r3, [r7, #4]
 8000c54:	e009      	b.n	8000c6a <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 8000c56:	4b08      	ldr	r3, [pc, #32]	@ (8000c78 <BSP_PSENSOR_Init+0x3c>)
 8000c58:	4a06      	ldr	r2, [pc, #24]	@ (8000c74 <BSP_PSENSOR_Init+0x38>)
 8000c5a:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8000c5c:	4b06      	ldr	r3, [pc, #24]	@ (8000c78 <BSP_PSENSOR_Init+0x3c>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	20ba      	movs	r0, #186	@ 0xba
 8000c64:	4798      	blx	r3
    ret = PSENSOR_OK;
 8000c66:	2300      	movs	r3, #0
 8000c68:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8000c6a:	687b      	ldr	r3, [r7, #4]
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20000044 	.word	0x20000044
 8000c78:	20000254 	.word	0x20000254

08000c7c <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 8000c80:	4b04      	ldr	r3, [pc, #16]	@ (8000c94 <BSP_PSENSOR_ReadPressure+0x18>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	689b      	ldr	r3, [r3, #8]
 8000c86:	20ba      	movs	r0, #186	@ 0xba
 8000c88:	4798      	blx	r3
 8000c8a:	eef0 7a40 	vmov.f32	s15, s0
}
 8000c8e:	eeb0 0a67 	vmov.f32	s0, s15
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	20000254 	.word	0x20000254

08000c98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c9e:	4b0f      	ldr	r3, [pc, #60]	@ (8000cdc <HAL_MspInit+0x44>)
 8000ca0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ca2:	4a0e      	ldr	r2, [pc, #56]	@ (8000cdc <HAL_MspInit+0x44>)
 8000ca4:	f043 0301 	orr.w	r3, r3, #1
 8000ca8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000caa:	4b0c      	ldr	r3, [pc, #48]	@ (8000cdc <HAL_MspInit+0x44>)
 8000cac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cae:	f003 0301 	and.w	r3, r3, #1
 8000cb2:	607b      	str	r3, [r7, #4]
 8000cb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb6:	4b09      	ldr	r3, [pc, #36]	@ (8000cdc <HAL_MspInit+0x44>)
 8000cb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cba:	4a08      	ldr	r2, [pc, #32]	@ (8000cdc <HAL_MspInit+0x44>)
 8000cbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cc0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cc2:	4b06      	ldr	r3, [pc, #24]	@ (8000cdc <HAL_MspInit+0x44>)
 8000cc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cca:	603b      	str	r3, [r7, #0]
 8000ccc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	40021000 	.word	0x40021000

08000ce0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b0ae      	sub	sp, #184	@ 0xb8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cf8:	f107 0310 	add.w	r3, r7, #16
 8000cfc:	2294      	movs	r2, #148	@ 0x94
 8000cfe:	2100      	movs	r1, #0
 8000d00:	4618      	mov	r0, r3
 8000d02:	f004 fec5 	bl	8005a90 <memset>
  if(hi2c->Instance==I2C2)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a21      	ldr	r2, [pc, #132]	@ (8000d90 <HAL_I2C_MspInit+0xb0>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d13b      	bne.n	8000d88 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000d10:	2380      	movs	r3, #128	@ 0x80
 8000d12:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000d14:	2300      	movs	r3, #0
 8000d16:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d18:	f107 0310 	add.w	r3, r7, #16
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f002 fefb 	bl	8003b18 <HAL_RCCEx_PeriphCLKConfig>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000d28:	f7ff fd6a 	bl	8000800 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d2c:	4b19      	ldr	r3, [pc, #100]	@ (8000d94 <HAL_I2C_MspInit+0xb4>)
 8000d2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d30:	4a18      	ldr	r2, [pc, #96]	@ (8000d94 <HAL_I2C_MspInit+0xb4>)
 8000d32:	f043 0302 	orr.w	r3, r3, #2
 8000d36:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d38:	4b16      	ldr	r3, [pc, #88]	@ (8000d94 <HAL_I2C_MspInit+0xb4>)
 8000d3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d3c:	f003 0302 	and.w	r3, r3, #2
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000d44:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000d48:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d4c:	2312      	movs	r3, #18
 8000d4e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000d5e:	2304      	movs	r3, #4
 8000d60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d64:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d68:	4619      	mov	r1, r3
 8000d6a:	480b      	ldr	r0, [pc, #44]	@ (8000d98 <HAL_I2C_MspInit+0xb8>)
 8000d6c:	f000 fe62 	bl	8001a34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000d70:	4b08      	ldr	r3, [pc, #32]	@ (8000d94 <HAL_I2C_MspInit+0xb4>)
 8000d72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d74:	4a07      	ldr	r2, [pc, #28]	@ (8000d94 <HAL_I2C_MspInit+0xb4>)
 8000d76:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000d7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d7c:	4b05      	ldr	r3, [pc, #20]	@ (8000d94 <HAL_I2C_MspInit+0xb4>)
 8000d7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d80:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000d84:	60bb      	str	r3, [r7, #8]
 8000d86:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000d88:	bf00      	nop
 8000d8a:	37b8      	adds	r7, #184	@ 0xb8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	40005800 	.word	0x40005800
 8000d94:	40021000 	.word	0x40021000
 8000d98:	48000400 	.word	0x48000400

08000d9c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a0b      	ldr	r2, [pc, #44]	@ (8000dd8 <HAL_I2C_MspDeInit+0x3c>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d10f      	bne.n	8000dce <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8000dae:	4b0b      	ldr	r3, [pc, #44]	@ (8000ddc <HAL_I2C_MspDeInit+0x40>)
 8000db0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000db2:	4a0a      	ldr	r2, [pc, #40]	@ (8000ddc <HAL_I2C_MspDeInit+0x40>)
 8000db4:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8000db8:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8000dba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000dbe:	4808      	ldr	r0, [pc, #32]	@ (8000de0 <HAL_I2C_MspDeInit+0x44>)
 8000dc0:	f000 ffca 	bl	8001d58 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8000dc4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000dc8:	4805      	ldr	r0, [pc, #20]	@ (8000de0 <HAL_I2C_MspDeInit+0x44>)
 8000dca:	f000 ffc5 	bl	8001d58 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8000dce:	bf00      	nop
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40005800 	.word	0x40005800
 8000ddc:	40021000 	.word	0x40021000
 8000de0:	48000400 	.word	0x48000400

08000de4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000df4:	d113      	bne.n	8000e1e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000df6:	4b0c      	ldr	r3, [pc, #48]	@ (8000e28 <HAL_TIM_Base_MspInit+0x44>)
 8000df8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dfa:	4a0b      	ldr	r2, [pc, #44]	@ (8000e28 <HAL_TIM_Base_MspInit+0x44>)
 8000dfc:	f043 0301 	orr.w	r3, r3, #1
 8000e00:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e02:	4b09      	ldr	r3, [pc, #36]	@ (8000e28 <HAL_TIM_Base_MspInit+0x44>)
 8000e04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e06:	f003 0301 	and.w	r3, r3, #1
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	2100      	movs	r1, #0
 8000e12:	201c      	movs	r0, #28
 8000e14:	f000 fdd7 	bl	80019c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e18:	201c      	movs	r0, #28
 8000e1a:	f000 fdf0 	bl	80019fe <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000e1e:	bf00      	nop
 8000e20:	3710      	adds	r7, #16
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40021000 	.word	0x40021000

08000e2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b0ae      	sub	sp, #184	@ 0xb8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e34:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]
 8000e42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e44:	f107 0310 	add.w	r3, r7, #16
 8000e48:	2294      	movs	r2, #148	@ 0x94
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f004 fe1f 	bl	8005a90 <memset>
  if(huart->Instance==USART1)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a21      	ldr	r2, [pc, #132]	@ (8000edc <HAL_UART_MspInit+0xb0>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d13a      	bne.n	8000ed2 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e60:	2300      	movs	r3, #0
 8000e62:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e64:	f107 0310 	add.w	r3, r7, #16
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f002 fe55 	bl	8003b18 <HAL_RCCEx_PeriphCLKConfig>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e74:	f7ff fcc4 	bl	8000800 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e78:	4b19      	ldr	r3, [pc, #100]	@ (8000ee0 <HAL_UART_MspInit+0xb4>)
 8000e7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e7c:	4a18      	ldr	r2, [pc, #96]	@ (8000ee0 <HAL_UART_MspInit+0xb4>)
 8000e7e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e82:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e84:	4b16      	ldr	r3, [pc, #88]	@ (8000ee0 <HAL_UART_MspInit+0xb4>)
 8000e86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e90:	4b13      	ldr	r3, [pc, #76]	@ (8000ee0 <HAL_UART_MspInit+0xb4>)
 8000e92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e94:	4a12      	ldr	r2, [pc, #72]	@ (8000ee0 <HAL_UART_MspInit+0xb4>)
 8000e96:	f043 0302 	orr.w	r3, r3, #2
 8000e9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e9c:	4b10      	ldr	r3, [pc, #64]	@ (8000ee0 <HAL_UART_MspInit+0xb4>)
 8000e9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ea0:	f003 0302 	and.w	r3, r3, #2
 8000ea4:	60bb      	str	r3, [r7, #8]
 8000ea6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ea8:	23c0      	movs	r3, #192	@ 0xc0
 8000eaa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ec0:	2307      	movs	r3, #7
 8000ec2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4805      	ldr	r0, [pc, #20]	@ (8000ee4 <HAL_UART_MspInit+0xb8>)
 8000ece:	f000 fdb1 	bl	8001a34 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000ed2:	bf00      	nop
 8000ed4:	37b8      	adds	r7, #184	@ 0xb8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40013800 	.word	0x40013800
 8000ee0:	40021000 	.word	0x40021000
 8000ee4:	48000400 	.word	0x48000400

08000ee8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000eec:	bf00      	nop
 8000eee:	e7fd      	b.n	8000eec <NMI_Handler+0x4>

08000ef0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ef4:	bf00      	nop
 8000ef6:	e7fd      	b.n	8000ef4 <HardFault_Handler+0x4>

08000ef8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000efc:	bf00      	nop
 8000efe:	e7fd      	b.n	8000efc <MemManage_Handler+0x4>

08000f00 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f04:	bf00      	nop
 8000f06:	e7fd      	b.n	8000f04 <BusFault_Handler+0x4>

08000f08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f0c:	bf00      	nop
 8000f0e:	e7fd      	b.n	8000f0c <UsageFault_Handler+0x4>

08000f10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr

08000f1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr

08000f3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f3e:	f000 fc47 	bl	80017d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
	...

08000f48 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f4c:	4802      	ldr	r0, [pc, #8]	@ (8000f58 <TIM2_IRQHandler+0x10>)
 8000f4e:	f003 fb52 	bl	80045f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	200000fc 	.word	0x200000fc

08000f5c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f60:	4b06      	ldr	r3, [pc, #24]	@ (8000f7c <SystemInit+0x20>)
 8000f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f66:	4a05      	ldr	r2, [pc, #20]	@ (8000f7c <SystemInit+0x20>)
 8000f68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	e000ed00 	.word	0xe000ed00

08000f80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fb8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f84:	f7ff ffea 	bl	8000f5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f88:	480c      	ldr	r0, [pc, #48]	@ (8000fbc <LoopForever+0x6>)
  ldr r1, =_edata
 8000f8a:	490d      	ldr	r1, [pc, #52]	@ (8000fc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000fc4 <LoopForever+0xe>)
  movs r3, #0
 8000f8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f90:	e002      	b.n	8000f98 <LoopCopyDataInit>

08000f92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f96:	3304      	adds	r3, #4

08000f98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f9c:	d3f9      	bcc.n	8000f92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000fc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fa0:	4c0a      	ldr	r4, [pc, #40]	@ (8000fcc <LoopForever+0x16>)
  movs r3, #0
 8000fa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fa4:	e001      	b.n	8000faa <LoopFillZerobss>

08000fa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fa8:	3204      	adds	r2, #4

08000faa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000faa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fac:	d3fb      	bcc.n	8000fa6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fae:	f004 fd77 	bl	8005aa0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fb2:	f7ff fa9b 	bl	80004ec <main>

08000fb6 <LoopForever>:

LoopForever:
    b LoopForever
 8000fb6:	e7fe      	b.n	8000fb6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000fb8:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000fbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fc0:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8000fc4:	08005b80 	.word	0x08005b80
  ldr r2, =_sbss
 8000fc8:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8000fcc:	2000025c 	.word	0x2000025c

08000fd0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fd0:	e7fe      	b.n	8000fd0 <ADC1_IRQHandler>

08000fd2 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b084      	sub	sp, #16
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	4603      	mov	r3, r0
 8000fda:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8000fdc:	88fb      	ldrh	r3, [r7, #6]
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	2120      	movs	r1, #32
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff fd26 	bl	8000a34 <SENSOR_IO_Read>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8000fec:	7bfb      	ldrb	r3, [r7, #15]
 8000fee:	f023 0304 	bic.w	r3, r3, #4
 8000ff2:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8000ff4:	7bfb      	ldrb	r3, [r7, #15]
 8000ff6:	f043 0304 	orr.w	r3, r3, #4
 8000ffa:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8000ffc:	7bfb      	ldrb	r3, [r7, #15]
 8000ffe:	f023 0303 	bic.w	r3, r3, #3
 8001002:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8001004:	7bfb      	ldrb	r3, [r7, #15]
 8001006:	f043 0301 	orr.w	r3, r3, #1
 800100a:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 800100c:	7bfb      	ldrb	r3, [r7, #15]
 800100e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001012:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8001014:	88fb      	ldrh	r3, [r7, #6]
 8001016:	b2db      	uxtb	r3, r3
 8001018:	7bfa      	ldrb	r2, [r7, #15]
 800101a:	2120      	movs	r1, #32
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff fcef 	bl	8000a00 <SENSOR_IO_Write>
}
 8001022:	bf00      	nop
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 800102a:	b580      	push	{r7, lr}
 800102c:	b084      	sub	sp, #16
 800102e:	af00      	add	r7, sp, #0
 8001030:	4603      	mov	r3, r0
 8001032:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001034:	2300      	movs	r3, #0
 8001036:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 8001038:	f7ff fcd8 	bl	80009ec <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 800103c:	88fb      	ldrh	r3, [r7, #6]
 800103e:	b2db      	uxtb	r3, r3
 8001040:	210f      	movs	r1, #15
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff fcf6 	bl	8000a34 <SENSOR_IO_Read>
 8001048:	4603      	mov	r3, r0
 800104a:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 800104c:	7bfb      	ldrb	r3, [r7, #15]
}
 800104e:	4618      	mov	r0, r3
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
	...

08001058 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b088      	sub	sp, #32
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8001062:	88fb      	ldrh	r3, [r7, #6]
 8001064:	b2d8      	uxtb	r0, r3
 8001066:	f107 020c 	add.w	r2, r7, #12
 800106a:	2302      	movs	r3, #2
 800106c:	21b0      	movs	r1, #176	@ 0xb0
 800106e:	f7ff fcff 	bl	8000a70 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 8001072:	7b3b      	ldrb	r3, [r7, #12]
 8001074:	085b      	lsrs	r3, r3, #1
 8001076:	b2db      	uxtb	r3, r3
 8001078:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 800107a:	7b7b      	ldrb	r3, [r7, #13]
 800107c:	085b      	lsrs	r3, r3, #1
 800107e:	b2db      	uxtb	r3, r3
 8001080:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8001082:	88fb      	ldrh	r3, [r7, #6]
 8001084:	b2d8      	uxtb	r0, r3
 8001086:	f107 020c 	add.w	r2, r7, #12
 800108a:	2302      	movs	r3, #2
 800108c:	21b6      	movs	r1, #182	@ 0xb6
 800108e:	f7ff fcef 	bl	8000a70 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001092:	7b7b      	ldrb	r3, [r7, #13]
 8001094:	021b      	lsls	r3, r3, #8
 8001096:	b21a      	sxth	r2, r3
 8001098:	7b3b      	ldrb	r3, [r7, #12]
 800109a:	b21b      	sxth	r3, r3
 800109c:	4313      	orrs	r3, r2
 800109e:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 80010a0:	88fb      	ldrh	r3, [r7, #6]
 80010a2:	b2d8      	uxtb	r0, r3
 80010a4:	f107 020c 	add.w	r2, r7, #12
 80010a8:	2302      	movs	r3, #2
 80010aa:	21ba      	movs	r1, #186	@ 0xba
 80010ac:	f7ff fce0 	bl	8000a70 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80010b0:	7b7b      	ldrb	r3, [r7, #13]
 80010b2:	021b      	lsls	r3, r3, #8
 80010b4:	b21a      	sxth	r2, r3
 80010b6:	7b3b      	ldrb	r3, [r7, #12]
 80010b8:	b21b      	sxth	r3, r3
 80010ba:	4313      	orrs	r3, r2
 80010bc:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 80010be:	88fb      	ldrh	r3, [r7, #6]
 80010c0:	b2d8      	uxtb	r0, r3
 80010c2:	f107 020c 	add.w	r2, r7, #12
 80010c6:	2302      	movs	r3, #2
 80010c8:	21a8      	movs	r1, #168	@ 0xa8
 80010ca:	f7ff fcd1 	bl	8000a70 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80010ce:	7b7b      	ldrb	r3, [r7, #13]
 80010d0:	021b      	lsls	r3, r3, #8
 80010d2:	b21a      	sxth	r2, r3
 80010d4:	7b3b      	ldrb	r3, [r7, #12]
 80010d6:	b21b      	sxth	r3, r3
 80010d8:	4313      	orrs	r3, r2
 80010da:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 80010dc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80010e0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	ee07 3a90 	vmov	s15, r3
 80010ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010ee:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80010f2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	ee07 3a90 	vmov	s15, r3
 80010fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001100:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001104:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001108:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	ee07 3a90 	vmov	s15, r3
 8001112:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001116:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800111a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800111e:	ee07 3a90 	vmov	s15, r3
 8001122:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001126:	ee77 7a27 	vadd.f32	s15, s14, s15
 800112a:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 800112e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001132:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001136:	ee67 7a87 	vmul.f32	s15, s15, s14
 800113a:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 800113e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001142:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001188 <HTS221_H_ReadHumidity+0x130>
 8001146:	eef4 7ac7 	vcmpe.f32	s15, s14
 800114a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800114e:	dd01      	ble.n	8001154 <HTS221_H_ReadHumidity+0xfc>
 8001150:	4b0e      	ldr	r3, [pc, #56]	@ (800118c <HTS221_H_ReadHumidity+0x134>)
 8001152:	e00a      	b.n	800116a <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8001154:	edd7 7a04 	vldr	s15, [r7, #16]
 8001158:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800115c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001160:	d502      	bpl.n	8001168 <HTS221_H_ReadHumidity+0x110>
 8001162:	f04f 0300 	mov.w	r3, #0
 8001166:	e000      	b.n	800116a <HTS221_H_ReadHumidity+0x112>
 8001168:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 800116a:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 800116c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001170:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001174:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001178:	eef0 7a66 	vmov.f32	s15, s13
}
 800117c:	eeb0 0a67 	vmov.f32	s0, s15
 8001180:	3720      	adds	r7, #32
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	447a0000 	.word	0x447a0000
 800118c:	447a0000 	.word	0x447a0000

08001190 <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	463b      	mov	r3, r7
 8001198:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 800119c:	783b      	ldrb	r3, [r7, #0]
 800119e:	461a      	mov	r2, r3
 80011a0:	2120      	movs	r1, #32
 80011a2:	203c      	movs	r0, #60	@ 0x3c
 80011a4:	f7ff fc2c 	bl	8000a00 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 80011a8:	787b      	ldrb	r3, [r7, #1]
 80011aa:	461a      	mov	r2, r3
 80011ac:	2121      	movs	r1, #33	@ 0x21
 80011ae:	203c      	movs	r0, #60	@ 0x3c
 80011b0:	f7ff fc26 	bl	8000a00 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 80011b4:	78bb      	ldrb	r3, [r7, #2]
 80011b6:	461a      	mov	r2, r3
 80011b8:	2122      	movs	r1, #34	@ 0x22
 80011ba:	203c      	movs	r0, #60	@ 0x3c
 80011bc:	f7ff fc20 	bl	8000a00 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 80011c0:	78fb      	ldrb	r3, [r7, #3]
 80011c2:	461a      	mov	r2, r3
 80011c4:	2123      	movs	r1, #35	@ 0x23
 80011c6:	203c      	movs	r0, #60	@ 0x3c
 80011c8:	f7ff fc1a 	bl	8000a00 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 80011cc:	793b      	ldrb	r3, [r7, #4]
 80011ce:	461a      	mov	r2, r3
 80011d0:	2124      	movs	r1, #36	@ 0x24
 80011d2:	203c      	movs	r0, #60	@ 0x3c
 80011d4:	f7ff fc14 	bl	8000a00 <SENSOR_IO_Write>
}
 80011d8:	bf00      	nop
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80011e6:	2300      	movs	r3, #0
 80011e8:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 80011ea:	2122      	movs	r1, #34	@ 0x22
 80011ec:	203c      	movs	r0, #60	@ 0x3c
 80011ee:	f7ff fc21 	bl	8000a34 <SENSOR_IO_Read>
 80011f2:	4603      	mov	r3, r0
 80011f4:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	f023 0303 	bic.w	r3, r3, #3
 80011fc:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	f043 0303 	orr.w	r3, r3, #3
 8001204:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	461a      	mov	r2, r3
 800120a:	2122      	movs	r1, #34	@ 0x22
 800120c:	203c      	movs	r0, #60	@ 0x3c
 800120e:	f7ff fbf7 	bl	8000a00 <SENSOR_IO_Write>
}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 800121e:	f7ff fbe5 	bl	80009ec <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 8001222:	210f      	movs	r1, #15
 8001224:	203c      	movs	r0, #60	@ 0x3c
 8001226:	f7ff fc05 	bl	8000a34 <SENSOR_IO_Read>
 800122a:	4603      	mov	r3, r0
}
 800122c:	4618      	mov	r0, r3
 800122e:	bd80      	pop	{r7, pc}

08001230 <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 800123a:	2300      	movs	r3, #0
 800123c:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 800123e:	2122      	movs	r1, #34	@ 0x22
 8001240:	203c      	movs	r0, #60	@ 0x3c
 8001242:	f7ff fbf7 	bl	8000a34 <SENSOR_IO_Read>
 8001246:	4603      	mov	r3, r0
 8001248:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 800124a:	7bfb      	ldrb	r3, [r7, #15]
 800124c:	f023 0320 	bic.w	r3, r3, #32
 8001250:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8001252:	88fb      	ldrh	r3, [r7, #6]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d003      	beq.n	8001260 <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 8001258:	7bfb      	ldrb	r3, [r7, #15]
 800125a:	f043 0320 	orr.w	r3, r3, #32
 800125e:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8001260:	7bfb      	ldrb	r3, [r7, #15]
 8001262:	461a      	mov	r2, r3
 8001264:	2122      	movs	r1, #34	@ 0x22
 8001266:	203c      	movs	r0, #60	@ 0x3c
 8001268:	f7ff fbca 	bl	8000a00 <SENSOR_IO_Write>
}
 800126c:	bf00      	nop
 800126e:	3710      	adds	r7, #16
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b088      	sub	sp, #32
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 800127c:	2300      	movs	r3, #0
 800127e:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8001280:	2300      	movs	r3, #0
 8001282:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8001284:	f04f 0300 	mov.w	r3, #0
 8001288:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 800128a:	2121      	movs	r1, #33	@ 0x21
 800128c:	203c      	movs	r0, #60	@ 0x3c
 800128e:	f7ff fbd1 	bl	8000a34 <SENSOR_IO_Read>
 8001292:	4603      	mov	r3, r0
 8001294:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 8001296:	f107 0208 	add.w	r2, r7, #8
 800129a:	2306      	movs	r3, #6
 800129c:	21a8      	movs	r1, #168	@ 0xa8
 800129e:	203c      	movs	r0, #60	@ 0x3c
 80012a0:	f7ff fbe6 	bl	8000a70 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80012a4:	2300      	movs	r3, #0
 80012a6:	77fb      	strb	r3, [r7, #31]
 80012a8:	e01a      	b.n	80012e0 <LIS3MDL_MagReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80012aa:	7ffb      	ldrb	r3, [r7, #31]
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	3301      	adds	r3, #1
 80012b0:	3320      	adds	r3, #32
 80012b2:	443b      	add	r3, r7
 80012b4:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80012b8:	021b      	lsls	r3, r3, #8
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	7ffa      	ldrb	r2, [r7, #31]
 80012be:	0052      	lsls	r2, r2, #1
 80012c0:	3220      	adds	r2, #32
 80012c2:	443a      	add	r2, r7
 80012c4:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 80012c8:	4413      	add	r3, r2
 80012ca:	b29a      	uxth	r2, r3
 80012cc:	7ffb      	ldrb	r3, [r7, #31]
 80012ce:	b212      	sxth	r2, r2
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	3320      	adds	r3, #32
 80012d4:	443b      	add	r3, r7
 80012d6:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80012da:	7ffb      	ldrb	r3, [r7, #31]
 80012dc:	3301      	adds	r3, #1
 80012de:	77fb      	strb	r3, [r7, #31]
 80012e0:	7ffb      	ldrb	r3, [r7, #31]
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d9e1      	bls.n	80012aa <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 80012e6:	7dfb      	ldrb	r3, [r7, #23]
 80012e8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80012ec:	2b60      	cmp	r3, #96	@ 0x60
 80012ee:	d013      	beq.n	8001318 <LIS3MDL_MagReadXYZ+0xa4>
 80012f0:	2b60      	cmp	r3, #96	@ 0x60
 80012f2:	dc14      	bgt.n	800131e <LIS3MDL_MagReadXYZ+0xaa>
 80012f4:	2b40      	cmp	r3, #64	@ 0x40
 80012f6:	d00c      	beq.n	8001312 <LIS3MDL_MagReadXYZ+0x9e>
 80012f8:	2b40      	cmp	r3, #64	@ 0x40
 80012fa:	dc10      	bgt.n	800131e <LIS3MDL_MagReadXYZ+0xaa>
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d002      	beq.n	8001306 <LIS3MDL_MagReadXYZ+0x92>
 8001300:	2b20      	cmp	r3, #32
 8001302:	d003      	beq.n	800130c <LIS3MDL_MagReadXYZ+0x98>
 8001304:	e00b      	b.n	800131e <LIS3MDL_MagReadXYZ+0xaa>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 8001306:	4b19      	ldr	r3, [pc, #100]	@ (800136c <LIS3MDL_MagReadXYZ+0xf8>)
 8001308:	61bb      	str	r3, [r7, #24]
    break;
 800130a:	e008      	b.n	800131e <LIS3MDL_MagReadXYZ+0xaa>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 800130c:	4b18      	ldr	r3, [pc, #96]	@ (8001370 <LIS3MDL_MagReadXYZ+0xfc>)
 800130e:	61bb      	str	r3, [r7, #24]
    break;
 8001310:	e005      	b.n	800131e <LIS3MDL_MagReadXYZ+0xaa>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 8001312:	4b18      	ldr	r3, [pc, #96]	@ (8001374 <LIS3MDL_MagReadXYZ+0x100>)
 8001314:	61bb      	str	r3, [r7, #24]
    break;
 8001316:	e002      	b.n	800131e <LIS3MDL_MagReadXYZ+0xaa>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 8001318:	4b17      	ldr	r3, [pc, #92]	@ (8001378 <LIS3MDL_MagReadXYZ+0x104>)
 800131a:	61bb      	str	r3, [r7, #24]
    break;    
 800131c:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 800131e:	2300      	movs	r3, #0
 8001320:	77fb      	strb	r3, [r7, #31]
 8001322:	e01a      	b.n	800135a <LIS3MDL_MagReadXYZ+0xe6>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8001324:	7ffb      	ldrb	r3, [r7, #31]
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	3320      	adds	r3, #32
 800132a:	443b      	add	r3, r7
 800132c:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8001330:	ee07 3a90 	vmov	s15, r3
 8001334:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001338:	edd7 7a06 	vldr	s15, [r7, #24]
 800133c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001340:	7ffb      	ldrb	r3, [r7, #31]
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	4413      	add	r3, r2
 8001348:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800134c:	ee17 2a90 	vmov	r2, s15
 8001350:	b212      	sxth	r2, r2
 8001352:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8001354:	7ffb      	ldrb	r3, [r7, #31]
 8001356:	3301      	adds	r3, #1
 8001358:	77fb      	strb	r3, [r7, #31]
 800135a:	7ffb      	ldrb	r3, [r7, #31]
 800135c:	2b02      	cmp	r3, #2
 800135e:	d9e1      	bls.n	8001324 <LIS3MDL_MagReadXYZ+0xb0>
  }
}
 8001360:	bf00      	nop
 8001362:	bf00      	nop
 8001364:	3720      	adds	r7, #32
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	3e0f5c29 	.word	0x3e0f5c29
 8001370:	3e947ae1 	.word	0x3e947ae1
 8001374:	3edc28f6 	.word	0x3edc28f6
 8001378:	3f147ae1 	.word	0x3f147ae1

0800137c <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 8001386:	88fb      	ldrh	r3, [r7, #6]
 8001388:	4618      	mov	r0, r3
 800138a:	f000 f879 	bl	8001480 <LPS22HB_Init>
}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 8001396:	b580      	push	{r7, lr}
 8001398:	b084      	sub	sp, #16
 800139a:	af00      	add	r7, sp, #0
 800139c:	4603      	mov	r3, r0
 800139e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80013a0:	2300      	movs	r3, #0
 80013a2:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 80013a4:	f7ff fb22 	bl	80009ec <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 80013a8:	88fb      	ldrh	r3, [r7, #6]
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	210f      	movs	r1, #15
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff fb40 	bl	8000a34 <SENSOR_IO_Read>
 80013b4:	4603      	mov	r3, r0
 80013b6:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 80013b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
	...

080013c4 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 80013c4:	b590      	push	{r4, r7, lr}
 80013c6:	b087      	sub	sp, #28
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 80013d2:	2300      	movs	r3, #0
 80013d4:	74fb      	strb	r3, [r7, #19]
 80013d6:	e013      	b.n	8001400 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 80013d8:	88fb      	ldrh	r3, [r7, #6]
 80013da:	b2da      	uxtb	r2, r3
 80013dc:	7cfb      	ldrb	r3, [r7, #19]
 80013de:	3328      	adds	r3, #40	@ 0x28
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	7cfc      	ldrb	r4, [r7, #19]
 80013e4:	4619      	mov	r1, r3
 80013e6:	4610      	mov	r0, r2
 80013e8:	f7ff fb24 	bl	8000a34 <SENSOR_IO_Read>
 80013ec:	4603      	mov	r3, r0
 80013ee:	461a      	mov	r2, r3
 80013f0:	f104 0318 	add.w	r3, r4, #24
 80013f4:	443b      	add	r3, r7
 80013f6:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 80013fa:	7cfb      	ldrb	r3, [r7, #19]
 80013fc:	3301      	adds	r3, #1
 80013fe:	74fb      	strb	r3, [r7, #19]
 8001400:	7cfb      	ldrb	r3, [r7, #19]
 8001402:	2b02      	cmp	r3, #2
 8001404:	d9e8      	bls.n	80013d8 <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 8001406:	2300      	movs	r3, #0
 8001408:	74fb      	strb	r3, [r7, #19]
 800140a:	e00f      	b.n	800142c <LPS22HB_P_ReadPressure+0x68>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 800140c:	7cfb      	ldrb	r3, [r7, #19]
 800140e:	3318      	adds	r3, #24
 8001410:	443b      	add	r3, r7
 8001412:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001416:	461a      	mov	r2, r3
 8001418:	7cfb      	ldrb	r3, [r7, #19]
 800141a:	00db      	lsls	r3, r3, #3
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	697a      	ldr	r2, [r7, #20]
 8001422:	4313      	orrs	r3, r2
 8001424:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 8001426:	7cfb      	ldrb	r3, [r7, #19]
 8001428:	3301      	adds	r3, #1
 800142a:	74fb      	strb	r3, [r7, #19]
 800142c:	7cfb      	ldrb	r3, [r7, #19]
 800142e:	2b02      	cmp	r3, #2
 8001430:	d9ec      	bls.n	800140c <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d003      	beq.n	8001444 <LPS22HB_P_ReadPressure+0x80>
    tmp |= 0xFF000000;
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001442:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	2264      	movs	r2, #100	@ 0x64
 800144c:	fb02 f303 	mul.w	r3, r2, r3
 8001450:	2b00      	cmp	r3, #0
 8001452:	da01      	bge.n	8001458 <LPS22HB_P_ReadPressure+0x94>
 8001454:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8001458:	131b      	asrs	r3, r3, #12
 800145a:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	ee07 3a90 	vmov	s15, r3
 8001462:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001466:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800147c <LPS22HB_P_ReadPressure+0xb8>
 800146a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800146e:	eef0 7a66 	vmov.f32	s15, s13
}
 8001472:	eeb0 0a67 	vmov.f32	s0, s15
 8001476:	371c      	adds	r7, #28
 8001478:	46bd      	mov	sp, r7
 800147a:	bd90      	pop	{r4, r7, pc}
 800147c:	42c80000 	.word	0x42c80000

08001480 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 800148a:	88fb      	ldrh	r3, [r7, #6]
 800148c:	b2db      	uxtb	r3, r3
 800148e:	211a      	movs	r1, #26
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff facf 	bl	8000a34 <SENSOR_IO_Read>
 8001496:	4603      	mov	r3, r0
 8001498:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 800149a:	7bfb      	ldrb	r3, [r7, #15]
 800149c:	f023 0301 	bic.w	r3, r3, #1
 80014a0:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 80014a2:	7bfb      	ldrb	r3, [r7, #15]
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 80014aa:	88fb      	ldrh	r3, [r7, #6]
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	7bfa      	ldrb	r2, [r7, #15]
 80014b0:	211a      	movs	r1, #26
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff faa4 	bl	8000a00 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 80014b8:	88fb      	ldrh	r3, [r7, #6]
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	2110      	movs	r1, #16
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff fab8 	bl	8000a34 <SENSOR_IO_Read>
 80014c4:	4603      	mov	r3, r0
 80014c6:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 80014c8:	7bfb      	ldrb	r3, [r7, #15]
 80014ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80014ce:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 80014d0:	7bfb      	ldrb	r3, [r7, #15]
 80014d2:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80014d6:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
 80014da:	f023 0302 	bic.w	r3, r3, #2
 80014de:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 80014e0:	7bfb      	ldrb	r3, [r7, #15]
 80014e2:	f043 0302 	orr.w	r3, r3, #2
 80014e6:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 80014e8:	88fb      	ldrh	r3, [r7, #6]
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	7bfa      	ldrb	r2, [r7, #15]
 80014ee:	2110      	movs	r1, #16
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff fa85 	bl	8000a00 <SENSOR_IO_Write>
}  
 80014f6:	bf00      	nop
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 80014fe:	b580      	push	{r7, lr}
 8001500:	b084      	sub	sp, #16
 8001502:	af00      	add	r7, sp, #0
 8001504:	4603      	mov	r3, r0
 8001506:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001508:	2300      	movs	r3, #0
 800150a:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800150c:	2110      	movs	r1, #16
 800150e:	20d4      	movs	r0, #212	@ 0xd4
 8001510:	f7ff fa90 	bl	8000a34 <SENSOR_IO_Read>
 8001514:	4603      	mov	r3, r0
 8001516:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8001518:	88fb      	ldrh	r3, [r7, #6]
 800151a:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 800151c:	7bbb      	ldrb	r3, [r7, #14]
 800151e:	f003 0303 	and.w	r3, r3, #3
 8001522:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8001524:	7bba      	ldrb	r2, [r7, #14]
 8001526:	7bfb      	ldrb	r3, [r7, #15]
 8001528:	4313      	orrs	r3, r2
 800152a:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 800152c:	7bbb      	ldrb	r3, [r7, #14]
 800152e:	461a      	mov	r2, r3
 8001530:	2110      	movs	r1, #16
 8001532:	20d4      	movs	r0, #212	@ 0xd4
 8001534:	f7ff fa64 	bl	8000a00 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8001538:	2112      	movs	r1, #18
 800153a:	20d4      	movs	r0, #212	@ 0xd4
 800153c:	f7ff fa7a 	bl	8000a34 <SENSOR_IO_Read>
 8001540:	4603      	mov	r3, r0
 8001542:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8001544:	88fb      	ldrh	r3, [r7, #6]
 8001546:	0a1b      	lsrs	r3, r3, #8
 8001548:	b29b      	uxth	r3, r3
 800154a:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 800154c:	7bbb      	ldrb	r3, [r7, #14]
 800154e:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 8001552:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8001554:	7bba      	ldrb	r2, [r7, #14]
 8001556:	7bfb      	ldrb	r3, [r7, #15]
 8001558:	4313      	orrs	r3, r2
 800155a:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 800155c:	7bbb      	ldrb	r3, [r7, #14]
 800155e:	461a      	mov	r2, r3
 8001560:	2112      	movs	r1, #18
 8001562:	20d4      	movs	r0, #212	@ 0xd4
 8001564:	f7ff fa4c 	bl	8000a00 <SENSOR_IO_Write>
}
 8001568:	bf00      	nop
 800156a:	3710      	adds	r7, #16
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001576:	2300      	movs	r3, #0
 8001578:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800157a:	2110      	movs	r1, #16
 800157c:	20d4      	movs	r0, #212	@ 0xd4
 800157e:	f7ff fa59 	bl	8000a34 <SENSOR_IO_Read>
 8001582:	4603      	mov	r3, r0
 8001584:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8001586:	79fb      	ldrb	r3, [r7, #7]
 8001588:	f003 030f 	and.w	r3, r3, #15
 800158c:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 800158e:	79fb      	ldrb	r3, [r7, #7]
 8001590:	461a      	mov	r2, r3
 8001592:	2110      	movs	r1, #16
 8001594:	20d4      	movs	r0, #212	@ 0xd4
 8001596:	f7ff fa33 	bl	8000a00 <SENSOR_IO_Write>
}
 800159a:	bf00      	nop
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 80015a2:	b580      	push	{r7, lr}
 80015a4:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 80015a6:	f7ff fa21 	bl	80009ec <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 80015aa:	210f      	movs	r1, #15
 80015ac:	20d4      	movs	r0, #212	@ 0xd4
 80015ae:	f7ff fa41 	bl	8000a34 <SENSOR_IO_Read>
 80015b2:	4603      	mov	r3, r0
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80015c2:	2300      	movs	r3, #0
 80015c4:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 80015c6:	2115      	movs	r1, #21
 80015c8:	20d4      	movs	r0, #212	@ 0xd4
 80015ca:	f7ff fa33 	bl	8000a34 <SENSOR_IO_Read>
 80015ce:	4603      	mov	r3, r0
 80015d0:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 80015d2:	7bfb      	ldrb	r3, [r7, #15]
 80015d4:	f023 0310 	bic.w	r3, r3, #16
 80015d8:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80015da:	88fb      	ldrh	r3, [r7, #6]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d003      	beq.n	80015e8 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 80015e0:	7bfb      	ldrb	r3, [r7, #15]
 80015e2:	f043 0310 	orr.w	r3, r3, #16
 80015e6:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 80015e8:	7bfb      	ldrb	r3, [r7, #15]
 80015ea:	461a      	mov	r2, r3
 80015ec:	2115      	movs	r1, #21
 80015ee:	20d4      	movs	r0, #212	@ 0xd4
 80015f0:	f7ff fa06 	bl	8000a00 <SENSOR_IO_Write>
}
 80015f4:	bf00      	nop
 80015f6:	3710      	adds	r7, #16
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b088      	sub	sp, #32
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8001604:	2300      	movs	r3, #0
 8001606:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8001608:	2300      	movs	r3, #0
 800160a:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 800160c:	f04f 0300 	mov.w	r3, #0
 8001610:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001612:	2110      	movs	r1, #16
 8001614:	20d4      	movs	r0, #212	@ 0xd4
 8001616:	f7ff fa0d 	bl	8000a34 <SENSOR_IO_Read>
 800161a:	4603      	mov	r3, r0
 800161c:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 800161e:	f107 0208 	add.w	r2, r7, #8
 8001622:	2306      	movs	r3, #6
 8001624:	2128      	movs	r1, #40	@ 0x28
 8001626:	20d4      	movs	r0, #212	@ 0xd4
 8001628:	f7ff fa22 	bl	8000a70 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 800162c:	2300      	movs	r3, #0
 800162e:	77fb      	strb	r3, [r7, #31]
 8001630:	e01a      	b.n	8001668 <LSM6DSL_AccReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8001632:	7ffb      	ldrb	r3, [r7, #31]
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	3301      	adds	r3, #1
 8001638:	3320      	adds	r3, #32
 800163a:	443b      	add	r3, r7
 800163c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001640:	021b      	lsls	r3, r3, #8
 8001642:	b29b      	uxth	r3, r3
 8001644:	7ffa      	ldrb	r2, [r7, #31]
 8001646:	0052      	lsls	r2, r2, #1
 8001648:	3220      	adds	r2, #32
 800164a:	443a      	add	r2, r7
 800164c:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8001650:	4413      	add	r3, r2
 8001652:	b29a      	uxth	r2, r3
 8001654:	7ffb      	ldrb	r3, [r7, #31]
 8001656:	b212      	sxth	r2, r2
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	3320      	adds	r3, #32
 800165c:	443b      	add	r3, r7
 800165e:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8001662:	7ffb      	ldrb	r3, [r7, #31]
 8001664:	3301      	adds	r3, #1
 8001666:	77fb      	strb	r3, [r7, #31]
 8001668:	7ffb      	ldrb	r3, [r7, #31]
 800166a:	2b02      	cmp	r3, #2
 800166c:	d9e1      	bls.n	8001632 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 800166e:	7dfb      	ldrb	r3, [r7, #23]
 8001670:	f003 030c 	and.w	r3, r3, #12
 8001674:	2b0c      	cmp	r3, #12
 8001676:	d829      	bhi.n	80016cc <LSM6DSL_AccReadXYZ+0xd0>
 8001678:	a201      	add	r2, pc, #4	@ (adr r2, 8001680 <LSM6DSL_AccReadXYZ+0x84>)
 800167a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800167e:	bf00      	nop
 8001680:	080016b5 	.word	0x080016b5
 8001684:	080016cd 	.word	0x080016cd
 8001688:	080016cd 	.word	0x080016cd
 800168c:	080016cd 	.word	0x080016cd
 8001690:	080016c7 	.word	0x080016c7
 8001694:	080016cd 	.word	0x080016cd
 8001698:	080016cd 	.word	0x080016cd
 800169c:	080016cd 	.word	0x080016cd
 80016a0:	080016bb 	.word	0x080016bb
 80016a4:	080016cd 	.word	0x080016cd
 80016a8:	080016cd 	.word	0x080016cd
 80016ac:	080016cd 	.word	0x080016cd
 80016b0:	080016c1 	.word	0x080016c1
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 80016b4:	4b18      	ldr	r3, [pc, #96]	@ (8001718 <LSM6DSL_AccReadXYZ+0x11c>)
 80016b6:	61bb      	str	r3, [r7, #24]
    break;
 80016b8:	e008      	b.n	80016cc <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 80016ba:	4b18      	ldr	r3, [pc, #96]	@ (800171c <LSM6DSL_AccReadXYZ+0x120>)
 80016bc:	61bb      	str	r3, [r7, #24]
    break;
 80016be:	e005      	b.n	80016cc <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 80016c0:	4b17      	ldr	r3, [pc, #92]	@ (8001720 <LSM6DSL_AccReadXYZ+0x124>)
 80016c2:	61bb      	str	r3, [r7, #24]
    break;
 80016c4:	e002      	b.n	80016cc <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 80016c6:	4b17      	ldr	r3, [pc, #92]	@ (8001724 <LSM6DSL_AccReadXYZ+0x128>)
 80016c8:	61bb      	str	r3, [r7, #24]
    break;    
 80016ca:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80016cc:	2300      	movs	r3, #0
 80016ce:	77fb      	strb	r3, [r7, #31]
 80016d0:	e01a      	b.n	8001708 <LSM6DSL_AccReadXYZ+0x10c>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80016d2:	7ffb      	ldrb	r3, [r7, #31]
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	3320      	adds	r3, #32
 80016d8:	443b      	add	r3, r7
 80016da:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80016de:	ee07 3a90 	vmov	s15, r3
 80016e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016e6:	edd7 7a06 	vldr	s15, [r7, #24]
 80016ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016ee:	7ffb      	ldrb	r3, [r7, #31]
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	4413      	add	r3, r2
 80016f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016fa:	ee17 2a90 	vmov	r2, s15
 80016fe:	b212      	sxth	r2, r2
 8001700:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8001702:	7ffb      	ldrb	r3, [r7, #31]
 8001704:	3301      	adds	r3, #1
 8001706:	77fb      	strb	r3, [r7, #31]
 8001708:	7ffb      	ldrb	r3, [r7, #31]
 800170a:	2b02      	cmp	r3, #2
 800170c:	d9e1      	bls.n	80016d2 <LSM6DSL_AccReadXYZ+0xd6>
  }
}
 800170e:	bf00      	nop
 8001710:	bf00      	nop
 8001712:	3720      	adds	r7, #32
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	3d79db23 	.word	0x3d79db23
 800171c:	3df9db23 	.word	0x3df9db23
 8001720:	3e79db23 	.word	0x3e79db23
 8001724:	3ef9db23 	.word	0x3ef9db23

08001728 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800172e:	2300      	movs	r3, #0
 8001730:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001732:	2003      	movs	r0, #3
 8001734:	f000 f93c 	bl	80019b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001738:	2000      	movs	r0, #0
 800173a:	f000 f80d 	bl	8001758 <HAL_InitTick>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d002      	beq.n	800174a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	71fb      	strb	r3, [r7, #7]
 8001748:	e001      	b.n	800174e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800174a:	f7ff faa5 	bl	8000c98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800174e:	79fb      	ldrb	r3, [r7, #7]
}
 8001750:	4618      	mov	r0, r3
 8001752:	3708      	adds	r7, #8
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}

08001758 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001760:	2300      	movs	r3, #0
 8001762:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001764:	4b17      	ldr	r3, [pc, #92]	@ (80017c4 <HAL_InitTick+0x6c>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d023      	beq.n	80017b4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800176c:	4b16      	ldr	r3, [pc, #88]	@ (80017c8 <HAL_InitTick+0x70>)
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	4b14      	ldr	r3, [pc, #80]	@ (80017c4 <HAL_InitTick+0x6c>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	4619      	mov	r1, r3
 8001776:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800177a:	fbb3 f3f1 	udiv	r3, r3, r1
 800177e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001782:	4618      	mov	r0, r3
 8001784:	f000 f949 	bl	8001a1a <HAL_SYSTICK_Config>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d10f      	bne.n	80017ae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2b0f      	cmp	r3, #15
 8001792:	d809      	bhi.n	80017a8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001794:	2200      	movs	r2, #0
 8001796:	6879      	ldr	r1, [r7, #4]
 8001798:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800179c:	f000 f913 	bl	80019c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017a0:	4a0a      	ldr	r2, [pc, #40]	@ (80017cc <HAL_InitTick+0x74>)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6013      	str	r3, [r2, #0]
 80017a6:	e007      	b.n	80017b8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	73fb      	strb	r3, [r7, #15]
 80017ac:	e004      	b.n	80017b8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	73fb      	strb	r3, [r7, #15]
 80017b2:	e001      	b.n	80017b8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000088 	.word	0x20000088
 80017c8:	20000000 	.word	0x20000000
 80017cc:	20000084 	.word	0x20000084

080017d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017d4:	4b06      	ldr	r3, [pc, #24]	@ (80017f0 <HAL_IncTick+0x20>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	461a      	mov	r2, r3
 80017da:	4b06      	ldr	r3, [pc, #24]	@ (80017f4 <HAL_IncTick+0x24>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4413      	add	r3, r2
 80017e0:	4a04      	ldr	r2, [pc, #16]	@ (80017f4 <HAL_IncTick+0x24>)
 80017e2:	6013      	str	r3, [r2, #0]
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	20000088 	.word	0x20000088
 80017f4:	20000258 	.word	0x20000258

080017f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  return uwTick;
 80017fc:	4b03      	ldr	r3, [pc, #12]	@ (800180c <HAL_GetTick+0x14>)
 80017fe:	681b      	ldr	r3, [r3, #0]
}
 8001800:	4618      	mov	r0, r3
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	20000258 	.word	0x20000258

08001810 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001810:	b480      	push	{r7}
 8001812:	b085      	sub	sp, #20
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f003 0307 	and.w	r3, r3, #7
 800181e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001820:	4b0c      	ldr	r3, [pc, #48]	@ (8001854 <__NVIC_SetPriorityGrouping+0x44>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001826:	68ba      	ldr	r2, [r7, #8]
 8001828:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800182c:	4013      	ands	r3, r2
 800182e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001838:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800183c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001840:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001842:	4a04      	ldr	r2, [pc, #16]	@ (8001854 <__NVIC_SetPriorityGrouping+0x44>)
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	60d3      	str	r3, [r2, #12]
}
 8001848:	bf00      	nop
 800184a:	3714      	adds	r7, #20
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	e000ed00 	.word	0xe000ed00

08001858 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800185c:	4b04      	ldr	r3, [pc, #16]	@ (8001870 <__NVIC_GetPriorityGrouping+0x18>)
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	0a1b      	lsrs	r3, r3, #8
 8001862:	f003 0307 	and.w	r3, r3, #7
}
 8001866:	4618      	mov	r0, r3
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	e000ed00 	.word	0xe000ed00

08001874 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800187e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001882:	2b00      	cmp	r3, #0
 8001884:	db0b      	blt.n	800189e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001886:	79fb      	ldrb	r3, [r7, #7]
 8001888:	f003 021f 	and.w	r2, r3, #31
 800188c:	4907      	ldr	r1, [pc, #28]	@ (80018ac <__NVIC_EnableIRQ+0x38>)
 800188e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001892:	095b      	lsrs	r3, r3, #5
 8001894:	2001      	movs	r0, #1
 8001896:	fa00 f202 	lsl.w	r2, r0, r2
 800189a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800189e:	bf00      	nop
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	e000e100 	.word	0xe000e100

080018b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4603      	mov	r3, r0
 80018b8:	6039      	str	r1, [r7, #0]
 80018ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	db0a      	blt.n	80018da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	b2da      	uxtb	r2, r3
 80018c8:	490c      	ldr	r1, [pc, #48]	@ (80018fc <__NVIC_SetPriority+0x4c>)
 80018ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ce:	0112      	lsls	r2, r2, #4
 80018d0:	b2d2      	uxtb	r2, r2
 80018d2:	440b      	add	r3, r1
 80018d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018d8:	e00a      	b.n	80018f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	b2da      	uxtb	r2, r3
 80018de:	4908      	ldr	r1, [pc, #32]	@ (8001900 <__NVIC_SetPriority+0x50>)
 80018e0:	79fb      	ldrb	r3, [r7, #7]
 80018e2:	f003 030f 	and.w	r3, r3, #15
 80018e6:	3b04      	subs	r3, #4
 80018e8:	0112      	lsls	r2, r2, #4
 80018ea:	b2d2      	uxtb	r2, r2
 80018ec:	440b      	add	r3, r1
 80018ee:	761a      	strb	r2, [r3, #24]
}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	e000e100 	.word	0xe000e100
 8001900:	e000ed00 	.word	0xe000ed00

08001904 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001904:	b480      	push	{r7}
 8001906:	b089      	sub	sp, #36	@ 0x24
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f003 0307 	and.w	r3, r3, #7
 8001916:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	f1c3 0307 	rsb	r3, r3, #7
 800191e:	2b04      	cmp	r3, #4
 8001920:	bf28      	it	cs
 8001922:	2304      	movcs	r3, #4
 8001924:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	3304      	adds	r3, #4
 800192a:	2b06      	cmp	r3, #6
 800192c:	d902      	bls.n	8001934 <NVIC_EncodePriority+0x30>
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	3b03      	subs	r3, #3
 8001932:	e000      	b.n	8001936 <NVIC_EncodePriority+0x32>
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001938:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	43da      	mvns	r2, r3
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	401a      	ands	r2, r3
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800194c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	fa01 f303 	lsl.w	r3, r1, r3
 8001956:	43d9      	mvns	r1, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800195c:	4313      	orrs	r3, r2
         );
}
 800195e:	4618      	mov	r0, r3
 8001960:	3724      	adds	r7, #36	@ 0x24
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
	...

0800196c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	3b01      	subs	r3, #1
 8001978:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800197c:	d301      	bcc.n	8001982 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800197e:	2301      	movs	r3, #1
 8001980:	e00f      	b.n	80019a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001982:	4a0a      	ldr	r2, [pc, #40]	@ (80019ac <SysTick_Config+0x40>)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	3b01      	subs	r3, #1
 8001988:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800198a:	210f      	movs	r1, #15
 800198c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001990:	f7ff ff8e 	bl	80018b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001994:	4b05      	ldr	r3, [pc, #20]	@ (80019ac <SysTick_Config+0x40>)
 8001996:	2200      	movs	r2, #0
 8001998:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800199a:	4b04      	ldr	r3, [pc, #16]	@ (80019ac <SysTick_Config+0x40>)
 800199c:	2207      	movs	r2, #7
 800199e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	e000e010 	.word	0xe000e010

080019b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f7ff ff29 	bl	8001810 <__NVIC_SetPriorityGrouping>
}
 80019be:	bf00      	nop
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b086      	sub	sp, #24
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	4603      	mov	r3, r0
 80019ce:	60b9      	str	r1, [r7, #8]
 80019d0:	607a      	str	r2, [r7, #4]
 80019d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80019d4:	2300      	movs	r3, #0
 80019d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019d8:	f7ff ff3e 	bl	8001858 <__NVIC_GetPriorityGrouping>
 80019dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	68b9      	ldr	r1, [r7, #8]
 80019e2:	6978      	ldr	r0, [r7, #20]
 80019e4:	f7ff ff8e 	bl	8001904 <NVIC_EncodePriority>
 80019e8:	4602      	mov	r2, r0
 80019ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ee:	4611      	mov	r1, r2
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff ff5d 	bl	80018b0 <__NVIC_SetPriority>
}
 80019f6:	bf00      	nop
 80019f8:	3718      	adds	r7, #24
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b082      	sub	sp, #8
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	4603      	mov	r3, r0
 8001a06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff ff31 	bl	8001874 <__NVIC_EnableIRQ>
}
 8001a12:	bf00      	nop
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b082      	sub	sp, #8
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f7ff ffa2 	bl	800196c <SysTick_Config>
 8001a28:	4603      	mov	r3, r0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
	...

08001a34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b087      	sub	sp, #28
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a42:	e166      	b.n	8001d12 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	2101      	movs	r1, #1
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a50:	4013      	ands	r3, r2
 8001a52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	f000 8158 	beq.w	8001d0c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f003 0303 	and.w	r3, r3, #3
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d005      	beq.n	8001a74 <HAL_GPIO_Init+0x40>
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f003 0303 	and.w	r3, r3, #3
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d130      	bne.n	8001ad6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	2203      	movs	r2, #3
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	43db      	mvns	r3, r3
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	68da      	ldr	r2, [r3, #12]
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001aaa:	2201      	movs	r2, #1
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	091b      	lsrs	r3, r3, #4
 8001ac0:	f003 0201 	and.w	r2, r3, #1
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f003 0303 	and.w	r3, r3, #3
 8001ade:	2b03      	cmp	r3, #3
 8001ae0:	d017      	beq.n	8001b12 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	2203      	movs	r2, #3
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	43db      	mvns	r3, r3
 8001af4:	693a      	ldr	r2, [r7, #16]
 8001af6:	4013      	ands	r3, r2
 8001af8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	689a      	ldr	r2, [r3, #8]
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f003 0303 	and.w	r3, r3, #3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d123      	bne.n	8001b66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	08da      	lsrs	r2, r3, #3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	3208      	adds	r2, #8
 8001b26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	f003 0307 	and.w	r3, r3, #7
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	220f      	movs	r2, #15
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	693a      	ldr	r2, [r7, #16]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	691a      	ldr	r2, [r3, #16]
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	f003 0307 	and.w	r3, r3, #7
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	08da      	lsrs	r2, r3, #3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	3208      	adds	r2, #8
 8001b60:	6939      	ldr	r1, [r7, #16]
 8001b62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	2203      	movs	r2, #3
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	43db      	mvns	r3, r3
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f003 0203 	and.w	r2, r3, #3
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f000 80b2 	beq.w	8001d0c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ba8:	4b61      	ldr	r3, [pc, #388]	@ (8001d30 <HAL_GPIO_Init+0x2fc>)
 8001baa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bac:	4a60      	ldr	r2, [pc, #384]	@ (8001d30 <HAL_GPIO_Init+0x2fc>)
 8001bae:	f043 0301 	orr.w	r3, r3, #1
 8001bb2:	6613      	str	r3, [r2, #96]	@ 0x60
 8001bb4:	4b5e      	ldr	r3, [pc, #376]	@ (8001d30 <HAL_GPIO_Init+0x2fc>)
 8001bb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bb8:	f003 0301 	and.w	r3, r3, #1
 8001bbc:	60bb      	str	r3, [r7, #8]
 8001bbe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001bc0:	4a5c      	ldr	r2, [pc, #368]	@ (8001d34 <HAL_GPIO_Init+0x300>)
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	089b      	lsrs	r3, r3, #2
 8001bc6:	3302      	adds	r3, #2
 8001bc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	f003 0303 	and.w	r3, r3, #3
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	220f      	movs	r2, #15
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	4013      	ands	r3, r2
 8001be2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001bea:	d02b      	beq.n	8001c44 <HAL_GPIO_Init+0x210>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4a52      	ldr	r2, [pc, #328]	@ (8001d38 <HAL_GPIO_Init+0x304>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d025      	beq.n	8001c40 <HAL_GPIO_Init+0x20c>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4a51      	ldr	r2, [pc, #324]	@ (8001d3c <HAL_GPIO_Init+0x308>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d01f      	beq.n	8001c3c <HAL_GPIO_Init+0x208>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	4a50      	ldr	r2, [pc, #320]	@ (8001d40 <HAL_GPIO_Init+0x30c>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d019      	beq.n	8001c38 <HAL_GPIO_Init+0x204>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4a4f      	ldr	r2, [pc, #316]	@ (8001d44 <HAL_GPIO_Init+0x310>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d013      	beq.n	8001c34 <HAL_GPIO_Init+0x200>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4a4e      	ldr	r2, [pc, #312]	@ (8001d48 <HAL_GPIO_Init+0x314>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d00d      	beq.n	8001c30 <HAL_GPIO_Init+0x1fc>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4a4d      	ldr	r2, [pc, #308]	@ (8001d4c <HAL_GPIO_Init+0x318>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d007      	beq.n	8001c2c <HAL_GPIO_Init+0x1f8>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	4a4c      	ldr	r2, [pc, #304]	@ (8001d50 <HAL_GPIO_Init+0x31c>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d101      	bne.n	8001c28 <HAL_GPIO_Init+0x1f4>
 8001c24:	2307      	movs	r3, #7
 8001c26:	e00e      	b.n	8001c46 <HAL_GPIO_Init+0x212>
 8001c28:	2308      	movs	r3, #8
 8001c2a:	e00c      	b.n	8001c46 <HAL_GPIO_Init+0x212>
 8001c2c:	2306      	movs	r3, #6
 8001c2e:	e00a      	b.n	8001c46 <HAL_GPIO_Init+0x212>
 8001c30:	2305      	movs	r3, #5
 8001c32:	e008      	b.n	8001c46 <HAL_GPIO_Init+0x212>
 8001c34:	2304      	movs	r3, #4
 8001c36:	e006      	b.n	8001c46 <HAL_GPIO_Init+0x212>
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e004      	b.n	8001c46 <HAL_GPIO_Init+0x212>
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	e002      	b.n	8001c46 <HAL_GPIO_Init+0x212>
 8001c40:	2301      	movs	r3, #1
 8001c42:	e000      	b.n	8001c46 <HAL_GPIO_Init+0x212>
 8001c44:	2300      	movs	r3, #0
 8001c46:	697a      	ldr	r2, [r7, #20]
 8001c48:	f002 0203 	and.w	r2, r2, #3
 8001c4c:	0092      	lsls	r2, r2, #2
 8001c4e:	4093      	lsls	r3, r2
 8001c50:	693a      	ldr	r2, [r7, #16]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c56:	4937      	ldr	r1, [pc, #220]	@ (8001d34 <HAL_GPIO_Init+0x300>)
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	089b      	lsrs	r3, r3, #2
 8001c5c:	3302      	adds	r3, #2
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c64:	4b3b      	ldr	r3, [pc, #236]	@ (8001d54 <HAL_GPIO_Init+0x320>)
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	4013      	ands	r3, r2
 8001c72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d003      	beq.n	8001c88 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001c80:	693a      	ldr	r2, [r7, #16]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c88:	4a32      	ldr	r2, [pc, #200]	@ (8001d54 <HAL_GPIO_Init+0x320>)
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c8e:	4b31      	ldr	r3, [pc, #196]	@ (8001d54 <HAL_GPIO_Init+0x320>)
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	43db      	mvns	r3, r3
 8001c98:	693a      	ldr	r2, [r7, #16]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d003      	beq.n	8001cb2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001cb2:	4a28      	ldr	r2, [pc, #160]	@ (8001d54 <HAL_GPIO_Init+0x320>)
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001cb8:	4b26      	ldr	r3, [pc, #152]	@ (8001d54 <HAL_GPIO_Init+0x320>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d003      	beq.n	8001cdc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001cdc:	4a1d      	ldr	r2, [pc, #116]	@ (8001d54 <HAL_GPIO_Init+0x320>)
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001ce2:	4b1c      	ldr	r3, [pc, #112]	@ (8001d54 <HAL_GPIO_Init+0x320>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	43db      	mvns	r3, r3
 8001cec:	693a      	ldr	r2, [r7, #16]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d003      	beq.n	8001d06 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d06:	4a13      	ldr	r2, [pc, #76]	@ (8001d54 <HAL_GPIO_Init+0x320>)
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	fa22 f303 	lsr.w	r3, r2, r3
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	f47f ae91 	bne.w	8001a44 <HAL_GPIO_Init+0x10>
  }
}
 8001d22:	bf00      	nop
 8001d24:	bf00      	nop
 8001d26:	371c      	adds	r7, #28
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr
 8001d30:	40021000 	.word	0x40021000
 8001d34:	40010000 	.word	0x40010000
 8001d38:	48000400 	.word	0x48000400
 8001d3c:	48000800 	.word	0x48000800
 8001d40:	48000c00 	.word	0x48000c00
 8001d44:	48001000 	.word	0x48001000
 8001d48:	48001400 	.word	0x48001400
 8001d4c:	48001800 	.word	0x48001800
 8001d50:	48001c00 	.word	0x48001c00
 8001d54:	40010400 	.word	0x40010400

08001d58 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b087      	sub	sp, #28
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d62:	2300      	movs	r3, #0
 8001d64:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001d66:	e0c9      	b.n	8001efc <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001d68:	2201      	movs	r2, #1
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	683a      	ldr	r2, [r7, #0]
 8001d72:	4013      	ands	r3, r2
 8001d74:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	f000 80bc 	beq.w	8001ef6 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001d7e:	4a66      	ldr	r2, [pc, #408]	@ (8001f18 <HAL_GPIO_DeInit+0x1c0>)
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	089b      	lsrs	r3, r3, #2
 8001d84:	3302      	adds	r3, #2
 8001d86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d8a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	f003 0303 	and.w	r3, r3, #3
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	220f      	movs	r2, #15
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	68fa      	ldr	r2, [r7, #12]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001da6:	d02b      	beq.n	8001e00 <HAL_GPIO_DeInit+0xa8>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4a5c      	ldr	r2, [pc, #368]	@ (8001f1c <HAL_GPIO_DeInit+0x1c4>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d025      	beq.n	8001dfc <HAL_GPIO_DeInit+0xa4>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	4a5b      	ldr	r2, [pc, #364]	@ (8001f20 <HAL_GPIO_DeInit+0x1c8>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d01f      	beq.n	8001df8 <HAL_GPIO_DeInit+0xa0>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4a5a      	ldr	r2, [pc, #360]	@ (8001f24 <HAL_GPIO_DeInit+0x1cc>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d019      	beq.n	8001df4 <HAL_GPIO_DeInit+0x9c>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4a59      	ldr	r2, [pc, #356]	@ (8001f28 <HAL_GPIO_DeInit+0x1d0>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d013      	beq.n	8001df0 <HAL_GPIO_DeInit+0x98>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4a58      	ldr	r2, [pc, #352]	@ (8001f2c <HAL_GPIO_DeInit+0x1d4>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d00d      	beq.n	8001dec <HAL_GPIO_DeInit+0x94>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4a57      	ldr	r2, [pc, #348]	@ (8001f30 <HAL_GPIO_DeInit+0x1d8>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d007      	beq.n	8001de8 <HAL_GPIO_DeInit+0x90>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	4a56      	ldr	r2, [pc, #344]	@ (8001f34 <HAL_GPIO_DeInit+0x1dc>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d101      	bne.n	8001de4 <HAL_GPIO_DeInit+0x8c>
 8001de0:	2307      	movs	r3, #7
 8001de2:	e00e      	b.n	8001e02 <HAL_GPIO_DeInit+0xaa>
 8001de4:	2308      	movs	r3, #8
 8001de6:	e00c      	b.n	8001e02 <HAL_GPIO_DeInit+0xaa>
 8001de8:	2306      	movs	r3, #6
 8001dea:	e00a      	b.n	8001e02 <HAL_GPIO_DeInit+0xaa>
 8001dec:	2305      	movs	r3, #5
 8001dee:	e008      	b.n	8001e02 <HAL_GPIO_DeInit+0xaa>
 8001df0:	2304      	movs	r3, #4
 8001df2:	e006      	b.n	8001e02 <HAL_GPIO_DeInit+0xaa>
 8001df4:	2303      	movs	r3, #3
 8001df6:	e004      	b.n	8001e02 <HAL_GPIO_DeInit+0xaa>
 8001df8:	2302      	movs	r3, #2
 8001dfa:	e002      	b.n	8001e02 <HAL_GPIO_DeInit+0xaa>
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e000      	b.n	8001e02 <HAL_GPIO_DeInit+0xaa>
 8001e00:	2300      	movs	r3, #0
 8001e02:	697a      	ldr	r2, [r7, #20]
 8001e04:	f002 0203 	and.w	r2, r2, #3
 8001e08:	0092      	lsls	r2, r2, #2
 8001e0a:	4093      	lsls	r3, r2
 8001e0c:	68fa      	ldr	r2, [r7, #12]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d132      	bne.n	8001e78 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001e12:	4b49      	ldr	r3, [pc, #292]	@ (8001f38 <HAL_GPIO_DeInit+0x1e0>)
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	4947      	ldr	r1, [pc, #284]	@ (8001f38 <HAL_GPIO_DeInit+0x1e0>)
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8001e20:	4b45      	ldr	r3, [pc, #276]	@ (8001f38 <HAL_GPIO_DeInit+0x1e0>)
 8001e22:	685a      	ldr	r2, [r3, #4]
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	43db      	mvns	r3, r3
 8001e28:	4943      	ldr	r1, [pc, #268]	@ (8001f38 <HAL_GPIO_DeInit+0x1e0>)
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8001e2e:	4b42      	ldr	r3, [pc, #264]	@ (8001f38 <HAL_GPIO_DeInit+0x1e0>)
 8001e30:	68da      	ldr	r2, [r3, #12]
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	43db      	mvns	r3, r3
 8001e36:	4940      	ldr	r1, [pc, #256]	@ (8001f38 <HAL_GPIO_DeInit+0x1e0>)
 8001e38:	4013      	ands	r3, r2
 8001e3a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8001e3c:	4b3e      	ldr	r3, [pc, #248]	@ (8001f38 <HAL_GPIO_DeInit+0x1e0>)
 8001e3e:	689a      	ldr	r2, [r3, #8]
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	43db      	mvns	r3, r3
 8001e44:	493c      	ldr	r1, [pc, #240]	@ (8001f38 <HAL_GPIO_DeInit+0x1e0>)
 8001e46:	4013      	ands	r3, r2
 8001e48:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	f003 0303 	and.w	r3, r3, #3
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	220f      	movs	r2, #15
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001e5a:	4a2f      	ldr	r2, [pc, #188]	@ (8001f18 <HAL_GPIO_DeInit+0x1c0>)
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	089b      	lsrs	r3, r3, #2
 8001e60:	3302      	adds	r3, #2
 8001e62:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	43da      	mvns	r2, r3
 8001e6a:	482b      	ldr	r0, [pc, #172]	@ (8001f18 <HAL_GPIO_DeInit+0x1c0>)
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	089b      	lsrs	r3, r3, #2
 8001e70:	400a      	ands	r2, r1
 8001e72:	3302      	adds	r3, #2
 8001e74:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	2103      	movs	r1, #3
 8001e82:	fa01 f303 	lsl.w	r3, r1, r3
 8001e86:	431a      	orrs	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	08da      	lsrs	r2, r3, #3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	3208      	adds	r2, #8
 8001e94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	f003 0307 	and.w	r3, r3, #7
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	220f      	movs	r2, #15
 8001ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea6:	43db      	mvns	r3, r3
 8001ea8:	697a      	ldr	r2, [r7, #20]
 8001eaa:	08d2      	lsrs	r2, r2, #3
 8001eac:	4019      	ands	r1, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	3208      	adds	r2, #8
 8001eb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	689a      	ldr	r2, [r3, #8]
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	2103      	movs	r1, #3
 8001ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	401a      	ands	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685a      	ldr	r2, [r3, #4]
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	401a      	ands	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	68da      	ldr	r2, [r3, #12]
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	2103      	movs	r1, #3
 8001eea:	fa01 f303 	lsl.w	r3, r1, r3
 8001eee:	43db      	mvns	r3, r3
 8001ef0:	401a      	ands	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8001efc:	683a      	ldr	r2, [r7, #0]
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	fa22 f303 	lsr.w	r3, r2, r3
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	f47f af2f 	bne.w	8001d68 <HAL_GPIO_DeInit+0x10>
  }
}
 8001f0a:	bf00      	nop
 8001f0c:	bf00      	nop
 8001f0e:	371c      	adds	r7, #28
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr
 8001f18:	40010000 	.word	0x40010000
 8001f1c:	48000400 	.word	0x48000400
 8001f20:	48000800 	.word	0x48000800
 8001f24:	48000c00 	.word	0x48000c00
 8001f28:	48001000 	.word	0x48001000
 8001f2c:	48001400 	.word	0x48001400
 8001f30:	48001800 	.word	0x48001800
 8001f34:	48001c00 	.word	0x48001c00
 8001f38:	40010400 	.word	0x40010400

08001f3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d101      	bne.n	8001f4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e08d      	b.n	800206a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d106      	bne.n	8001f68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f7fe febc 	bl	8000ce0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2224      	movs	r2, #36	@ 0x24
 8001f6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f022 0201 	bic.w	r2, r2, #1
 8001f7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685a      	ldr	r2, [r3, #4]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001f8c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	689a      	ldr	r2, [r3, #8]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f9c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d107      	bne.n	8001fb6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	689a      	ldr	r2, [r3, #8]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001fb2:	609a      	str	r2, [r3, #8]
 8001fb4:	e006      	b.n	8001fc4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	689a      	ldr	r2, [r3, #8]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001fc2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d108      	bne.n	8001fde <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	685a      	ldr	r2, [r3, #4]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001fda:	605a      	str	r2, [r3, #4]
 8001fdc:	e007      	b.n	8001fee <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	685a      	ldr	r2, [r3, #4]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001fec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	6812      	ldr	r2, [r2, #0]
 8001ff8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001ffc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002000:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	68da      	ldr	r2, [r3, #12]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002010:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	691a      	ldr	r2, [r3, #16]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	695b      	ldr	r3, [r3, #20]
 800201a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	430a      	orrs	r2, r1
 800202a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	69d9      	ldr	r1, [r3, #28]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a1a      	ldr	r2, [r3, #32]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	430a      	orrs	r2, r1
 800203a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f042 0201 	orr.w	r2, r2, #1
 800204a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2220      	movs	r2, #32
 8002056:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b082      	sub	sp, #8
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d101      	bne.n	8002084 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e021      	b.n	80020c8 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2224      	movs	r2, #36	@ 0x24
 8002088:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f022 0201 	bic.w	r2, r2, #1
 800209a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f7fe fe7d 	bl	8000d9c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80020c6:	2300      	movs	r3, #0
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b088      	sub	sp, #32
 80020d4:	af02      	add	r7, sp, #8
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	4608      	mov	r0, r1
 80020da:	4611      	mov	r1, r2
 80020dc:	461a      	mov	r2, r3
 80020de:	4603      	mov	r3, r0
 80020e0:	817b      	strh	r3, [r7, #10]
 80020e2:	460b      	mov	r3, r1
 80020e4:	813b      	strh	r3, [r7, #8]
 80020e6:	4613      	mov	r3, r2
 80020e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	2b20      	cmp	r3, #32
 80020f4:	f040 80f9 	bne.w	80022ea <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80020f8:	6a3b      	ldr	r3, [r7, #32]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d002      	beq.n	8002104 <HAL_I2C_Mem_Write+0x34>
 80020fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002100:	2b00      	cmp	r3, #0
 8002102:	d105      	bne.n	8002110 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800210a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e0ed      	b.n	80022ec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002116:	2b01      	cmp	r3, #1
 8002118:	d101      	bne.n	800211e <HAL_I2C_Mem_Write+0x4e>
 800211a:	2302      	movs	r3, #2
 800211c:	e0e6      	b.n	80022ec <HAL_I2C_Mem_Write+0x21c>
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2201      	movs	r2, #1
 8002122:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002126:	f7ff fb67 	bl	80017f8 <HAL_GetTick>
 800212a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	9300      	str	r3, [sp, #0]
 8002130:	2319      	movs	r3, #25
 8002132:	2201      	movs	r2, #1
 8002134:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002138:	68f8      	ldr	r0, [r7, #12]
 800213a:	f000 fac3 	bl	80026c4 <I2C_WaitOnFlagUntilTimeout>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e0d1      	b.n	80022ec <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2221      	movs	r2, #33	@ 0x21
 800214c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2240      	movs	r2, #64	@ 0x40
 8002154:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2200      	movs	r2, #0
 800215c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6a3a      	ldr	r2, [r7, #32]
 8002162:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002168:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2200      	movs	r2, #0
 800216e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002170:	88f8      	ldrh	r0, [r7, #6]
 8002172:	893a      	ldrh	r2, [r7, #8]
 8002174:	8979      	ldrh	r1, [r7, #10]
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	9301      	str	r3, [sp, #4]
 800217a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800217c:	9300      	str	r3, [sp, #0]
 800217e:	4603      	mov	r3, r0
 8002180:	68f8      	ldr	r0, [r7, #12]
 8002182:	f000 f9d3 	bl	800252c <I2C_RequestMemoryWrite>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d005      	beq.n	8002198 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2200      	movs	r2, #0
 8002190:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e0a9      	b.n	80022ec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800219c:	b29b      	uxth	r3, r3
 800219e:	2bff      	cmp	r3, #255	@ 0xff
 80021a0:	d90e      	bls.n	80021c0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	22ff      	movs	r2, #255	@ 0xff
 80021a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021ac:	b2da      	uxtb	r2, r3
 80021ae:	8979      	ldrh	r1, [r7, #10]
 80021b0:	2300      	movs	r3, #0
 80021b2:	9300      	str	r3, [sp, #0]
 80021b4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80021b8:	68f8      	ldr	r0, [r7, #12]
 80021ba:	f000 fc47 	bl	8002a4c <I2C_TransferConfig>
 80021be:	e00f      	b.n	80021e0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021c4:	b29a      	uxth	r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021ce:	b2da      	uxtb	r2, r3
 80021d0:	8979      	ldrh	r1, [r7, #10]
 80021d2:	2300      	movs	r3, #0
 80021d4:	9300      	str	r3, [sp, #0]
 80021d6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80021da:	68f8      	ldr	r0, [r7, #12]
 80021dc:	f000 fc36 	bl	8002a4c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021e0:	697a      	ldr	r2, [r7, #20]
 80021e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80021e4:	68f8      	ldr	r0, [r7, #12]
 80021e6:	f000 fac6 	bl	8002776 <I2C_WaitOnTXISFlagUntilTimeout>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d001      	beq.n	80021f4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e07b      	b.n	80022ec <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f8:	781a      	ldrb	r2, [r3, #0]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002204:	1c5a      	adds	r2, r3, #1
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800220e:	b29b      	uxth	r3, r3
 8002210:	3b01      	subs	r3, #1
 8002212:	b29a      	uxth	r2, r3
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800221c:	3b01      	subs	r3, #1
 800221e:	b29a      	uxth	r2, r3
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002228:	b29b      	uxth	r3, r3
 800222a:	2b00      	cmp	r3, #0
 800222c:	d034      	beq.n	8002298 <HAL_I2C_Mem_Write+0x1c8>
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002232:	2b00      	cmp	r3, #0
 8002234:	d130      	bne.n	8002298 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	9300      	str	r3, [sp, #0]
 800223a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800223c:	2200      	movs	r2, #0
 800223e:	2180      	movs	r1, #128	@ 0x80
 8002240:	68f8      	ldr	r0, [r7, #12]
 8002242:	f000 fa3f 	bl	80026c4 <I2C_WaitOnFlagUntilTimeout>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e04d      	b.n	80022ec <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002254:	b29b      	uxth	r3, r3
 8002256:	2bff      	cmp	r3, #255	@ 0xff
 8002258:	d90e      	bls.n	8002278 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	22ff      	movs	r2, #255	@ 0xff
 800225e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002264:	b2da      	uxtb	r2, r3
 8002266:	8979      	ldrh	r1, [r7, #10]
 8002268:	2300      	movs	r3, #0
 800226a:	9300      	str	r3, [sp, #0]
 800226c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002270:	68f8      	ldr	r0, [r7, #12]
 8002272:	f000 fbeb 	bl	8002a4c <I2C_TransferConfig>
 8002276:	e00f      	b.n	8002298 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800227c:	b29a      	uxth	r2, r3
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002286:	b2da      	uxtb	r2, r3
 8002288:	8979      	ldrh	r1, [r7, #10]
 800228a:	2300      	movs	r3, #0
 800228c:	9300      	str	r3, [sp, #0]
 800228e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002292:	68f8      	ldr	r0, [r7, #12]
 8002294:	f000 fbda 	bl	8002a4c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800229c:	b29b      	uxth	r3, r3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d19e      	bne.n	80021e0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022a2:	697a      	ldr	r2, [r7, #20]
 80022a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80022a6:	68f8      	ldr	r0, [r7, #12]
 80022a8:	f000 faac 	bl	8002804 <I2C_WaitOnSTOPFlagUntilTimeout>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e01a      	b.n	80022ec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2220      	movs	r2, #32
 80022bc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	6859      	ldr	r1, [r3, #4]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	4b0a      	ldr	r3, [pc, #40]	@ (80022f4 <HAL_I2C_Mem_Write+0x224>)
 80022ca:	400b      	ands	r3, r1
 80022cc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2220      	movs	r2, #32
 80022d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80022e6:	2300      	movs	r3, #0
 80022e8:	e000      	b.n	80022ec <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80022ea:	2302      	movs	r3, #2
  }
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3718      	adds	r7, #24
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	fe00e800 	.word	0xfe00e800

080022f8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b088      	sub	sp, #32
 80022fc:	af02      	add	r7, sp, #8
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	4608      	mov	r0, r1
 8002302:	4611      	mov	r1, r2
 8002304:	461a      	mov	r2, r3
 8002306:	4603      	mov	r3, r0
 8002308:	817b      	strh	r3, [r7, #10]
 800230a:	460b      	mov	r3, r1
 800230c:	813b      	strh	r3, [r7, #8]
 800230e:	4613      	mov	r3, r2
 8002310:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b20      	cmp	r3, #32
 800231c:	f040 80fd 	bne.w	800251a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002320:	6a3b      	ldr	r3, [r7, #32]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d002      	beq.n	800232c <HAL_I2C_Mem_Read+0x34>
 8002326:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002328:	2b00      	cmp	r3, #0
 800232a:	d105      	bne.n	8002338 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002332:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e0f1      	b.n	800251c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800233e:	2b01      	cmp	r3, #1
 8002340:	d101      	bne.n	8002346 <HAL_I2C_Mem_Read+0x4e>
 8002342:	2302      	movs	r3, #2
 8002344:	e0ea      	b.n	800251c <HAL_I2C_Mem_Read+0x224>
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2201      	movs	r2, #1
 800234a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800234e:	f7ff fa53 	bl	80017f8 <HAL_GetTick>
 8002352:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	9300      	str	r3, [sp, #0]
 8002358:	2319      	movs	r3, #25
 800235a:	2201      	movs	r2, #1
 800235c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002360:	68f8      	ldr	r0, [r7, #12]
 8002362:	f000 f9af 	bl	80026c4 <I2C_WaitOnFlagUntilTimeout>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e0d5      	b.n	800251c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2222      	movs	r2, #34	@ 0x22
 8002374:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2240      	movs	r2, #64	@ 0x40
 800237c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2200      	movs	r2, #0
 8002384:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6a3a      	ldr	r2, [r7, #32]
 800238a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002390:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2200      	movs	r2, #0
 8002396:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002398:	88f8      	ldrh	r0, [r7, #6]
 800239a:	893a      	ldrh	r2, [r7, #8]
 800239c:	8979      	ldrh	r1, [r7, #10]
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	9301      	str	r3, [sp, #4]
 80023a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023a4:	9300      	str	r3, [sp, #0]
 80023a6:	4603      	mov	r3, r0
 80023a8:	68f8      	ldr	r0, [r7, #12]
 80023aa:	f000 f913 	bl	80025d4 <I2C_RequestMemoryRead>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d005      	beq.n	80023c0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e0ad      	b.n	800251c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	2bff      	cmp	r3, #255	@ 0xff
 80023c8:	d90e      	bls.n	80023e8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2201      	movs	r2, #1
 80023ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023d4:	b2da      	uxtb	r2, r3
 80023d6:	8979      	ldrh	r1, [r7, #10]
 80023d8:	4b52      	ldr	r3, [pc, #328]	@ (8002524 <HAL_I2C_Mem_Read+0x22c>)
 80023da:	9300      	str	r3, [sp, #0]
 80023dc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80023e0:	68f8      	ldr	r0, [r7, #12]
 80023e2:	f000 fb33 	bl	8002a4c <I2C_TransferConfig>
 80023e6:	e00f      	b.n	8002408 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023ec:	b29a      	uxth	r2, r3
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023f6:	b2da      	uxtb	r2, r3
 80023f8:	8979      	ldrh	r1, [r7, #10]
 80023fa:	4b4a      	ldr	r3, [pc, #296]	@ (8002524 <HAL_I2C_Mem_Read+0x22c>)
 80023fc:	9300      	str	r3, [sp, #0]
 80023fe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002402:	68f8      	ldr	r0, [r7, #12]
 8002404:	f000 fb22 	bl	8002a4c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	9300      	str	r3, [sp, #0]
 800240c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800240e:	2200      	movs	r2, #0
 8002410:	2104      	movs	r1, #4
 8002412:	68f8      	ldr	r0, [r7, #12]
 8002414:	f000 f956 	bl	80026c4 <I2C_WaitOnFlagUntilTimeout>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e07c      	b.n	800251c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800242c:	b2d2      	uxtb	r2, r2
 800242e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002434:	1c5a      	adds	r2, r3, #1
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800243e:	3b01      	subs	r3, #1
 8002440:	b29a      	uxth	r2, r3
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800244a:	b29b      	uxth	r3, r3
 800244c:	3b01      	subs	r3, #1
 800244e:	b29a      	uxth	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002458:	b29b      	uxth	r3, r3
 800245a:	2b00      	cmp	r3, #0
 800245c:	d034      	beq.n	80024c8 <HAL_I2C_Mem_Read+0x1d0>
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002462:	2b00      	cmp	r3, #0
 8002464:	d130      	bne.n	80024c8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	9300      	str	r3, [sp, #0]
 800246a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800246c:	2200      	movs	r2, #0
 800246e:	2180      	movs	r1, #128	@ 0x80
 8002470:	68f8      	ldr	r0, [r7, #12]
 8002472:	f000 f927 	bl	80026c4 <I2C_WaitOnFlagUntilTimeout>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e04d      	b.n	800251c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002484:	b29b      	uxth	r3, r3
 8002486:	2bff      	cmp	r3, #255	@ 0xff
 8002488:	d90e      	bls.n	80024a8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2201      	movs	r2, #1
 800248e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002494:	b2da      	uxtb	r2, r3
 8002496:	8979      	ldrh	r1, [r7, #10]
 8002498:	2300      	movs	r3, #0
 800249a:	9300      	str	r3, [sp, #0]
 800249c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80024a0:	68f8      	ldr	r0, [r7, #12]
 80024a2:	f000 fad3 	bl	8002a4c <I2C_TransferConfig>
 80024a6:	e00f      	b.n	80024c8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024ac:	b29a      	uxth	r2, r3
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024b6:	b2da      	uxtb	r2, r3
 80024b8:	8979      	ldrh	r1, [r7, #10]
 80024ba:	2300      	movs	r3, #0
 80024bc:	9300      	str	r3, [sp, #0]
 80024be:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80024c2:	68f8      	ldr	r0, [r7, #12]
 80024c4:	f000 fac2 	bl	8002a4c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d19a      	bne.n	8002408 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024d2:	697a      	ldr	r2, [r7, #20]
 80024d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80024d6:	68f8      	ldr	r0, [r7, #12]
 80024d8:	f000 f994 	bl	8002804 <I2C_WaitOnSTOPFlagUntilTimeout>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e01a      	b.n	800251c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2220      	movs	r2, #32
 80024ec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	6859      	ldr	r1, [r3, #4]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002528 <HAL_I2C_Mem_Read+0x230>)
 80024fa:	400b      	ands	r3, r1
 80024fc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2220      	movs	r2, #32
 8002502:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002516:	2300      	movs	r3, #0
 8002518:	e000      	b.n	800251c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800251a:	2302      	movs	r3, #2
  }
}
 800251c:	4618      	mov	r0, r3
 800251e:	3718      	adds	r7, #24
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	80002400 	.word	0x80002400
 8002528:	fe00e800 	.word	0xfe00e800

0800252c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b086      	sub	sp, #24
 8002530:	af02      	add	r7, sp, #8
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	4608      	mov	r0, r1
 8002536:	4611      	mov	r1, r2
 8002538:	461a      	mov	r2, r3
 800253a:	4603      	mov	r3, r0
 800253c:	817b      	strh	r3, [r7, #10]
 800253e:	460b      	mov	r3, r1
 8002540:	813b      	strh	r3, [r7, #8]
 8002542:	4613      	mov	r3, r2
 8002544:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002546:	88fb      	ldrh	r3, [r7, #6]
 8002548:	b2da      	uxtb	r2, r3
 800254a:	8979      	ldrh	r1, [r7, #10]
 800254c:	4b20      	ldr	r3, [pc, #128]	@ (80025d0 <I2C_RequestMemoryWrite+0xa4>)
 800254e:	9300      	str	r3, [sp, #0]
 8002550:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002554:	68f8      	ldr	r0, [r7, #12]
 8002556:	f000 fa79 	bl	8002a4c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800255a:	69fa      	ldr	r2, [r7, #28]
 800255c:	69b9      	ldr	r1, [r7, #24]
 800255e:	68f8      	ldr	r0, [r7, #12]
 8002560:	f000 f909 	bl	8002776 <I2C_WaitOnTXISFlagUntilTimeout>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e02c      	b.n	80025c8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800256e:	88fb      	ldrh	r3, [r7, #6]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d105      	bne.n	8002580 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002574:	893b      	ldrh	r3, [r7, #8]
 8002576:	b2da      	uxtb	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	629a      	str	r2, [r3, #40]	@ 0x28
 800257e:	e015      	b.n	80025ac <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002580:	893b      	ldrh	r3, [r7, #8]
 8002582:	0a1b      	lsrs	r3, r3, #8
 8002584:	b29b      	uxth	r3, r3
 8002586:	b2da      	uxtb	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800258e:	69fa      	ldr	r2, [r7, #28]
 8002590:	69b9      	ldr	r1, [r7, #24]
 8002592:	68f8      	ldr	r0, [r7, #12]
 8002594:	f000 f8ef 	bl	8002776 <I2C_WaitOnTXISFlagUntilTimeout>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e012      	b.n	80025c8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80025a2:	893b      	ldrh	r3, [r7, #8]
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	9300      	str	r3, [sp, #0]
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	2200      	movs	r2, #0
 80025b4:	2180      	movs	r1, #128	@ 0x80
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f000 f884 	bl	80026c4 <I2C_WaitOnFlagUntilTimeout>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e000      	b.n	80025c8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3710      	adds	r7, #16
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	80002000 	.word	0x80002000

080025d4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af02      	add	r7, sp, #8
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	4608      	mov	r0, r1
 80025de:	4611      	mov	r1, r2
 80025e0:	461a      	mov	r2, r3
 80025e2:	4603      	mov	r3, r0
 80025e4:	817b      	strh	r3, [r7, #10]
 80025e6:	460b      	mov	r3, r1
 80025e8:	813b      	strh	r3, [r7, #8]
 80025ea:	4613      	mov	r3, r2
 80025ec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80025ee:	88fb      	ldrh	r3, [r7, #6]
 80025f0:	b2da      	uxtb	r2, r3
 80025f2:	8979      	ldrh	r1, [r7, #10]
 80025f4:	4b20      	ldr	r3, [pc, #128]	@ (8002678 <I2C_RequestMemoryRead+0xa4>)
 80025f6:	9300      	str	r3, [sp, #0]
 80025f8:	2300      	movs	r3, #0
 80025fa:	68f8      	ldr	r0, [r7, #12]
 80025fc:	f000 fa26 	bl	8002a4c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002600:	69fa      	ldr	r2, [r7, #28]
 8002602:	69b9      	ldr	r1, [r7, #24]
 8002604:	68f8      	ldr	r0, [r7, #12]
 8002606:	f000 f8b6 	bl	8002776 <I2C_WaitOnTXISFlagUntilTimeout>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e02c      	b.n	800266e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002614:	88fb      	ldrh	r3, [r7, #6]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d105      	bne.n	8002626 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800261a:	893b      	ldrh	r3, [r7, #8]
 800261c:	b2da      	uxtb	r2, r3
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	629a      	str	r2, [r3, #40]	@ 0x28
 8002624:	e015      	b.n	8002652 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002626:	893b      	ldrh	r3, [r7, #8]
 8002628:	0a1b      	lsrs	r3, r3, #8
 800262a:	b29b      	uxth	r3, r3
 800262c:	b2da      	uxtb	r2, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002634:	69fa      	ldr	r2, [r7, #28]
 8002636:	69b9      	ldr	r1, [r7, #24]
 8002638:	68f8      	ldr	r0, [r7, #12]
 800263a:	f000 f89c 	bl	8002776 <I2C_WaitOnTXISFlagUntilTimeout>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e012      	b.n	800266e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002648:	893b      	ldrh	r3, [r7, #8]
 800264a:	b2da      	uxtb	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	9300      	str	r3, [sp, #0]
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	2200      	movs	r2, #0
 800265a:	2140      	movs	r1, #64	@ 0x40
 800265c:	68f8      	ldr	r0, [r7, #12]
 800265e:	f000 f831 	bl	80026c4 <I2C_WaitOnFlagUntilTimeout>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e000      	b.n	800266e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3710      	adds	r7, #16
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	80002000 	.word	0x80002000

0800267c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b02      	cmp	r3, #2
 8002690:	d103      	bne.n	800269a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2200      	movs	r2, #0
 8002698:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	f003 0301 	and.w	r3, r3, #1
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d007      	beq.n	80026b8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	699a      	ldr	r2, [r3, #24]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f042 0201 	orr.w	r2, r2, #1
 80026b6:	619a      	str	r2, [r3, #24]
  }
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	603b      	str	r3, [r7, #0]
 80026d0:	4613      	mov	r3, r2
 80026d2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026d4:	e03b      	b.n	800274e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	6839      	ldr	r1, [r7, #0]
 80026da:	68f8      	ldr	r0, [r7, #12]
 80026dc:	f000 f8d6 	bl	800288c <I2C_IsErrorOccurred>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e041      	b.n	800276e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80026f0:	d02d      	beq.n	800274e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026f2:	f7ff f881 	bl	80017f8 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	683a      	ldr	r2, [r7, #0]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d302      	bcc.n	8002708 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d122      	bne.n	800274e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	699a      	ldr	r2, [r3, #24]
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	4013      	ands	r3, r2
 8002712:	68ba      	ldr	r2, [r7, #8]
 8002714:	429a      	cmp	r2, r3
 8002716:	bf0c      	ite	eq
 8002718:	2301      	moveq	r3, #1
 800271a:	2300      	movne	r3, #0
 800271c:	b2db      	uxtb	r3, r3
 800271e:	461a      	mov	r2, r3
 8002720:	79fb      	ldrb	r3, [r7, #7]
 8002722:	429a      	cmp	r2, r3
 8002724:	d113      	bne.n	800274e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800272a:	f043 0220 	orr.w	r2, r3, #32
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2220      	movs	r2, #32
 8002736:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e00f      	b.n	800276e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	699a      	ldr	r2, [r3, #24]
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	4013      	ands	r3, r2
 8002758:	68ba      	ldr	r2, [r7, #8]
 800275a:	429a      	cmp	r2, r3
 800275c:	bf0c      	ite	eq
 800275e:	2301      	moveq	r3, #1
 8002760:	2300      	movne	r3, #0
 8002762:	b2db      	uxtb	r3, r3
 8002764:	461a      	mov	r2, r3
 8002766:	79fb      	ldrb	r3, [r7, #7]
 8002768:	429a      	cmp	r2, r3
 800276a:	d0b4      	beq.n	80026d6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	3710      	adds	r7, #16
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	b084      	sub	sp, #16
 800277a:	af00      	add	r7, sp, #0
 800277c:	60f8      	str	r0, [r7, #12]
 800277e:	60b9      	str	r1, [r7, #8]
 8002780:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002782:	e033      	b.n	80027ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	68b9      	ldr	r1, [r7, #8]
 8002788:	68f8      	ldr	r0, [r7, #12]
 800278a:	f000 f87f 	bl	800288c <I2C_IsErrorOccurred>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e031      	b.n	80027fc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800279e:	d025      	beq.n	80027ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027a0:	f7ff f82a 	bl	80017f8 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	68ba      	ldr	r2, [r7, #8]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d302      	bcc.n	80027b6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d11a      	bne.n	80027ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d013      	beq.n	80027ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027c8:	f043 0220 	orr.w	r2, r3, #32
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2220      	movs	r2, #32
 80027d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e007      	b.n	80027fc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	699b      	ldr	r3, [r3, #24]
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d1c4      	bne.n	8002784 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3710      	adds	r7, #16
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002810:	e02f      	b.n	8002872 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	68b9      	ldr	r1, [r7, #8]
 8002816:	68f8      	ldr	r0, [r7, #12]
 8002818:	f000 f838 	bl	800288c <I2C_IsErrorOccurred>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e02d      	b.n	8002882 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002826:	f7fe ffe7 	bl	80017f8 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	68ba      	ldr	r2, [r7, #8]
 8002832:	429a      	cmp	r2, r3
 8002834:	d302      	bcc.n	800283c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d11a      	bne.n	8002872 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	f003 0320 	and.w	r3, r3, #32
 8002846:	2b20      	cmp	r3, #32
 8002848:	d013      	beq.n	8002872 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800284e:	f043 0220 	orr.w	r2, r3, #32
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2220      	movs	r2, #32
 800285a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e007      	b.n	8002882 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	f003 0320 	and.w	r3, r3, #32
 800287c:	2b20      	cmp	r3, #32
 800287e:	d1c8      	bne.n	8002812 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3710      	adds	r7, #16
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
	...

0800288c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b08a      	sub	sp, #40	@ 0x28
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002898:	2300      	movs	r3, #0
 800289a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80028a6:	2300      	movs	r3, #0
 80028a8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	f003 0310 	and.w	r3, r3, #16
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d068      	beq.n	800298a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2210      	movs	r2, #16
 80028be:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80028c0:	e049      	b.n	8002956 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80028c8:	d045      	beq.n	8002956 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80028ca:	f7fe ff95 	bl	80017f8 <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	68ba      	ldr	r2, [r7, #8]
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d302      	bcc.n	80028e0 <I2C_IsErrorOccurred+0x54>
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d13a      	bne.n	8002956 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028ea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80028f2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	699b      	ldr	r3, [r3, #24]
 80028fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80028fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002902:	d121      	bne.n	8002948 <I2C_IsErrorOccurred+0xbc>
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800290a:	d01d      	beq.n	8002948 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800290c:	7cfb      	ldrb	r3, [r7, #19]
 800290e:	2b20      	cmp	r3, #32
 8002910:	d01a      	beq.n	8002948 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	685a      	ldr	r2, [r3, #4]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002920:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002922:	f7fe ff69 	bl	80017f8 <HAL_GetTick>
 8002926:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002928:	e00e      	b.n	8002948 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800292a:	f7fe ff65 	bl	80017f8 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	2b19      	cmp	r3, #25
 8002936:	d907      	bls.n	8002948 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002938:	6a3b      	ldr	r3, [r7, #32]
 800293a:	f043 0320 	orr.w	r3, r3, #32
 800293e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002946:	e006      	b.n	8002956 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	f003 0320 	and.w	r3, r3, #32
 8002952:	2b20      	cmp	r3, #32
 8002954:	d1e9      	bne.n	800292a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	f003 0320 	and.w	r3, r3, #32
 8002960:	2b20      	cmp	r3, #32
 8002962:	d003      	beq.n	800296c <I2C_IsErrorOccurred+0xe0>
 8002964:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002968:	2b00      	cmp	r3, #0
 800296a:	d0aa      	beq.n	80028c2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800296c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002970:	2b00      	cmp	r3, #0
 8002972:	d103      	bne.n	800297c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2220      	movs	r2, #32
 800297a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800297c:	6a3b      	ldr	r3, [r7, #32]
 800297e:	f043 0304 	orr.w	r3, r3, #4
 8002982:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002998:	2b00      	cmp	r3, #0
 800299a:	d00b      	beq.n	80029b4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800299c:	6a3b      	ldr	r3, [r7, #32]
 800299e:	f043 0301 	orr.w	r3, r3, #1
 80029a2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80029ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d00b      	beq.n	80029d6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80029be:	6a3b      	ldr	r3, [r7, #32]
 80029c0:	f043 0308 	orr.w	r3, r3, #8
 80029c4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80029ce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d00b      	beq.n	80029f8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80029e0:	6a3b      	ldr	r3, [r7, #32]
 80029e2:	f043 0302 	orr.w	r3, r3, #2
 80029e6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80029f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d01c      	beq.n	8002a3a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002a00:	68f8      	ldr	r0, [r7, #12]
 8002a02:	f7ff fe3b 	bl	800267c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	6859      	ldr	r1, [r3, #4]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	4b0d      	ldr	r3, [pc, #52]	@ (8002a48 <I2C_IsErrorOccurred+0x1bc>)
 8002a12:	400b      	ands	r3, r1
 8002a14:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a1a:	6a3b      	ldr	r3, [r7, #32]
 8002a1c:	431a      	orrs	r2, r3
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2220      	movs	r2, #32
 8002a26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002a3a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3728      	adds	r7, #40	@ 0x28
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	fe00e800 	.word	0xfe00e800

08002a4c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b087      	sub	sp, #28
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	607b      	str	r3, [r7, #4]
 8002a56:	460b      	mov	r3, r1
 8002a58:	817b      	strh	r3, [r7, #10]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a5e:	897b      	ldrh	r3, [r7, #10]
 8002a60:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a64:	7a7b      	ldrb	r3, [r7, #9]
 8002a66:	041b      	lsls	r3, r3, #16
 8002a68:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a6c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a72:	6a3b      	ldr	r3, [r7, #32]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002a7a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	685a      	ldr	r2, [r3, #4]
 8002a82:	6a3b      	ldr	r3, [r7, #32]
 8002a84:	0d5b      	lsrs	r3, r3, #21
 8002a86:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002a8a:	4b08      	ldr	r3, [pc, #32]	@ (8002aac <I2C_TransferConfig+0x60>)
 8002a8c:	430b      	orrs	r3, r1
 8002a8e:	43db      	mvns	r3, r3
 8002a90:	ea02 0103 	and.w	r1, r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	697a      	ldr	r2, [r7, #20]
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002a9e:	bf00      	nop
 8002aa0:	371c      	adds	r7, #28
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	03ff63ff 	.word	0x03ff63ff

08002ab0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b20      	cmp	r3, #32
 8002ac4:	d138      	bne.n	8002b38 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d101      	bne.n	8002ad4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	e032      	b.n	8002b3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2224      	movs	r2, #36	@ 0x24
 8002ae0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f022 0201 	bic.w	r2, r2, #1
 8002af2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002b02:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	6819      	ldr	r1, [r3, #0]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	683a      	ldr	r2, [r7, #0]
 8002b10:	430a      	orrs	r2, r1
 8002b12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f042 0201 	orr.w	r2, r2, #1
 8002b22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2220      	movs	r2, #32
 8002b28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002b34:	2300      	movs	r3, #0
 8002b36:	e000      	b.n	8002b3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002b38:	2302      	movs	r3, #2
  }
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr

08002b46 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002b46:	b480      	push	{r7}
 8002b48:	b085      	sub	sp, #20
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
 8002b4e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	2b20      	cmp	r3, #32
 8002b5a:	d139      	bne.n	8002bd0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d101      	bne.n	8002b6a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002b66:	2302      	movs	r3, #2
 8002b68:	e033      	b.n	8002bd2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2224      	movs	r2, #36	@ 0x24
 8002b76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f022 0201 	bic.w	r2, r2, #1
 8002b88:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002b98:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	021b      	lsls	r3, r3, #8
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f042 0201 	orr.w	r2, r2, #1
 8002bba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2220      	movs	r2, #32
 8002bc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	e000      	b.n	8002bd2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002bd0:	2302      	movs	r3, #2
  }
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3714      	adds	r7, #20
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
	...

08002be0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002be4:	4b0d      	ldr	r3, [pc, #52]	@ (8002c1c <HAL_PWREx_GetVoltageRange+0x3c>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002bec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bf0:	d102      	bne.n	8002bf8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002bf2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002bf6:	e00b      	b.n	8002c10 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002bf8:	4b08      	ldr	r3, [pc, #32]	@ (8002c1c <HAL_PWREx_GetVoltageRange+0x3c>)
 8002bfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002bfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c06:	d102      	bne.n	8002c0e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002c08:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c0c:	e000      	b.n	8002c10 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002c0e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	40007000 	.word	0x40007000

08002c20 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b085      	sub	sp, #20
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d141      	bne.n	8002cb2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c2e:	4b4b      	ldr	r3, [pc, #300]	@ (8002d5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002c36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c3a:	d131      	bne.n	8002ca0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c3c:	4b47      	ldr	r3, [pc, #284]	@ (8002d5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c42:	4a46      	ldr	r2, [pc, #280]	@ (8002d5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c48:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c4c:	4b43      	ldr	r3, [pc, #268]	@ (8002d5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002c54:	4a41      	ldr	r2, [pc, #260]	@ (8002d5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c5a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002c5c:	4b40      	ldr	r3, [pc, #256]	@ (8002d60 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2232      	movs	r2, #50	@ 0x32
 8002c62:	fb02 f303 	mul.w	r3, r2, r3
 8002c66:	4a3f      	ldr	r2, [pc, #252]	@ (8002d64 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002c68:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6c:	0c9b      	lsrs	r3, r3, #18
 8002c6e:	3301      	adds	r3, #1
 8002c70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c72:	e002      	b.n	8002c7a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	3b01      	subs	r3, #1
 8002c78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c7a:	4b38      	ldr	r3, [pc, #224]	@ (8002d5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c7c:	695b      	ldr	r3, [r3, #20]
 8002c7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c86:	d102      	bne.n	8002c8e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1f2      	bne.n	8002c74 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c8e:	4b33      	ldr	r3, [pc, #204]	@ (8002d5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c90:	695b      	ldr	r3, [r3, #20]
 8002c92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c9a:	d158      	bne.n	8002d4e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	e057      	b.n	8002d50 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ca0:	4b2e      	ldr	r3, [pc, #184]	@ (8002d5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ca2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ca6:	4a2d      	ldr	r2, [pc, #180]	@ (8002d5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ca8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002cac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002cb0:	e04d      	b.n	8002d4e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002cb8:	d141      	bne.n	8002d3e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002cba:	4b28      	ldr	r3, [pc, #160]	@ (8002d5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002cc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cc6:	d131      	bne.n	8002d2c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002cc8:	4b24      	ldr	r3, [pc, #144]	@ (8002d5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002cce:	4a23      	ldr	r2, [pc, #140]	@ (8002d5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cd4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cd8:	4b20      	ldr	r3, [pc, #128]	@ (8002d5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ce0:	4a1e      	ldr	r2, [pc, #120]	@ (8002d5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ce2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ce6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002ce8:	4b1d      	ldr	r3, [pc, #116]	@ (8002d60 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2232      	movs	r2, #50	@ 0x32
 8002cee:	fb02 f303 	mul.w	r3, r2, r3
 8002cf2:	4a1c      	ldr	r2, [pc, #112]	@ (8002d64 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf8:	0c9b      	lsrs	r3, r3, #18
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cfe:	e002      	b.n	8002d06 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	3b01      	subs	r3, #1
 8002d04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d06:	4b15      	ldr	r3, [pc, #84]	@ (8002d5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d12:	d102      	bne.n	8002d1a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1f2      	bne.n	8002d00 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d1a:	4b10      	ldr	r3, [pc, #64]	@ (8002d5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d26:	d112      	bne.n	8002d4e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e011      	b.n	8002d50 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d2c:	4b0b      	ldr	r3, [pc, #44]	@ (8002d5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d32:	4a0a      	ldr	r2, [pc, #40]	@ (8002d5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d38:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002d3c:	e007      	b.n	8002d4e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d3e:	4b07      	ldr	r3, [pc, #28]	@ (8002d5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002d46:	4a05      	ldr	r2, [pc, #20]	@ (8002d5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d48:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d4c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002d4e:	2300      	movs	r3, #0
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3714      	adds	r7, #20
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr
 8002d5c:	40007000 	.word	0x40007000
 8002d60:	20000000 	.word	0x20000000
 8002d64:	431bde83 	.word	0x431bde83

08002d68 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b088      	sub	sp, #32
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d102      	bne.n	8002d7c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	f000 bc08 	b.w	800358c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d7c:	4b96      	ldr	r3, [pc, #600]	@ (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f003 030c 	and.w	r3, r3, #12
 8002d84:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d86:	4b94      	ldr	r3, [pc, #592]	@ (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	f003 0303 	and.w	r3, r3, #3
 8002d8e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0310 	and.w	r3, r3, #16
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	f000 80e4 	beq.w	8002f66 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d007      	beq.n	8002db4 <HAL_RCC_OscConfig+0x4c>
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	2b0c      	cmp	r3, #12
 8002da8:	f040 808b 	bne.w	8002ec2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	f040 8087 	bne.w	8002ec2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002db4:	4b88      	ldr	r3, [pc, #544]	@ (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d005      	beq.n	8002dcc <HAL_RCC_OscConfig+0x64>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d101      	bne.n	8002dcc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e3df      	b.n	800358c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a1a      	ldr	r2, [r3, #32]
 8002dd0:	4b81      	ldr	r3, [pc, #516]	@ (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0308 	and.w	r3, r3, #8
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d004      	beq.n	8002de6 <HAL_RCC_OscConfig+0x7e>
 8002ddc:	4b7e      	ldr	r3, [pc, #504]	@ (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002de4:	e005      	b.n	8002df2 <HAL_RCC_OscConfig+0x8a>
 8002de6:	4b7c      	ldr	r3, [pc, #496]	@ (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002de8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dec:	091b      	lsrs	r3, r3, #4
 8002dee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d223      	bcs.n	8002e3e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a1b      	ldr	r3, [r3, #32]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f000 fdcc 	bl	8003998 <RCC_SetFlashLatencyFromMSIRange>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e3c0      	b.n	800358c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e0a:	4b73      	ldr	r3, [pc, #460]	@ (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a72      	ldr	r2, [pc, #456]	@ (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002e10:	f043 0308 	orr.w	r3, r3, #8
 8002e14:	6013      	str	r3, [r2, #0]
 8002e16:	4b70      	ldr	r3, [pc, #448]	@ (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a1b      	ldr	r3, [r3, #32]
 8002e22:	496d      	ldr	r1, [pc, #436]	@ (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e28:	4b6b      	ldr	r3, [pc, #428]	@ (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	69db      	ldr	r3, [r3, #28]
 8002e34:	021b      	lsls	r3, r3, #8
 8002e36:	4968      	ldr	r1, [pc, #416]	@ (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	604b      	str	r3, [r1, #4]
 8002e3c:	e025      	b.n	8002e8a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e3e:	4b66      	ldr	r3, [pc, #408]	@ (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a65      	ldr	r2, [pc, #404]	@ (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002e44:	f043 0308 	orr.w	r3, r3, #8
 8002e48:	6013      	str	r3, [r2, #0]
 8002e4a:	4b63      	ldr	r3, [pc, #396]	@ (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a1b      	ldr	r3, [r3, #32]
 8002e56:	4960      	ldr	r1, [pc, #384]	@ (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e5c:	4b5e      	ldr	r3, [pc, #376]	@ (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	69db      	ldr	r3, [r3, #28]
 8002e68:	021b      	lsls	r3, r3, #8
 8002e6a:	495b      	ldr	r1, [pc, #364]	@ (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d109      	bne.n	8002e8a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a1b      	ldr	r3, [r3, #32]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f000 fd8c 	bl	8003998 <RCC_SetFlashLatencyFromMSIRange>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e380      	b.n	800358c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e8a:	f000 fcc1 	bl	8003810 <HAL_RCC_GetSysClockFreq>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	4b51      	ldr	r3, [pc, #324]	@ (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	091b      	lsrs	r3, r3, #4
 8002e96:	f003 030f 	and.w	r3, r3, #15
 8002e9a:	4950      	ldr	r1, [pc, #320]	@ (8002fdc <HAL_RCC_OscConfig+0x274>)
 8002e9c:	5ccb      	ldrb	r3, [r1, r3]
 8002e9e:	f003 031f 	and.w	r3, r3, #31
 8002ea2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ea6:	4a4e      	ldr	r2, [pc, #312]	@ (8002fe0 <HAL_RCC_OscConfig+0x278>)
 8002ea8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002eaa:	4b4e      	ldr	r3, [pc, #312]	@ (8002fe4 <HAL_RCC_OscConfig+0x27c>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7fe fc52 	bl	8001758 <HAL_InitTick>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002eb8:	7bfb      	ldrb	r3, [r7, #15]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d052      	beq.n	8002f64 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002ebe:	7bfb      	ldrb	r3, [r7, #15]
 8002ec0:	e364      	b.n	800358c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d032      	beq.n	8002f30 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002eca:	4b43      	ldr	r3, [pc, #268]	@ (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a42      	ldr	r2, [pc, #264]	@ (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002ed0:	f043 0301 	orr.w	r3, r3, #1
 8002ed4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ed6:	f7fe fc8f 	bl	80017f8 <HAL_GetTick>
 8002eda:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002edc:	e008      	b.n	8002ef0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ede:	f7fe fc8b 	bl	80017f8 <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d901      	bls.n	8002ef0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	e34d      	b.n	800358c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ef0:	4b39      	ldr	r3, [pc, #228]	@ (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d0f0      	beq.n	8002ede <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002efc:	4b36      	ldr	r3, [pc, #216]	@ (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a35      	ldr	r2, [pc, #212]	@ (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002f02:	f043 0308 	orr.w	r3, r3, #8
 8002f06:	6013      	str	r3, [r2, #0]
 8002f08:	4b33      	ldr	r3, [pc, #204]	@ (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	4930      	ldr	r1, [pc, #192]	@ (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f1a:	4b2f      	ldr	r3, [pc, #188]	@ (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	69db      	ldr	r3, [r3, #28]
 8002f26:	021b      	lsls	r3, r3, #8
 8002f28:	492b      	ldr	r1, [pc, #172]	@ (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	604b      	str	r3, [r1, #4]
 8002f2e:	e01a      	b.n	8002f66 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f30:	4b29      	ldr	r3, [pc, #164]	@ (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a28      	ldr	r2, [pc, #160]	@ (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002f36:	f023 0301 	bic.w	r3, r3, #1
 8002f3a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f3c:	f7fe fc5c 	bl	80017f8 <HAL_GetTick>
 8002f40:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f42:	e008      	b.n	8002f56 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f44:	f7fe fc58 	bl	80017f8 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e31a      	b.n	800358c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f56:	4b20      	ldr	r3, [pc, #128]	@ (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1f0      	bne.n	8002f44 <HAL_RCC_OscConfig+0x1dc>
 8002f62:	e000      	b.n	8002f66 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f64:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d073      	beq.n	800305a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	2b08      	cmp	r3, #8
 8002f76:	d005      	beq.n	8002f84 <HAL_RCC_OscConfig+0x21c>
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	2b0c      	cmp	r3, #12
 8002f7c:	d10e      	bne.n	8002f9c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	2b03      	cmp	r3, #3
 8002f82:	d10b      	bne.n	8002f9c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f84:	4b14      	ldr	r3, [pc, #80]	@ (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d063      	beq.n	8003058 <HAL_RCC_OscConfig+0x2f0>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d15f      	bne.n	8003058 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e2f7      	b.n	800358c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fa4:	d106      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x24c>
 8002fa6:	4b0c      	ldr	r3, [pc, #48]	@ (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a0b      	ldr	r2, [pc, #44]	@ (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002fac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fb0:	6013      	str	r3, [r2, #0]
 8002fb2:	e025      	b.n	8003000 <HAL_RCC_OscConfig+0x298>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002fbc:	d114      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x280>
 8002fbe:	4b06      	ldr	r3, [pc, #24]	@ (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a05      	ldr	r2, [pc, #20]	@ (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002fc4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002fc8:	6013      	str	r3, [r2, #0]
 8002fca:	4b03      	ldr	r3, [pc, #12]	@ (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a02      	ldr	r2, [pc, #8]	@ (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002fd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fd4:	6013      	str	r3, [r2, #0]
 8002fd6:	e013      	b.n	8003000 <HAL_RCC_OscConfig+0x298>
 8002fd8:	40021000 	.word	0x40021000
 8002fdc:	08005b00 	.word	0x08005b00
 8002fe0:	20000000 	.word	0x20000000
 8002fe4:	20000084 	.word	0x20000084
 8002fe8:	4ba0      	ldr	r3, [pc, #640]	@ (800326c <HAL_RCC_OscConfig+0x504>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a9f      	ldr	r2, [pc, #636]	@ (800326c <HAL_RCC_OscConfig+0x504>)
 8002fee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ff2:	6013      	str	r3, [r2, #0]
 8002ff4:	4b9d      	ldr	r3, [pc, #628]	@ (800326c <HAL_RCC_OscConfig+0x504>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a9c      	ldr	r2, [pc, #624]	@ (800326c <HAL_RCC_OscConfig+0x504>)
 8002ffa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ffe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d013      	beq.n	8003030 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003008:	f7fe fbf6 	bl	80017f8 <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800300e:	e008      	b.n	8003022 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003010:	f7fe fbf2 	bl	80017f8 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b64      	cmp	r3, #100	@ 0x64
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e2b4      	b.n	800358c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003022:	4b92      	ldr	r3, [pc, #584]	@ (800326c <HAL_RCC_OscConfig+0x504>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d0f0      	beq.n	8003010 <HAL_RCC_OscConfig+0x2a8>
 800302e:	e014      	b.n	800305a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003030:	f7fe fbe2 	bl	80017f8 <HAL_GetTick>
 8003034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003036:	e008      	b.n	800304a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003038:	f7fe fbde 	bl	80017f8 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b64      	cmp	r3, #100	@ 0x64
 8003044:	d901      	bls.n	800304a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e2a0      	b.n	800358c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800304a:	4b88      	ldr	r3, [pc, #544]	@ (800326c <HAL_RCC_OscConfig+0x504>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d1f0      	bne.n	8003038 <HAL_RCC_OscConfig+0x2d0>
 8003056:	e000      	b.n	800305a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003058:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d060      	beq.n	8003128 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	2b04      	cmp	r3, #4
 800306a:	d005      	beq.n	8003078 <HAL_RCC_OscConfig+0x310>
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	2b0c      	cmp	r3, #12
 8003070:	d119      	bne.n	80030a6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	2b02      	cmp	r3, #2
 8003076:	d116      	bne.n	80030a6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003078:	4b7c      	ldr	r3, [pc, #496]	@ (800326c <HAL_RCC_OscConfig+0x504>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003080:	2b00      	cmp	r3, #0
 8003082:	d005      	beq.n	8003090 <HAL_RCC_OscConfig+0x328>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d101      	bne.n	8003090 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e27d      	b.n	800358c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003090:	4b76      	ldr	r3, [pc, #472]	@ (800326c <HAL_RCC_OscConfig+0x504>)
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	691b      	ldr	r3, [r3, #16]
 800309c:	061b      	lsls	r3, r3, #24
 800309e:	4973      	ldr	r1, [pc, #460]	@ (800326c <HAL_RCC_OscConfig+0x504>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030a4:	e040      	b.n	8003128 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d023      	beq.n	80030f6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030ae:	4b6f      	ldr	r3, [pc, #444]	@ (800326c <HAL_RCC_OscConfig+0x504>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a6e      	ldr	r2, [pc, #440]	@ (800326c <HAL_RCC_OscConfig+0x504>)
 80030b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ba:	f7fe fb9d 	bl	80017f8 <HAL_GetTick>
 80030be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030c0:	e008      	b.n	80030d4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030c2:	f7fe fb99 	bl	80017f8 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d901      	bls.n	80030d4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e25b      	b.n	800358c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030d4:	4b65      	ldr	r3, [pc, #404]	@ (800326c <HAL_RCC_OscConfig+0x504>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d0f0      	beq.n	80030c2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030e0:	4b62      	ldr	r3, [pc, #392]	@ (800326c <HAL_RCC_OscConfig+0x504>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	061b      	lsls	r3, r3, #24
 80030ee:	495f      	ldr	r1, [pc, #380]	@ (800326c <HAL_RCC_OscConfig+0x504>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	604b      	str	r3, [r1, #4]
 80030f4:	e018      	b.n	8003128 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030f6:	4b5d      	ldr	r3, [pc, #372]	@ (800326c <HAL_RCC_OscConfig+0x504>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a5c      	ldr	r2, [pc, #368]	@ (800326c <HAL_RCC_OscConfig+0x504>)
 80030fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003100:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003102:	f7fe fb79 	bl	80017f8 <HAL_GetTick>
 8003106:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003108:	e008      	b.n	800311c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800310a:	f7fe fb75 	bl	80017f8 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b02      	cmp	r3, #2
 8003116:	d901      	bls.n	800311c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e237      	b.n	800358c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800311c:	4b53      	ldr	r3, [pc, #332]	@ (800326c <HAL_RCC_OscConfig+0x504>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1f0      	bne.n	800310a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0308 	and.w	r3, r3, #8
 8003130:	2b00      	cmp	r3, #0
 8003132:	d03c      	beq.n	80031ae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	695b      	ldr	r3, [r3, #20]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d01c      	beq.n	8003176 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800313c:	4b4b      	ldr	r3, [pc, #300]	@ (800326c <HAL_RCC_OscConfig+0x504>)
 800313e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003142:	4a4a      	ldr	r2, [pc, #296]	@ (800326c <HAL_RCC_OscConfig+0x504>)
 8003144:	f043 0301 	orr.w	r3, r3, #1
 8003148:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800314c:	f7fe fb54 	bl	80017f8 <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003152:	e008      	b.n	8003166 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003154:	f7fe fb50 	bl	80017f8 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b02      	cmp	r3, #2
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e212      	b.n	800358c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003166:	4b41      	ldr	r3, [pc, #260]	@ (800326c <HAL_RCC_OscConfig+0x504>)
 8003168:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800316c:	f003 0302 	and.w	r3, r3, #2
 8003170:	2b00      	cmp	r3, #0
 8003172:	d0ef      	beq.n	8003154 <HAL_RCC_OscConfig+0x3ec>
 8003174:	e01b      	b.n	80031ae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003176:	4b3d      	ldr	r3, [pc, #244]	@ (800326c <HAL_RCC_OscConfig+0x504>)
 8003178:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800317c:	4a3b      	ldr	r2, [pc, #236]	@ (800326c <HAL_RCC_OscConfig+0x504>)
 800317e:	f023 0301 	bic.w	r3, r3, #1
 8003182:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003186:	f7fe fb37 	bl	80017f8 <HAL_GetTick>
 800318a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800318c:	e008      	b.n	80031a0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800318e:	f7fe fb33 	bl	80017f8 <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	2b02      	cmp	r3, #2
 800319a:	d901      	bls.n	80031a0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e1f5      	b.n	800358c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031a0:	4b32      	ldr	r3, [pc, #200]	@ (800326c <HAL_RCC_OscConfig+0x504>)
 80031a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1ef      	bne.n	800318e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0304 	and.w	r3, r3, #4
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	f000 80a6 	beq.w	8003308 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031bc:	2300      	movs	r3, #0
 80031be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80031c0:	4b2a      	ldr	r3, [pc, #168]	@ (800326c <HAL_RCC_OscConfig+0x504>)
 80031c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d10d      	bne.n	80031e8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031cc:	4b27      	ldr	r3, [pc, #156]	@ (800326c <HAL_RCC_OscConfig+0x504>)
 80031ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031d0:	4a26      	ldr	r2, [pc, #152]	@ (800326c <HAL_RCC_OscConfig+0x504>)
 80031d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80031d8:	4b24      	ldr	r3, [pc, #144]	@ (800326c <HAL_RCC_OscConfig+0x504>)
 80031da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031e0:	60bb      	str	r3, [r7, #8]
 80031e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031e4:	2301      	movs	r3, #1
 80031e6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031e8:	4b21      	ldr	r3, [pc, #132]	@ (8003270 <HAL_RCC_OscConfig+0x508>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d118      	bne.n	8003226 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031f4:	4b1e      	ldr	r3, [pc, #120]	@ (8003270 <HAL_RCC_OscConfig+0x508>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a1d      	ldr	r2, [pc, #116]	@ (8003270 <HAL_RCC_OscConfig+0x508>)
 80031fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003200:	f7fe fafa 	bl	80017f8 <HAL_GetTick>
 8003204:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003206:	e008      	b.n	800321a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003208:	f7fe faf6 	bl	80017f8 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b02      	cmp	r3, #2
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e1b8      	b.n	800358c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800321a:	4b15      	ldr	r3, [pc, #84]	@ (8003270 <HAL_RCC_OscConfig+0x508>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003222:	2b00      	cmp	r3, #0
 8003224:	d0f0      	beq.n	8003208 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d108      	bne.n	8003240 <HAL_RCC_OscConfig+0x4d8>
 800322e:	4b0f      	ldr	r3, [pc, #60]	@ (800326c <HAL_RCC_OscConfig+0x504>)
 8003230:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003234:	4a0d      	ldr	r2, [pc, #52]	@ (800326c <HAL_RCC_OscConfig+0x504>)
 8003236:	f043 0301 	orr.w	r3, r3, #1
 800323a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800323e:	e029      	b.n	8003294 <HAL_RCC_OscConfig+0x52c>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	2b05      	cmp	r3, #5
 8003246:	d115      	bne.n	8003274 <HAL_RCC_OscConfig+0x50c>
 8003248:	4b08      	ldr	r3, [pc, #32]	@ (800326c <HAL_RCC_OscConfig+0x504>)
 800324a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800324e:	4a07      	ldr	r2, [pc, #28]	@ (800326c <HAL_RCC_OscConfig+0x504>)
 8003250:	f043 0304 	orr.w	r3, r3, #4
 8003254:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003258:	4b04      	ldr	r3, [pc, #16]	@ (800326c <HAL_RCC_OscConfig+0x504>)
 800325a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800325e:	4a03      	ldr	r2, [pc, #12]	@ (800326c <HAL_RCC_OscConfig+0x504>)
 8003260:	f043 0301 	orr.w	r3, r3, #1
 8003264:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003268:	e014      	b.n	8003294 <HAL_RCC_OscConfig+0x52c>
 800326a:	bf00      	nop
 800326c:	40021000 	.word	0x40021000
 8003270:	40007000 	.word	0x40007000
 8003274:	4b9d      	ldr	r3, [pc, #628]	@ (80034ec <HAL_RCC_OscConfig+0x784>)
 8003276:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800327a:	4a9c      	ldr	r2, [pc, #624]	@ (80034ec <HAL_RCC_OscConfig+0x784>)
 800327c:	f023 0301 	bic.w	r3, r3, #1
 8003280:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003284:	4b99      	ldr	r3, [pc, #612]	@ (80034ec <HAL_RCC_OscConfig+0x784>)
 8003286:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800328a:	4a98      	ldr	r2, [pc, #608]	@ (80034ec <HAL_RCC_OscConfig+0x784>)
 800328c:	f023 0304 	bic.w	r3, r3, #4
 8003290:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d016      	beq.n	80032ca <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800329c:	f7fe faac 	bl	80017f8 <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032a2:	e00a      	b.n	80032ba <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032a4:	f7fe faa8 	bl	80017f8 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e168      	b.n	800358c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032ba:	4b8c      	ldr	r3, [pc, #560]	@ (80034ec <HAL_RCC_OscConfig+0x784>)
 80032bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d0ed      	beq.n	80032a4 <HAL_RCC_OscConfig+0x53c>
 80032c8:	e015      	b.n	80032f6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ca:	f7fe fa95 	bl	80017f8 <HAL_GetTick>
 80032ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032d0:	e00a      	b.n	80032e8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032d2:	f7fe fa91 	bl	80017f8 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d901      	bls.n	80032e8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e151      	b.n	800358c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032e8:	4b80      	ldr	r3, [pc, #512]	@ (80034ec <HAL_RCC_OscConfig+0x784>)
 80032ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d1ed      	bne.n	80032d2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032f6:	7ffb      	ldrb	r3, [r7, #31]
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d105      	bne.n	8003308 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032fc:	4b7b      	ldr	r3, [pc, #492]	@ (80034ec <HAL_RCC_OscConfig+0x784>)
 80032fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003300:	4a7a      	ldr	r2, [pc, #488]	@ (80034ec <HAL_RCC_OscConfig+0x784>)
 8003302:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003306:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0320 	and.w	r3, r3, #32
 8003310:	2b00      	cmp	r3, #0
 8003312:	d03c      	beq.n	800338e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003318:	2b00      	cmp	r3, #0
 800331a:	d01c      	beq.n	8003356 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800331c:	4b73      	ldr	r3, [pc, #460]	@ (80034ec <HAL_RCC_OscConfig+0x784>)
 800331e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003322:	4a72      	ldr	r2, [pc, #456]	@ (80034ec <HAL_RCC_OscConfig+0x784>)
 8003324:	f043 0301 	orr.w	r3, r3, #1
 8003328:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800332c:	f7fe fa64 	bl	80017f8 <HAL_GetTick>
 8003330:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003332:	e008      	b.n	8003346 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003334:	f7fe fa60 	bl	80017f8 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b02      	cmp	r3, #2
 8003340:	d901      	bls.n	8003346 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e122      	b.n	800358c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003346:	4b69      	ldr	r3, [pc, #420]	@ (80034ec <HAL_RCC_OscConfig+0x784>)
 8003348:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800334c:	f003 0302 	and.w	r3, r3, #2
 8003350:	2b00      	cmp	r3, #0
 8003352:	d0ef      	beq.n	8003334 <HAL_RCC_OscConfig+0x5cc>
 8003354:	e01b      	b.n	800338e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003356:	4b65      	ldr	r3, [pc, #404]	@ (80034ec <HAL_RCC_OscConfig+0x784>)
 8003358:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800335c:	4a63      	ldr	r2, [pc, #396]	@ (80034ec <HAL_RCC_OscConfig+0x784>)
 800335e:	f023 0301 	bic.w	r3, r3, #1
 8003362:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003366:	f7fe fa47 	bl	80017f8 <HAL_GetTick>
 800336a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800336c:	e008      	b.n	8003380 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800336e:	f7fe fa43 	bl	80017f8 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	2b02      	cmp	r3, #2
 800337a:	d901      	bls.n	8003380 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e105      	b.n	800358c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003380:	4b5a      	ldr	r3, [pc, #360]	@ (80034ec <HAL_RCC_OscConfig+0x784>)
 8003382:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1ef      	bne.n	800336e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003392:	2b00      	cmp	r3, #0
 8003394:	f000 80f9 	beq.w	800358a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800339c:	2b02      	cmp	r3, #2
 800339e:	f040 80cf 	bne.w	8003540 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80033a2:	4b52      	ldr	r3, [pc, #328]	@ (80034ec <HAL_RCC_OscConfig+0x784>)
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	f003 0203 	and.w	r2, r3, #3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d12c      	bne.n	8003410 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033c0:	3b01      	subs	r3, #1
 80033c2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d123      	bne.n	8003410 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033d2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d11b      	bne.n	8003410 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033e2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d113      	bne.n	8003410 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033f2:	085b      	lsrs	r3, r3, #1
 80033f4:	3b01      	subs	r3, #1
 80033f6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d109      	bne.n	8003410 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003406:	085b      	lsrs	r3, r3, #1
 8003408:	3b01      	subs	r3, #1
 800340a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800340c:	429a      	cmp	r2, r3
 800340e:	d071      	beq.n	80034f4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	2b0c      	cmp	r3, #12
 8003414:	d068      	beq.n	80034e8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003416:	4b35      	ldr	r3, [pc, #212]	@ (80034ec <HAL_RCC_OscConfig+0x784>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d105      	bne.n	800342e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003422:	4b32      	ldr	r3, [pc, #200]	@ (80034ec <HAL_RCC_OscConfig+0x784>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d001      	beq.n	8003432 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e0ac      	b.n	800358c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003432:	4b2e      	ldr	r3, [pc, #184]	@ (80034ec <HAL_RCC_OscConfig+0x784>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a2d      	ldr	r2, [pc, #180]	@ (80034ec <HAL_RCC_OscConfig+0x784>)
 8003438:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800343c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800343e:	f7fe f9db 	bl	80017f8 <HAL_GetTick>
 8003442:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003444:	e008      	b.n	8003458 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003446:	f7fe f9d7 	bl	80017f8 <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	2b02      	cmp	r3, #2
 8003452:	d901      	bls.n	8003458 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e099      	b.n	800358c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003458:	4b24      	ldr	r3, [pc, #144]	@ (80034ec <HAL_RCC_OscConfig+0x784>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d1f0      	bne.n	8003446 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003464:	4b21      	ldr	r3, [pc, #132]	@ (80034ec <HAL_RCC_OscConfig+0x784>)
 8003466:	68da      	ldr	r2, [r3, #12]
 8003468:	4b21      	ldr	r3, [pc, #132]	@ (80034f0 <HAL_RCC_OscConfig+0x788>)
 800346a:	4013      	ands	r3, r2
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003474:	3a01      	subs	r2, #1
 8003476:	0112      	lsls	r2, r2, #4
 8003478:	4311      	orrs	r1, r2
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800347e:	0212      	lsls	r2, r2, #8
 8003480:	4311      	orrs	r1, r2
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003486:	0852      	lsrs	r2, r2, #1
 8003488:	3a01      	subs	r2, #1
 800348a:	0552      	lsls	r2, r2, #21
 800348c:	4311      	orrs	r1, r2
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003492:	0852      	lsrs	r2, r2, #1
 8003494:	3a01      	subs	r2, #1
 8003496:	0652      	lsls	r2, r2, #25
 8003498:	4311      	orrs	r1, r2
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800349e:	06d2      	lsls	r2, r2, #27
 80034a0:	430a      	orrs	r2, r1
 80034a2:	4912      	ldr	r1, [pc, #72]	@ (80034ec <HAL_RCC_OscConfig+0x784>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80034a8:	4b10      	ldr	r3, [pc, #64]	@ (80034ec <HAL_RCC_OscConfig+0x784>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a0f      	ldr	r2, [pc, #60]	@ (80034ec <HAL_RCC_OscConfig+0x784>)
 80034ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034b2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034b4:	4b0d      	ldr	r3, [pc, #52]	@ (80034ec <HAL_RCC_OscConfig+0x784>)
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	4a0c      	ldr	r2, [pc, #48]	@ (80034ec <HAL_RCC_OscConfig+0x784>)
 80034ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034be:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80034c0:	f7fe f99a 	bl	80017f8 <HAL_GetTick>
 80034c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034c6:	e008      	b.n	80034da <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034c8:	f7fe f996 	bl	80017f8 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d901      	bls.n	80034da <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e058      	b.n	800358c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034da:	4b04      	ldr	r3, [pc, #16]	@ (80034ec <HAL_RCC_OscConfig+0x784>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d0f0      	beq.n	80034c8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034e6:	e050      	b.n	800358a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e04f      	b.n	800358c <HAL_RCC_OscConfig+0x824>
 80034ec:	40021000 	.word	0x40021000
 80034f0:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034f4:	4b27      	ldr	r3, [pc, #156]	@ (8003594 <HAL_RCC_OscConfig+0x82c>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d144      	bne.n	800358a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003500:	4b24      	ldr	r3, [pc, #144]	@ (8003594 <HAL_RCC_OscConfig+0x82c>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a23      	ldr	r2, [pc, #140]	@ (8003594 <HAL_RCC_OscConfig+0x82c>)
 8003506:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800350a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800350c:	4b21      	ldr	r3, [pc, #132]	@ (8003594 <HAL_RCC_OscConfig+0x82c>)
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	4a20      	ldr	r2, [pc, #128]	@ (8003594 <HAL_RCC_OscConfig+0x82c>)
 8003512:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003516:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003518:	f7fe f96e 	bl	80017f8 <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800351e:	e008      	b.n	8003532 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003520:	f7fe f96a 	bl	80017f8 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b02      	cmp	r3, #2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e02c      	b.n	800358c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003532:	4b18      	ldr	r3, [pc, #96]	@ (8003594 <HAL_RCC_OscConfig+0x82c>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d0f0      	beq.n	8003520 <HAL_RCC_OscConfig+0x7b8>
 800353e:	e024      	b.n	800358a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	2b0c      	cmp	r3, #12
 8003544:	d01f      	beq.n	8003586 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003546:	4b13      	ldr	r3, [pc, #76]	@ (8003594 <HAL_RCC_OscConfig+0x82c>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a12      	ldr	r2, [pc, #72]	@ (8003594 <HAL_RCC_OscConfig+0x82c>)
 800354c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003550:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003552:	f7fe f951 	bl	80017f8 <HAL_GetTick>
 8003556:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003558:	e008      	b.n	800356c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800355a:	f7fe f94d 	bl	80017f8 <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	2b02      	cmp	r3, #2
 8003566:	d901      	bls.n	800356c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e00f      	b.n	800358c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800356c:	4b09      	ldr	r3, [pc, #36]	@ (8003594 <HAL_RCC_OscConfig+0x82c>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d1f0      	bne.n	800355a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003578:	4b06      	ldr	r3, [pc, #24]	@ (8003594 <HAL_RCC_OscConfig+0x82c>)
 800357a:	68da      	ldr	r2, [r3, #12]
 800357c:	4905      	ldr	r1, [pc, #20]	@ (8003594 <HAL_RCC_OscConfig+0x82c>)
 800357e:	4b06      	ldr	r3, [pc, #24]	@ (8003598 <HAL_RCC_OscConfig+0x830>)
 8003580:	4013      	ands	r3, r2
 8003582:	60cb      	str	r3, [r1, #12]
 8003584:	e001      	b.n	800358a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e000      	b.n	800358c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800358a:	2300      	movs	r3, #0
}
 800358c:	4618      	mov	r0, r3
 800358e:	3720      	adds	r7, #32
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}
 8003594:	40021000 	.word	0x40021000
 8003598:	feeefffc 	.word	0xfeeefffc

0800359c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b086      	sub	sp, #24
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80035a6:	2300      	movs	r3, #0
 80035a8:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d101      	bne.n	80035b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e11d      	b.n	80037f0 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035b4:	4b90      	ldr	r3, [pc, #576]	@ (80037f8 <HAL_RCC_ClockConfig+0x25c>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 030f 	and.w	r3, r3, #15
 80035bc:	683a      	ldr	r2, [r7, #0]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d910      	bls.n	80035e4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035c2:	4b8d      	ldr	r3, [pc, #564]	@ (80037f8 <HAL_RCC_ClockConfig+0x25c>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f023 020f 	bic.w	r2, r3, #15
 80035ca:	498b      	ldr	r1, [pc, #556]	@ (80037f8 <HAL_RCC_ClockConfig+0x25c>)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035d2:	4b89      	ldr	r3, [pc, #548]	@ (80037f8 <HAL_RCC_ClockConfig+0x25c>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 030f 	and.w	r3, r3, #15
 80035da:	683a      	ldr	r2, [r7, #0]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d001      	beq.n	80035e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e105      	b.n	80037f0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d010      	beq.n	8003612 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	689a      	ldr	r2, [r3, #8]
 80035f4:	4b81      	ldr	r3, [pc, #516]	@ (80037fc <HAL_RCC_ClockConfig+0x260>)
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d908      	bls.n	8003612 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003600:	4b7e      	ldr	r3, [pc, #504]	@ (80037fc <HAL_RCC_ClockConfig+0x260>)
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	497b      	ldr	r1, [pc, #492]	@ (80037fc <HAL_RCC_ClockConfig+0x260>)
 800360e:	4313      	orrs	r3, r2
 8003610:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0301 	and.w	r3, r3, #1
 800361a:	2b00      	cmp	r3, #0
 800361c:	d079      	beq.n	8003712 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	2b03      	cmp	r3, #3
 8003624:	d11e      	bne.n	8003664 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003626:	4b75      	ldr	r3, [pc, #468]	@ (80037fc <HAL_RCC_ClockConfig+0x260>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d101      	bne.n	8003636 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e0dc      	b.n	80037f0 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003636:	f000 fa09 	bl	8003a4c <RCC_GetSysClockFreqFromPLLSource>
 800363a:	4603      	mov	r3, r0
 800363c:	4a70      	ldr	r2, [pc, #448]	@ (8003800 <HAL_RCC_ClockConfig+0x264>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d946      	bls.n	80036d0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003642:	4b6e      	ldr	r3, [pc, #440]	@ (80037fc <HAL_RCC_ClockConfig+0x260>)
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d140      	bne.n	80036d0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800364e:	4b6b      	ldr	r3, [pc, #428]	@ (80037fc <HAL_RCC_ClockConfig+0x260>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003656:	4a69      	ldr	r2, [pc, #420]	@ (80037fc <HAL_RCC_ClockConfig+0x260>)
 8003658:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800365c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800365e:	2380      	movs	r3, #128	@ 0x80
 8003660:	617b      	str	r3, [r7, #20]
 8003662:	e035      	b.n	80036d0 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	2b02      	cmp	r3, #2
 800366a:	d107      	bne.n	800367c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800366c:	4b63      	ldr	r3, [pc, #396]	@ (80037fc <HAL_RCC_ClockConfig+0x260>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d115      	bne.n	80036a4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e0b9      	b.n	80037f0 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d107      	bne.n	8003694 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003684:	4b5d      	ldr	r3, [pc, #372]	@ (80037fc <HAL_RCC_ClockConfig+0x260>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d109      	bne.n	80036a4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e0ad      	b.n	80037f0 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003694:	4b59      	ldr	r3, [pc, #356]	@ (80037fc <HAL_RCC_ClockConfig+0x260>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800369c:	2b00      	cmp	r3, #0
 800369e:	d101      	bne.n	80036a4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e0a5      	b.n	80037f0 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80036a4:	f000 f8b4 	bl	8003810 <HAL_RCC_GetSysClockFreq>
 80036a8:	4603      	mov	r3, r0
 80036aa:	4a55      	ldr	r2, [pc, #340]	@ (8003800 <HAL_RCC_ClockConfig+0x264>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d90f      	bls.n	80036d0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80036b0:	4b52      	ldr	r3, [pc, #328]	@ (80037fc <HAL_RCC_ClockConfig+0x260>)
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d109      	bne.n	80036d0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80036bc:	4b4f      	ldr	r3, [pc, #316]	@ (80037fc <HAL_RCC_ClockConfig+0x260>)
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80036c4:	4a4d      	ldr	r2, [pc, #308]	@ (80037fc <HAL_RCC_ClockConfig+0x260>)
 80036c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036ca:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80036cc:	2380      	movs	r3, #128	@ 0x80
 80036ce:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80036d0:	4b4a      	ldr	r3, [pc, #296]	@ (80037fc <HAL_RCC_ClockConfig+0x260>)
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f023 0203 	bic.w	r2, r3, #3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	4947      	ldr	r1, [pc, #284]	@ (80037fc <HAL_RCC_ClockConfig+0x260>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036e2:	f7fe f889 	bl	80017f8 <HAL_GetTick>
 80036e6:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036e8:	e00a      	b.n	8003700 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036ea:	f7fe f885 	bl	80017f8 <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d901      	bls.n	8003700 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e077      	b.n	80037f0 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003700:	4b3e      	ldr	r3, [pc, #248]	@ (80037fc <HAL_RCC_ClockConfig+0x260>)
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f003 020c 	and.w	r2, r3, #12
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	429a      	cmp	r2, r3
 8003710:	d1eb      	bne.n	80036ea <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	2b80      	cmp	r3, #128	@ 0x80
 8003716:	d105      	bne.n	8003724 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003718:	4b38      	ldr	r3, [pc, #224]	@ (80037fc <HAL_RCC_ClockConfig+0x260>)
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	4a37      	ldr	r2, [pc, #220]	@ (80037fc <HAL_RCC_ClockConfig+0x260>)
 800371e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003722:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0302 	and.w	r3, r3, #2
 800372c:	2b00      	cmp	r3, #0
 800372e:	d010      	beq.n	8003752 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689a      	ldr	r2, [r3, #8]
 8003734:	4b31      	ldr	r3, [pc, #196]	@ (80037fc <HAL_RCC_ClockConfig+0x260>)
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800373c:	429a      	cmp	r2, r3
 800373e:	d208      	bcs.n	8003752 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003740:	4b2e      	ldr	r3, [pc, #184]	@ (80037fc <HAL_RCC_ClockConfig+0x260>)
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	492b      	ldr	r1, [pc, #172]	@ (80037fc <HAL_RCC_ClockConfig+0x260>)
 800374e:	4313      	orrs	r3, r2
 8003750:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003752:	4b29      	ldr	r3, [pc, #164]	@ (80037f8 <HAL_RCC_ClockConfig+0x25c>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 030f 	and.w	r3, r3, #15
 800375a:	683a      	ldr	r2, [r7, #0]
 800375c:	429a      	cmp	r2, r3
 800375e:	d210      	bcs.n	8003782 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003760:	4b25      	ldr	r3, [pc, #148]	@ (80037f8 <HAL_RCC_ClockConfig+0x25c>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f023 020f 	bic.w	r2, r3, #15
 8003768:	4923      	ldr	r1, [pc, #140]	@ (80037f8 <HAL_RCC_ClockConfig+0x25c>)
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	4313      	orrs	r3, r2
 800376e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003770:	4b21      	ldr	r3, [pc, #132]	@ (80037f8 <HAL_RCC_ClockConfig+0x25c>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 030f 	and.w	r3, r3, #15
 8003778:	683a      	ldr	r2, [r7, #0]
 800377a:	429a      	cmp	r2, r3
 800377c:	d001      	beq.n	8003782 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e036      	b.n	80037f0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0304 	and.w	r3, r3, #4
 800378a:	2b00      	cmp	r3, #0
 800378c:	d008      	beq.n	80037a0 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800378e:	4b1b      	ldr	r3, [pc, #108]	@ (80037fc <HAL_RCC_ClockConfig+0x260>)
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	4918      	ldr	r1, [pc, #96]	@ (80037fc <HAL_RCC_ClockConfig+0x260>)
 800379c:	4313      	orrs	r3, r2
 800379e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0308 	and.w	r3, r3, #8
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d009      	beq.n	80037c0 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037ac:	4b13      	ldr	r3, [pc, #76]	@ (80037fc <HAL_RCC_ClockConfig+0x260>)
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	00db      	lsls	r3, r3, #3
 80037ba:	4910      	ldr	r1, [pc, #64]	@ (80037fc <HAL_RCC_ClockConfig+0x260>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80037c0:	f000 f826 	bl	8003810 <HAL_RCC_GetSysClockFreq>
 80037c4:	4602      	mov	r2, r0
 80037c6:	4b0d      	ldr	r3, [pc, #52]	@ (80037fc <HAL_RCC_ClockConfig+0x260>)
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	091b      	lsrs	r3, r3, #4
 80037cc:	f003 030f 	and.w	r3, r3, #15
 80037d0:	490c      	ldr	r1, [pc, #48]	@ (8003804 <HAL_RCC_ClockConfig+0x268>)
 80037d2:	5ccb      	ldrb	r3, [r1, r3]
 80037d4:	f003 031f 	and.w	r3, r3, #31
 80037d8:	fa22 f303 	lsr.w	r3, r2, r3
 80037dc:	4a0a      	ldr	r2, [pc, #40]	@ (8003808 <HAL_RCC_ClockConfig+0x26c>)
 80037de:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80037e0:	4b0a      	ldr	r3, [pc, #40]	@ (800380c <HAL_RCC_ClockConfig+0x270>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7fd ffb7 	bl	8001758 <HAL_InitTick>
 80037ea:	4603      	mov	r3, r0
 80037ec:	73fb      	strb	r3, [r7, #15]

  return status;
 80037ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3718      	adds	r7, #24
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	40022000 	.word	0x40022000
 80037fc:	40021000 	.word	0x40021000
 8003800:	04c4b400 	.word	0x04c4b400
 8003804:	08005b00 	.word	0x08005b00
 8003808:	20000000 	.word	0x20000000
 800380c:	20000084 	.word	0x20000084

08003810 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003810:	b480      	push	{r7}
 8003812:	b089      	sub	sp, #36	@ 0x24
 8003814:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003816:	2300      	movs	r3, #0
 8003818:	61fb      	str	r3, [r7, #28]
 800381a:	2300      	movs	r3, #0
 800381c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800381e:	4b3e      	ldr	r3, [pc, #248]	@ (8003918 <HAL_RCC_GetSysClockFreq+0x108>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f003 030c 	and.w	r3, r3, #12
 8003826:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003828:	4b3b      	ldr	r3, [pc, #236]	@ (8003918 <HAL_RCC_GetSysClockFreq+0x108>)
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	f003 0303 	and.w	r3, r3, #3
 8003830:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d005      	beq.n	8003844 <HAL_RCC_GetSysClockFreq+0x34>
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	2b0c      	cmp	r3, #12
 800383c:	d121      	bne.n	8003882 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2b01      	cmp	r3, #1
 8003842:	d11e      	bne.n	8003882 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003844:	4b34      	ldr	r3, [pc, #208]	@ (8003918 <HAL_RCC_GetSysClockFreq+0x108>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0308 	and.w	r3, r3, #8
 800384c:	2b00      	cmp	r3, #0
 800384e:	d107      	bne.n	8003860 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003850:	4b31      	ldr	r3, [pc, #196]	@ (8003918 <HAL_RCC_GetSysClockFreq+0x108>)
 8003852:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003856:	0a1b      	lsrs	r3, r3, #8
 8003858:	f003 030f 	and.w	r3, r3, #15
 800385c:	61fb      	str	r3, [r7, #28]
 800385e:	e005      	b.n	800386c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003860:	4b2d      	ldr	r3, [pc, #180]	@ (8003918 <HAL_RCC_GetSysClockFreq+0x108>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	091b      	lsrs	r3, r3, #4
 8003866:	f003 030f 	and.w	r3, r3, #15
 800386a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800386c:	4a2b      	ldr	r2, [pc, #172]	@ (800391c <HAL_RCC_GetSysClockFreq+0x10c>)
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003874:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d10d      	bne.n	8003898 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003880:	e00a      	b.n	8003898 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	2b04      	cmp	r3, #4
 8003886:	d102      	bne.n	800388e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003888:	4b25      	ldr	r3, [pc, #148]	@ (8003920 <HAL_RCC_GetSysClockFreq+0x110>)
 800388a:	61bb      	str	r3, [r7, #24]
 800388c:	e004      	b.n	8003898 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	2b08      	cmp	r3, #8
 8003892:	d101      	bne.n	8003898 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003894:	4b23      	ldr	r3, [pc, #140]	@ (8003924 <HAL_RCC_GetSysClockFreq+0x114>)
 8003896:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	2b0c      	cmp	r3, #12
 800389c:	d134      	bne.n	8003908 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800389e:	4b1e      	ldr	r3, [pc, #120]	@ (8003918 <HAL_RCC_GetSysClockFreq+0x108>)
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	f003 0303 	and.w	r3, r3, #3
 80038a6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d003      	beq.n	80038b6 <HAL_RCC_GetSysClockFreq+0xa6>
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	2b03      	cmp	r3, #3
 80038b2:	d003      	beq.n	80038bc <HAL_RCC_GetSysClockFreq+0xac>
 80038b4:	e005      	b.n	80038c2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80038b6:	4b1a      	ldr	r3, [pc, #104]	@ (8003920 <HAL_RCC_GetSysClockFreq+0x110>)
 80038b8:	617b      	str	r3, [r7, #20]
      break;
 80038ba:	e005      	b.n	80038c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80038bc:	4b19      	ldr	r3, [pc, #100]	@ (8003924 <HAL_RCC_GetSysClockFreq+0x114>)
 80038be:	617b      	str	r3, [r7, #20]
      break;
 80038c0:	e002      	b.n	80038c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	617b      	str	r3, [r7, #20]
      break;
 80038c6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80038c8:	4b13      	ldr	r3, [pc, #76]	@ (8003918 <HAL_RCC_GetSysClockFreq+0x108>)
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	091b      	lsrs	r3, r3, #4
 80038ce:	f003 030f 	and.w	r3, r3, #15
 80038d2:	3301      	adds	r3, #1
 80038d4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80038d6:	4b10      	ldr	r3, [pc, #64]	@ (8003918 <HAL_RCC_GetSysClockFreq+0x108>)
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	0a1b      	lsrs	r3, r3, #8
 80038dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80038e0:	697a      	ldr	r2, [r7, #20]
 80038e2:	fb03 f202 	mul.w	r2, r3, r2
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80038ee:	4b0a      	ldr	r3, [pc, #40]	@ (8003918 <HAL_RCC_GetSysClockFreq+0x108>)
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	0e5b      	lsrs	r3, r3, #25
 80038f4:	f003 0303 	and.w	r3, r3, #3
 80038f8:	3301      	adds	r3, #1
 80038fa:	005b      	lsls	r3, r3, #1
 80038fc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80038fe:	697a      	ldr	r2, [r7, #20]
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	fbb2 f3f3 	udiv	r3, r2, r3
 8003906:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003908:	69bb      	ldr	r3, [r7, #24]
}
 800390a:	4618      	mov	r0, r3
 800390c:	3724      	adds	r7, #36	@ 0x24
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	40021000 	.word	0x40021000
 800391c:	08005b18 	.word	0x08005b18
 8003920:	00f42400 	.word	0x00f42400
 8003924:	007a1200 	.word	0x007a1200

08003928 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003928:	b480      	push	{r7}
 800392a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800392c:	4b03      	ldr	r3, [pc, #12]	@ (800393c <HAL_RCC_GetHCLKFreq+0x14>)
 800392e:	681b      	ldr	r3, [r3, #0]
}
 8003930:	4618      	mov	r0, r3
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	20000000 	.word	0x20000000

08003940 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003944:	f7ff fff0 	bl	8003928 <HAL_RCC_GetHCLKFreq>
 8003948:	4602      	mov	r2, r0
 800394a:	4b06      	ldr	r3, [pc, #24]	@ (8003964 <HAL_RCC_GetPCLK1Freq+0x24>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	0a1b      	lsrs	r3, r3, #8
 8003950:	f003 0307 	and.w	r3, r3, #7
 8003954:	4904      	ldr	r1, [pc, #16]	@ (8003968 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003956:	5ccb      	ldrb	r3, [r1, r3]
 8003958:	f003 031f 	and.w	r3, r3, #31
 800395c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003960:	4618      	mov	r0, r3
 8003962:	bd80      	pop	{r7, pc}
 8003964:	40021000 	.word	0x40021000
 8003968:	08005b10 	.word	0x08005b10

0800396c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003970:	f7ff ffda 	bl	8003928 <HAL_RCC_GetHCLKFreq>
 8003974:	4602      	mov	r2, r0
 8003976:	4b06      	ldr	r3, [pc, #24]	@ (8003990 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	0adb      	lsrs	r3, r3, #11
 800397c:	f003 0307 	and.w	r3, r3, #7
 8003980:	4904      	ldr	r1, [pc, #16]	@ (8003994 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003982:	5ccb      	ldrb	r3, [r1, r3]
 8003984:	f003 031f 	and.w	r3, r3, #31
 8003988:	fa22 f303 	lsr.w	r3, r2, r3
}
 800398c:	4618      	mov	r0, r3
 800398e:	bd80      	pop	{r7, pc}
 8003990:	40021000 	.word	0x40021000
 8003994:	08005b10 	.word	0x08005b10

08003998 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b086      	sub	sp, #24
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80039a0:	2300      	movs	r3, #0
 80039a2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80039a4:	4b27      	ldr	r3, [pc, #156]	@ (8003a44 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80039a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d003      	beq.n	80039b8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80039b0:	f7ff f916 	bl	8002be0 <HAL_PWREx_GetVoltageRange>
 80039b4:	6178      	str	r0, [r7, #20]
 80039b6:	e014      	b.n	80039e2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80039b8:	4b22      	ldr	r3, [pc, #136]	@ (8003a44 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80039ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039bc:	4a21      	ldr	r2, [pc, #132]	@ (8003a44 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80039be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80039c4:	4b1f      	ldr	r3, [pc, #124]	@ (8003a44 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80039c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039cc:	60fb      	str	r3, [r7, #12]
 80039ce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80039d0:	f7ff f906 	bl	8002be0 <HAL_PWREx_GetVoltageRange>
 80039d4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80039d6:	4b1b      	ldr	r3, [pc, #108]	@ (8003a44 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80039d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039da:	4a1a      	ldr	r2, [pc, #104]	@ (8003a44 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80039dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039e0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039e8:	d10b      	bne.n	8003a02 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2b80      	cmp	r3, #128	@ 0x80
 80039ee:	d913      	bls.n	8003a18 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2ba0      	cmp	r3, #160	@ 0xa0
 80039f4:	d902      	bls.n	80039fc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80039f6:	2302      	movs	r3, #2
 80039f8:	613b      	str	r3, [r7, #16]
 80039fa:	e00d      	b.n	8003a18 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80039fc:	2301      	movs	r3, #1
 80039fe:	613b      	str	r3, [r7, #16]
 8003a00:	e00a      	b.n	8003a18 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2b7f      	cmp	r3, #127	@ 0x7f
 8003a06:	d902      	bls.n	8003a0e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003a08:	2302      	movs	r3, #2
 8003a0a:	613b      	str	r3, [r7, #16]
 8003a0c:	e004      	b.n	8003a18 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2b70      	cmp	r3, #112	@ 0x70
 8003a12:	d101      	bne.n	8003a18 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a14:	2301      	movs	r3, #1
 8003a16:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003a18:	4b0b      	ldr	r3, [pc, #44]	@ (8003a48 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f023 020f 	bic.w	r2, r3, #15
 8003a20:	4909      	ldr	r1, [pc, #36]	@ (8003a48 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003a28:	4b07      	ldr	r3, [pc, #28]	@ (8003a48 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 030f 	and.w	r3, r3, #15
 8003a30:	693a      	ldr	r2, [r7, #16]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d001      	beq.n	8003a3a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e000      	b.n	8003a3c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003a3a:	2300      	movs	r3, #0
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3718      	adds	r7, #24
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	40021000 	.word	0x40021000
 8003a48:	40022000 	.word	0x40022000

08003a4c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b087      	sub	sp, #28
 8003a50:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a52:	4b2d      	ldr	r3, [pc, #180]	@ (8003b08 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	f003 0303 	and.w	r3, r3, #3
 8003a5a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2b03      	cmp	r3, #3
 8003a60:	d00b      	beq.n	8003a7a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2b03      	cmp	r3, #3
 8003a66:	d825      	bhi.n	8003ab4 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d008      	beq.n	8003a80 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d11f      	bne.n	8003ab4 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003a74:	4b25      	ldr	r3, [pc, #148]	@ (8003b0c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003a76:	613b      	str	r3, [r7, #16]
    break;
 8003a78:	e01f      	b.n	8003aba <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003a7a:	4b25      	ldr	r3, [pc, #148]	@ (8003b10 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003a7c:	613b      	str	r3, [r7, #16]
    break;
 8003a7e:	e01c      	b.n	8003aba <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a80:	4b21      	ldr	r3, [pc, #132]	@ (8003b08 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0308 	and.w	r3, r3, #8
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d107      	bne.n	8003a9c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a8c:	4b1e      	ldr	r3, [pc, #120]	@ (8003b08 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003a8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a92:	0a1b      	lsrs	r3, r3, #8
 8003a94:	f003 030f 	and.w	r3, r3, #15
 8003a98:	617b      	str	r3, [r7, #20]
 8003a9a:	e005      	b.n	8003aa8 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a9c:	4b1a      	ldr	r3, [pc, #104]	@ (8003b08 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	091b      	lsrs	r3, r3, #4
 8003aa2:	f003 030f 	and.w	r3, r3, #15
 8003aa6:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003aa8:	4a1a      	ldr	r2, [pc, #104]	@ (8003b14 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ab0:	613b      	str	r3, [r7, #16]
    break;
 8003ab2:	e002      	b.n	8003aba <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	613b      	str	r3, [r7, #16]
    break;
 8003ab8:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003aba:	4b13      	ldr	r3, [pc, #76]	@ (8003b08 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	091b      	lsrs	r3, r3, #4
 8003ac0:	f003 030f 	and.w	r3, r3, #15
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003ac8:	4b0f      	ldr	r3, [pc, #60]	@ (8003b08 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	0a1b      	lsrs	r3, r3, #8
 8003ace:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	fb03 f202 	mul.w	r2, r3, r2
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ade:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ae0:	4b09      	ldr	r3, [pc, #36]	@ (8003b08 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	0e5b      	lsrs	r3, r3, #25
 8003ae6:	f003 0303 	and.w	r3, r3, #3
 8003aea:	3301      	adds	r3, #1
 8003aec:	005b      	lsls	r3, r3, #1
 8003aee:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003af0:	693a      	ldr	r2, [r7, #16]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003afa:	683b      	ldr	r3, [r7, #0]
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	371c      	adds	r7, #28
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr
 8003b08:	40021000 	.word	0x40021000
 8003b0c:	00f42400 	.word	0x00f42400
 8003b10:	007a1200 	.word	0x007a1200
 8003b14:	08005b18 	.word	0x08005b18

08003b18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b086      	sub	sp, #24
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b20:	2300      	movs	r3, #0
 8003b22:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b24:	2300      	movs	r3, #0
 8003b26:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d040      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b38:	2b80      	cmp	r3, #128	@ 0x80
 8003b3a:	d02a      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003b3c:	2b80      	cmp	r3, #128	@ 0x80
 8003b3e:	d825      	bhi.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003b40:	2b60      	cmp	r3, #96	@ 0x60
 8003b42:	d026      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003b44:	2b60      	cmp	r3, #96	@ 0x60
 8003b46:	d821      	bhi.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003b48:	2b40      	cmp	r3, #64	@ 0x40
 8003b4a:	d006      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003b4c:	2b40      	cmp	r3, #64	@ 0x40
 8003b4e:	d81d      	bhi.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d009      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003b54:	2b20      	cmp	r3, #32
 8003b56:	d010      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003b58:	e018      	b.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b5a:	4b89      	ldr	r3, [pc, #548]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	4a88      	ldr	r2, [pc, #544]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b64:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b66:	e015      	b.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	3304      	adds	r3, #4
 8003b6c:	2100      	movs	r1, #0
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f000 fb02 	bl	8004178 <RCCEx_PLLSAI1_Config>
 8003b74:	4603      	mov	r3, r0
 8003b76:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b78:	e00c      	b.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	3320      	adds	r3, #32
 8003b7e:	2100      	movs	r1, #0
 8003b80:	4618      	mov	r0, r3
 8003b82:	f000 fbed 	bl	8004360 <RCCEx_PLLSAI2_Config>
 8003b86:	4603      	mov	r3, r0
 8003b88:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b8a:	e003      	b.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	74fb      	strb	r3, [r7, #19]
      break;
 8003b90:	e000      	b.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003b92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b94:	7cfb      	ldrb	r3, [r7, #19]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d10b      	bne.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b9a:	4b79      	ldr	r3, [pc, #484]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003ba0:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ba8:	4975      	ldr	r1, [pc, #468]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003bb0:	e001      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bb2:	7cfb      	ldrb	r3, [r7, #19]
 8003bb4:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d047      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bca:	d030      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003bcc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bd0:	d82a      	bhi.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003bd2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bd6:	d02a      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003bd8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bdc:	d824      	bhi.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003bde:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003be2:	d008      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003be4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003be8:	d81e      	bhi.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d00a      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003bee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bf2:	d010      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003bf4:	e018      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003bf6:	4b62      	ldr	r3, [pc, #392]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	4a61      	ldr	r2, [pc, #388]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003bfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c00:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c02:	e015      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	3304      	adds	r3, #4
 8003c08:	2100      	movs	r1, #0
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f000 fab4 	bl	8004178 <RCCEx_PLLSAI1_Config>
 8003c10:	4603      	mov	r3, r0
 8003c12:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c14:	e00c      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	3320      	adds	r3, #32
 8003c1a:	2100      	movs	r1, #0
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f000 fb9f 	bl	8004360 <RCCEx_PLLSAI2_Config>
 8003c22:	4603      	mov	r3, r0
 8003c24:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c26:	e003      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	74fb      	strb	r3, [r7, #19]
      break;
 8003c2c:	e000      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003c2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c30:	7cfb      	ldrb	r3, [r7, #19]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d10b      	bne.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c36:	4b52      	ldr	r3, [pc, #328]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c38:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003c3c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c44:	494e      	ldr	r1, [pc, #312]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003c4c:	e001      	b.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c4e:	7cfb      	ldrb	r3, [r7, #19]
 8003c50:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	f000 809f 	beq.w	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c60:	2300      	movs	r3, #0
 8003c62:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c64:	4b46      	ldr	r3, [pc, #280]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d101      	bne.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003c70:	2301      	movs	r3, #1
 8003c72:	e000      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003c74:	2300      	movs	r3, #0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00d      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c7a:	4b41      	ldr	r3, [pc, #260]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c7e:	4a40      	ldr	r2, [pc, #256]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c84:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c86:	4b3e      	ldr	r3, [pc, #248]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c8e:	60bb      	str	r3, [r7, #8]
 8003c90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c92:	2301      	movs	r3, #1
 8003c94:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c96:	4b3b      	ldr	r3, [pc, #236]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a3a      	ldr	r2, [pc, #232]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003c9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ca0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ca2:	f7fd fda9 	bl	80017f8 <HAL_GetTick>
 8003ca6:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ca8:	e009      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003caa:	f7fd fda5 	bl	80017f8 <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d902      	bls.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	74fb      	strb	r3, [r7, #19]
        break;
 8003cbc:	e005      	b.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003cbe:	4b31      	ldr	r3, [pc, #196]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d0ef      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003cca:	7cfb      	ldrb	r3, [r7, #19]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d15b      	bne.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003cd0:	4b2b      	ldr	r3, [pc, #172]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cda:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d01f      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ce8:	697a      	ldr	r2, [r7, #20]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d019      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003cee:	4b24      	ldr	r3, [pc, #144]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cf4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cf8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003cfa:	4b21      	ldr	r3, [pc, #132]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d00:	4a1f      	ldr	r2, [pc, #124]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d06:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d0a:	4b1d      	ldr	r3, [pc, #116]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d10:	4a1b      	ldr	r2, [pc, #108]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d16:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d1a:	4a19      	ldr	r2, [pc, #100]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	f003 0301 	and.w	r3, r3, #1
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d016      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d2c:	f7fd fd64 	bl	80017f8 <HAL_GetTick>
 8003d30:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d32:	e00b      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d34:	f7fd fd60 	bl	80017f8 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d902      	bls.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	74fb      	strb	r3, [r7, #19]
            break;
 8003d4a:	e006      	b.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d4c:	4b0c      	ldr	r3, [pc, #48]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d0ec      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003d5a:	7cfb      	ldrb	r3, [r7, #19]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d10c      	bne.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d60:	4b07      	ldr	r3, [pc, #28]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d66:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d70:	4903      	ldr	r1, [pc, #12]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003d78:	e008      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d7a:	7cfb      	ldrb	r3, [r7, #19]
 8003d7c:	74bb      	strb	r3, [r7, #18]
 8003d7e:	e005      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003d80:	40021000 	.word	0x40021000
 8003d84:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d88:	7cfb      	ldrb	r3, [r7, #19]
 8003d8a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d8c:	7c7b      	ldrb	r3, [r7, #17]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d105      	bne.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d92:	4ba0      	ldr	r3, [pc, #640]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d96:	4a9f      	ldr	r2, [pc, #636]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d9c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00a      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003daa:	4b9a      	ldr	r3, [pc, #616]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003db0:	f023 0203 	bic.w	r2, r3, #3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003db8:	4996      	ldr	r1, [pc, #600]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0302 	and.w	r3, r3, #2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d00a      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003dcc:	4b91      	ldr	r3, [pc, #580]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dd2:	f023 020c 	bic.w	r2, r3, #12
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dda:	498e      	ldr	r1, [pc, #568]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0304 	and.w	r3, r3, #4
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00a      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003dee:	4b89      	ldr	r3, [pc, #548]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003df4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dfc:	4985      	ldr	r1, [pc, #532]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0308 	and.w	r3, r3, #8
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00a      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e10:	4b80      	ldr	r3, [pc, #512]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e16:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e1e:	497d      	ldr	r1, [pc, #500]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0310 	and.w	r3, r3, #16
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00a      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e32:	4b78      	ldr	r3, [pc, #480]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e38:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e40:	4974      	ldr	r1, [pc, #464]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0320 	and.w	r3, r3, #32
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d00a      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e54:	4b6f      	ldr	r3, [pc, #444]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e5a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e62:	496c      	ldr	r1, [pc, #432]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e64:	4313      	orrs	r3, r2
 8003e66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00a      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e76:	4b67      	ldr	r3, [pc, #412]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e7c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e84:	4963      	ldr	r1, [pc, #396]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d00a      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e98:	4b5e      	ldr	r3, [pc, #376]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e9e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ea6:	495b      	ldr	r1, [pc, #364]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d00a      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003eba:	4b56      	ldr	r3, [pc, #344]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ec0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ec8:	4952      	ldr	r1, [pc, #328]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d00a      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003edc:	4b4d      	ldr	r3, [pc, #308]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ee2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eea:	494a      	ldr	r1, [pc, #296]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00a      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003efe:	4b45      	ldr	r3, [pc, #276]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f04:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f0c:	4941      	ldr	r1, [pc, #260]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d00a      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f20:	4b3c      	ldr	r3, [pc, #240]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f22:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f26:	f023 0203 	bic.w	r2, r3, #3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f2e:	4939      	ldr	r1, [pc, #228]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d028      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f42:	4b34      	ldr	r3, [pc, #208]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f48:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f50:	4930      	ldr	r1, [pc, #192]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f60:	d106      	bne.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f62:	4b2c      	ldr	r3, [pc, #176]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	4a2b      	ldr	r2, [pc, #172]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f68:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f6c:	60d3      	str	r3, [r2, #12]
 8003f6e:	e011      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f74:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003f78:	d10c      	bne.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	3304      	adds	r3, #4
 8003f7e:	2101      	movs	r1, #1
 8003f80:	4618      	mov	r0, r3
 8003f82:	f000 f8f9 	bl	8004178 <RCCEx_PLLSAI1_Config>
 8003f86:	4603      	mov	r3, r0
 8003f88:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003f8a:	7cfb      	ldrb	r3, [r7, #19]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d001      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003f90:	7cfb      	ldrb	r3, [r7, #19]
 8003f92:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d04d      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003fa4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003fa8:	d108      	bne.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003faa:	4b1a      	ldr	r3, [pc, #104]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003fb0:	4a18      	ldr	r2, [pc, #96]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fb2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003fb6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003fba:	e012      	b.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003fbc:	4b15      	ldr	r3, [pc, #84]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003fc2:	4a14      	ldr	r2, [pc, #80]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fc4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003fc8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003fcc:	4b11      	ldr	r3, [pc, #68]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fd2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003fda:	490e      	ldr	r1, [pc, #56]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003fe6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003fea:	d106      	bne.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fec:	4b09      	ldr	r3, [pc, #36]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	4a08      	ldr	r2, [pc, #32]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ff2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ff6:	60d3      	str	r3, [r2, #12]
 8003ff8:	e020      	b.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ffe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004002:	d109      	bne.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004004:	4b03      	ldr	r3, [pc, #12]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	4a02      	ldr	r2, [pc, #8]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800400a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800400e:	60d3      	str	r3, [r2, #12]
 8004010:	e014      	b.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004012:	bf00      	nop
 8004014:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800401c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004020:	d10c      	bne.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	3304      	adds	r3, #4
 8004026:	2101      	movs	r1, #1
 8004028:	4618      	mov	r0, r3
 800402a:	f000 f8a5 	bl	8004178 <RCCEx_PLLSAI1_Config>
 800402e:	4603      	mov	r3, r0
 8004030:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004032:	7cfb      	ldrb	r3, [r7, #19]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d001      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004038:	7cfb      	ldrb	r3, [r7, #19]
 800403a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d028      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004048:	4b4a      	ldr	r3, [pc, #296]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800404a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800404e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004056:	4947      	ldr	r1, [pc, #284]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004058:	4313      	orrs	r3, r2
 800405a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004062:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004066:	d106      	bne.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004068:	4b42      	ldr	r3, [pc, #264]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	4a41      	ldr	r2, [pc, #260]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800406e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004072:	60d3      	str	r3, [r2, #12]
 8004074:	e011      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800407a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800407e:	d10c      	bne.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	3304      	adds	r3, #4
 8004084:	2101      	movs	r1, #1
 8004086:	4618      	mov	r0, r3
 8004088:	f000 f876 	bl	8004178 <RCCEx_PLLSAI1_Config>
 800408c:	4603      	mov	r3, r0
 800408e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004090:	7cfb      	ldrb	r3, [r7, #19]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d001      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004096:	7cfb      	ldrb	r3, [r7, #19]
 8004098:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d01e      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040a6:	4b33      	ldr	r3, [pc, #204]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ac:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040b6:	492f      	ldr	r1, [pc, #188]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040b8:	4313      	orrs	r3, r2
 80040ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80040c8:	d10c      	bne.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	3304      	adds	r3, #4
 80040ce:	2102      	movs	r1, #2
 80040d0:	4618      	mov	r0, r3
 80040d2:	f000 f851 	bl	8004178 <RCCEx_PLLSAI1_Config>
 80040d6:	4603      	mov	r3, r0
 80040d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040da:	7cfb      	ldrb	r3, [r7, #19]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d001      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80040e0:	7cfb      	ldrb	r3, [r7, #19]
 80040e2:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d00b      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80040f0:	4b20      	ldr	r3, [pc, #128]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80040f6:	f023 0204 	bic.w	r2, r3, #4
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004100:	491c      	ldr	r1, [pc, #112]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004102:	4313      	orrs	r3, r2
 8004104:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d00b      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004114:	4b17      	ldr	r3, [pc, #92]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004116:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800411a:	f023 0218 	bic.w	r2, r3, #24
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004124:	4913      	ldr	r1, [pc, #76]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004126:	4313      	orrs	r3, r2
 8004128:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d017      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004138:	4b0e      	ldr	r3, [pc, #56]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800413a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800413e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004148:	490a      	ldr	r1, [pc, #40]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800414a:	4313      	orrs	r3, r2
 800414c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004156:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800415a:	d105      	bne.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800415c:	4b05      	ldr	r3, [pc, #20]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	4a04      	ldr	r2, [pc, #16]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004162:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004166:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004168:	7cbb      	ldrb	r3, [r7, #18]
}
 800416a:	4618      	mov	r0, r3
 800416c:	3718      	adds	r7, #24
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	40021000 	.word	0x40021000

08004178 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004182:	2300      	movs	r3, #0
 8004184:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004186:	4b72      	ldr	r3, [pc, #456]	@ (8004350 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	f003 0303 	and.w	r3, r3, #3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00e      	beq.n	80041b0 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004192:	4b6f      	ldr	r3, [pc, #444]	@ (8004350 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	f003 0203 	and.w	r2, r3, #3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	429a      	cmp	r2, r3
 80041a0:	d103      	bne.n	80041aa <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
       ||
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d142      	bne.n	8004230 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	73fb      	strb	r3, [r7, #15]
 80041ae:	e03f      	b.n	8004230 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2b03      	cmp	r3, #3
 80041b6:	d018      	beq.n	80041ea <RCCEx_PLLSAI1_Config+0x72>
 80041b8:	2b03      	cmp	r3, #3
 80041ba:	d825      	bhi.n	8004208 <RCCEx_PLLSAI1_Config+0x90>
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d002      	beq.n	80041c6 <RCCEx_PLLSAI1_Config+0x4e>
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d009      	beq.n	80041d8 <RCCEx_PLLSAI1_Config+0x60>
 80041c4:	e020      	b.n	8004208 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80041c6:	4b62      	ldr	r3, [pc, #392]	@ (8004350 <RCCEx_PLLSAI1_Config+0x1d8>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0302 	and.w	r3, r3, #2
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d11d      	bne.n	800420e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041d6:	e01a      	b.n	800420e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80041d8:	4b5d      	ldr	r3, [pc, #372]	@ (8004350 <RCCEx_PLLSAI1_Config+0x1d8>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d116      	bne.n	8004212 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041e8:	e013      	b.n	8004212 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80041ea:	4b59      	ldr	r3, [pc, #356]	@ (8004350 <RCCEx_PLLSAI1_Config+0x1d8>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d10f      	bne.n	8004216 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80041f6:	4b56      	ldr	r3, [pc, #344]	@ (8004350 <RCCEx_PLLSAI1_Config+0x1d8>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d109      	bne.n	8004216 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004206:	e006      	b.n	8004216 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	73fb      	strb	r3, [r7, #15]
      break;
 800420c:	e004      	b.n	8004218 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800420e:	bf00      	nop
 8004210:	e002      	b.n	8004218 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004212:	bf00      	nop
 8004214:	e000      	b.n	8004218 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004216:	bf00      	nop
    }

    if(status == HAL_OK)
 8004218:	7bfb      	ldrb	r3, [r7, #15]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d108      	bne.n	8004230 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800421e:	4b4c      	ldr	r3, [pc, #304]	@ (8004350 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	f023 0203 	bic.w	r2, r3, #3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4949      	ldr	r1, [pc, #292]	@ (8004350 <RCCEx_PLLSAI1_Config+0x1d8>)
 800422c:	4313      	orrs	r3, r2
 800422e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004230:	7bfb      	ldrb	r3, [r7, #15]
 8004232:	2b00      	cmp	r3, #0
 8004234:	f040 8086 	bne.w	8004344 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004238:	4b45      	ldr	r3, [pc, #276]	@ (8004350 <RCCEx_PLLSAI1_Config+0x1d8>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a44      	ldr	r2, [pc, #272]	@ (8004350 <RCCEx_PLLSAI1_Config+0x1d8>)
 800423e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004242:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004244:	f7fd fad8 	bl	80017f8 <HAL_GetTick>
 8004248:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800424a:	e009      	b.n	8004260 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800424c:	f7fd fad4 	bl	80017f8 <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	2b02      	cmp	r3, #2
 8004258:	d902      	bls.n	8004260 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	73fb      	strb	r3, [r7, #15]
        break;
 800425e:	e005      	b.n	800426c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004260:	4b3b      	ldr	r3, [pc, #236]	@ (8004350 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d1ef      	bne.n	800424c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800426c:	7bfb      	ldrb	r3, [r7, #15]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d168      	bne.n	8004344 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d113      	bne.n	80042a0 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004278:	4b35      	ldr	r3, [pc, #212]	@ (8004350 <RCCEx_PLLSAI1_Config+0x1d8>)
 800427a:	691a      	ldr	r2, [r3, #16]
 800427c:	4b35      	ldr	r3, [pc, #212]	@ (8004354 <RCCEx_PLLSAI1_Config+0x1dc>)
 800427e:	4013      	ands	r3, r2
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	6892      	ldr	r2, [r2, #8]
 8004284:	0211      	lsls	r1, r2, #8
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	68d2      	ldr	r2, [r2, #12]
 800428a:	06d2      	lsls	r2, r2, #27
 800428c:	4311      	orrs	r1, r2
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	6852      	ldr	r2, [r2, #4]
 8004292:	3a01      	subs	r2, #1
 8004294:	0112      	lsls	r2, r2, #4
 8004296:	430a      	orrs	r2, r1
 8004298:	492d      	ldr	r1, [pc, #180]	@ (8004350 <RCCEx_PLLSAI1_Config+0x1d8>)
 800429a:	4313      	orrs	r3, r2
 800429c:	610b      	str	r3, [r1, #16]
 800429e:	e02d      	b.n	80042fc <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d115      	bne.n	80042d2 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042a6:	4b2a      	ldr	r3, [pc, #168]	@ (8004350 <RCCEx_PLLSAI1_Config+0x1d8>)
 80042a8:	691a      	ldr	r2, [r3, #16]
 80042aa:	4b2b      	ldr	r3, [pc, #172]	@ (8004358 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042ac:	4013      	ands	r3, r2
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	6892      	ldr	r2, [r2, #8]
 80042b2:	0211      	lsls	r1, r2, #8
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	6912      	ldr	r2, [r2, #16]
 80042b8:	0852      	lsrs	r2, r2, #1
 80042ba:	3a01      	subs	r2, #1
 80042bc:	0552      	lsls	r2, r2, #21
 80042be:	4311      	orrs	r1, r2
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	6852      	ldr	r2, [r2, #4]
 80042c4:	3a01      	subs	r2, #1
 80042c6:	0112      	lsls	r2, r2, #4
 80042c8:	430a      	orrs	r2, r1
 80042ca:	4921      	ldr	r1, [pc, #132]	@ (8004350 <RCCEx_PLLSAI1_Config+0x1d8>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	610b      	str	r3, [r1, #16]
 80042d0:	e014      	b.n	80042fc <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042d2:	4b1f      	ldr	r3, [pc, #124]	@ (8004350 <RCCEx_PLLSAI1_Config+0x1d8>)
 80042d4:	691a      	ldr	r2, [r3, #16]
 80042d6:	4b21      	ldr	r3, [pc, #132]	@ (800435c <RCCEx_PLLSAI1_Config+0x1e4>)
 80042d8:	4013      	ands	r3, r2
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	6892      	ldr	r2, [r2, #8]
 80042de:	0211      	lsls	r1, r2, #8
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	6952      	ldr	r2, [r2, #20]
 80042e4:	0852      	lsrs	r2, r2, #1
 80042e6:	3a01      	subs	r2, #1
 80042e8:	0652      	lsls	r2, r2, #25
 80042ea:	4311      	orrs	r1, r2
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	6852      	ldr	r2, [r2, #4]
 80042f0:	3a01      	subs	r2, #1
 80042f2:	0112      	lsls	r2, r2, #4
 80042f4:	430a      	orrs	r2, r1
 80042f6:	4916      	ldr	r1, [pc, #88]	@ (8004350 <RCCEx_PLLSAI1_Config+0x1d8>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80042fc:	4b14      	ldr	r3, [pc, #80]	@ (8004350 <RCCEx_PLLSAI1_Config+0x1d8>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a13      	ldr	r2, [pc, #76]	@ (8004350 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004302:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004306:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004308:	f7fd fa76 	bl	80017f8 <HAL_GetTick>
 800430c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800430e:	e009      	b.n	8004324 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004310:	f7fd fa72 	bl	80017f8 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	2b02      	cmp	r3, #2
 800431c:	d902      	bls.n	8004324 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	73fb      	strb	r3, [r7, #15]
          break;
 8004322:	e005      	b.n	8004330 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004324:	4b0a      	ldr	r3, [pc, #40]	@ (8004350 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d0ef      	beq.n	8004310 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004330:	7bfb      	ldrb	r3, [r7, #15]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d106      	bne.n	8004344 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004336:	4b06      	ldr	r3, [pc, #24]	@ (8004350 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004338:	691a      	ldr	r2, [r3, #16]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	4904      	ldr	r1, [pc, #16]	@ (8004350 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004340:	4313      	orrs	r3, r2
 8004342:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004344:	7bfb      	ldrb	r3, [r7, #15]
}
 8004346:	4618      	mov	r0, r3
 8004348:	3710      	adds	r7, #16
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	40021000 	.word	0x40021000
 8004354:	07ff800f 	.word	0x07ff800f
 8004358:	ff9f800f 	.word	0xff9f800f
 800435c:	f9ff800f 	.word	0xf9ff800f

08004360 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800436a:	2300      	movs	r3, #0
 800436c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800436e:	4b72      	ldr	r3, [pc, #456]	@ (8004538 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	f003 0303 	and.w	r3, r3, #3
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00e      	beq.n	8004398 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800437a:	4b6f      	ldr	r3, [pc, #444]	@ (8004538 <RCCEx_PLLSAI2_Config+0x1d8>)
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	f003 0203 	and.w	r2, r3, #3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	429a      	cmp	r2, r3
 8004388:	d103      	bne.n	8004392 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
       ||
 800438e:	2b00      	cmp	r3, #0
 8004390:	d142      	bne.n	8004418 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	73fb      	strb	r3, [r7, #15]
 8004396:	e03f      	b.n	8004418 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2b03      	cmp	r3, #3
 800439e:	d018      	beq.n	80043d2 <RCCEx_PLLSAI2_Config+0x72>
 80043a0:	2b03      	cmp	r3, #3
 80043a2:	d825      	bhi.n	80043f0 <RCCEx_PLLSAI2_Config+0x90>
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d002      	beq.n	80043ae <RCCEx_PLLSAI2_Config+0x4e>
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d009      	beq.n	80043c0 <RCCEx_PLLSAI2_Config+0x60>
 80043ac:	e020      	b.n	80043f0 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80043ae:	4b62      	ldr	r3, [pc, #392]	@ (8004538 <RCCEx_PLLSAI2_Config+0x1d8>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0302 	and.w	r3, r3, #2
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d11d      	bne.n	80043f6 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043be:	e01a      	b.n	80043f6 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80043c0:	4b5d      	ldr	r3, [pc, #372]	@ (8004538 <RCCEx_PLLSAI2_Config+0x1d8>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d116      	bne.n	80043fa <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043d0:	e013      	b.n	80043fa <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80043d2:	4b59      	ldr	r3, [pc, #356]	@ (8004538 <RCCEx_PLLSAI2_Config+0x1d8>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d10f      	bne.n	80043fe <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80043de:	4b56      	ldr	r3, [pc, #344]	@ (8004538 <RCCEx_PLLSAI2_Config+0x1d8>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d109      	bne.n	80043fe <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80043ee:	e006      	b.n	80043fe <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	73fb      	strb	r3, [r7, #15]
      break;
 80043f4:	e004      	b.n	8004400 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80043f6:	bf00      	nop
 80043f8:	e002      	b.n	8004400 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80043fa:	bf00      	nop
 80043fc:	e000      	b.n	8004400 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80043fe:	bf00      	nop
    }

    if(status == HAL_OK)
 8004400:	7bfb      	ldrb	r3, [r7, #15]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d108      	bne.n	8004418 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004406:	4b4c      	ldr	r3, [pc, #304]	@ (8004538 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	f023 0203 	bic.w	r2, r3, #3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4949      	ldr	r1, [pc, #292]	@ (8004538 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004414:	4313      	orrs	r3, r2
 8004416:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004418:	7bfb      	ldrb	r3, [r7, #15]
 800441a:	2b00      	cmp	r3, #0
 800441c:	f040 8086 	bne.w	800452c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004420:	4b45      	ldr	r3, [pc, #276]	@ (8004538 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a44      	ldr	r2, [pc, #272]	@ (8004538 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004426:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800442a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800442c:	f7fd f9e4 	bl	80017f8 <HAL_GetTick>
 8004430:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004432:	e009      	b.n	8004448 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004434:	f7fd f9e0 	bl	80017f8 <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	2b02      	cmp	r3, #2
 8004440:	d902      	bls.n	8004448 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	73fb      	strb	r3, [r7, #15]
        break;
 8004446:	e005      	b.n	8004454 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004448:	4b3b      	ldr	r3, [pc, #236]	@ (8004538 <RCCEx_PLLSAI2_Config+0x1d8>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d1ef      	bne.n	8004434 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004454:	7bfb      	ldrb	r3, [r7, #15]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d168      	bne.n	800452c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d113      	bne.n	8004488 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004460:	4b35      	ldr	r3, [pc, #212]	@ (8004538 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004462:	695a      	ldr	r2, [r3, #20]
 8004464:	4b35      	ldr	r3, [pc, #212]	@ (800453c <RCCEx_PLLSAI2_Config+0x1dc>)
 8004466:	4013      	ands	r3, r2
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	6892      	ldr	r2, [r2, #8]
 800446c:	0211      	lsls	r1, r2, #8
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	68d2      	ldr	r2, [r2, #12]
 8004472:	06d2      	lsls	r2, r2, #27
 8004474:	4311      	orrs	r1, r2
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	6852      	ldr	r2, [r2, #4]
 800447a:	3a01      	subs	r2, #1
 800447c:	0112      	lsls	r2, r2, #4
 800447e:	430a      	orrs	r2, r1
 8004480:	492d      	ldr	r1, [pc, #180]	@ (8004538 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004482:	4313      	orrs	r3, r2
 8004484:	614b      	str	r3, [r1, #20]
 8004486:	e02d      	b.n	80044e4 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	2b01      	cmp	r3, #1
 800448c:	d115      	bne.n	80044ba <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800448e:	4b2a      	ldr	r3, [pc, #168]	@ (8004538 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004490:	695a      	ldr	r2, [r3, #20]
 8004492:	4b2b      	ldr	r3, [pc, #172]	@ (8004540 <RCCEx_PLLSAI2_Config+0x1e0>)
 8004494:	4013      	ands	r3, r2
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	6892      	ldr	r2, [r2, #8]
 800449a:	0211      	lsls	r1, r2, #8
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	6912      	ldr	r2, [r2, #16]
 80044a0:	0852      	lsrs	r2, r2, #1
 80044a2:	3a01      	subs	r2, #1
 80044a4:	0552      	lsls	r2, r2, #21
 80044a6:	4311      	orrs	r1, r2
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	6852      	ldr	r2, [r2, #4]
 80044ac:	3a01      	subs	r2, #1
 80044ae:	0112      	lsls	r2, r2, #4
 80044b0:	430a      	orrs	r2, r1
 80044b2:	4921      	ldr	r1, [pc, #132]	@ (8004538 <RCCEx_PLLSAI2_Config+0x1d8>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	614b      	str	r3, [r1, #20]
 80044b8:	e014      	b.n	80044e4 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80044ba:	4b1f      	ldr	r3, [pc, #124]	@ (8004538 <RCCEx_PLLSAI2_Config+0x1d8>)
 80044bc:	695a      	ldr	r2, [r3, #20]
 80044be:	4b21      	ldr	r3, [pc, #132]	@ (8004544 <RCCEx_PLLSAI2_Config+0x1e4>)
 80044c0:	4013      	ands	r3, r2
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	6892      	ldr	r2, [r2, #8]
 80044c6:	0211      	lsls	r1, r2, #8
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	6952      	ldr	r2, [r2, #20]
 80044cc:	0852      	lsrs	r2, r2, #1
 80044ce:	3a01      	subs	r2, #1
 80044d0:	0652      	lsls	r2, r2, #25
 80044d2:	4311      	orrs	r1, r2
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	6852      	ldr	r2, [r2, #4]
 80044d8:	3a01      	subs	r2, #1
 80044da:	0112      	lsls	r2, r2, #4
 80044dc:	430a      	orrs	r2, r1
 80044de:	4916      	ldr	r1, [pc, #88]	@ (8004538 <RCCEx_PLLSAI2_Config+0x1d8>)
 80044e0:	4313      	orrs	r3, r2
 80044e2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80044e4:	4b14      	ldr	r3, [pc, #80]	@ (8004538 <RCCEx_PLLSAI2_Config+0x1d8>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a13      	ldr	r2, [pc, #76]	@ (8004538 <RCCEx_PLLSAI2_Config+0x1d8>)
 80044ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044f0:	f7fd f982 	bl	80017f8 <HAL_GetTick>
 80044f4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80044f6:	e009      	b.n	800450c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80044f8:	f7fd f97e 	bl	80017f8 <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	2b02      	cmp	r3, #2
 8004504:	d902      	bls.n	800450c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	73fb      	strb	r3, [r7, #15]
          break;
 800450a:	e005      	b.n	8004518 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800450c:	4b0a      	ldr	r3, [pc, #40]	@ (8004538 <RCCEx_PLLSAI2_Config+0x1d8>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d0ef      	beq.n	80044f8 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004518:	7bfb      	ldrb	r3, [r7, #15]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d106      	bne.n	800452c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800451e:	4b06      	ldr	r3, [pc, #24]	@ (8004538 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004520:	695a      	ldr	r2, [r3, #20]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	699b      	ldr	r3, [r3, #24]
 8004526:	4904      	ldr	r1, [pc, #16]	@ (8004538 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004528:	4313      	orrs	r3, r2
 800452a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800452c:	7bfb      	ldrb	r3, [r7, #15]
}
 800452e:	4618      	mov	r0, r3
 8004530:	3710      	adds	r7, #16
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	40021000 	.word	0x40021000
 800453c:	07ff800f 	.word	0x07ff800f
 8004540:	ff9f800f 	.word	0xff9f800f
 8004544:	f9ff800f 	.word	0xf9ff800f

08004548 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d101      	bne.n	800455a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e049      	b.n	80045ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004560:	b2db      	uxtb	r3, r3
 8004562:	2b00      	cmp	r3, #0
 8004564:	d106      	bne.n	8004574 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f7fc fc38 	bl	8000de4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2202      	movs	r2, #2
 8004578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	3304      	adds	r3, #4
 8004584:	4619      	mov	r1, r3
 8004586:	4610      	mov	r0, r2
 8004588:	f000 fa2e 	bl	80049e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3708      	adds	r7, #8
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}

080045f6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80045f6:	b580      	push	{r7, lr}
 80045f8:	b084      	sub	sp, #16
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	691b      	ldr	r3, [r3, #16]
 800460c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	f003 0302 	and.w	r3, r3, #2
 8004614:	2b00      	cmp	r3, #0
 8004616:	d020      	beq.n	800465a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b00      	cmp	r3, #0
 8004620:	d01b      	beq.n	800465a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f06f 0202 	mvn.w	r2, #2
 800462a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	699b      	ldr	r3, [r3, #24]
 8004638:	f003 0303 	and.w	r3, r3, #3
 800463c:	2b00      	cmp	r3, #0
 800463e:	d003      	beq.n	8004648 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f000 f9b2 	bl	80049aa <HAL_TIM_IC_CaptureCallback>
 8004646:	e005      	b.n	8004654 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f000 f9a4 	bl	8004996 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 f9b5 	bl	80049be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	f003 0304 	and.w	r3, r3, #4
 8004660:	2b00      	cmp	r3, #0
 8004662:	d020      	beq.n	80046a6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f003 0304 	and.w	r3, r3, #4
 800466a:	2b00      	cmp	r3, #0
 800466c:	d01b      	beq.n	80046a6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f06f 0204 	mvn.w	r2, #4
 8004676:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2202      	movs	r2, #2
 800467c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	699b      	ldr	r3, [r3, #24]
 8004684:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004688:	2b00      	cmp	r3, #0
 800468a:	d003      	beq.n	8004694 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f000 f98c 	bl	80049aa <HAL_TIM_IC_CaptureCallback>
 8004692:	e005      	b.n	80046a0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 f97e 	bl	8004996 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 f98f 	bl	80049be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	f003 0308 	and.w	r3, r3, #8
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d020      	beq.n	80046f2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f003 0308 	and.w	r3, r3, #8
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d01b      	beq.n	80046f2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f06f 0208 	mvn.w	r2, #8
 80046c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2204      	movs	r2, #4
 80046c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	69db      	ldr	r3, [r3, #28]
 80046d0:	f003 0303 	and.w	r3, r3, #3
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d003      	beq.n	80046e0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f000 f966 	bl	80049aa <HAL_TIM_IC_CaptureCallback>
 80046de:	e005      	b.n	80046ec <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f000 f958 	bl	8004996 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 f969 	bl	80049be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	f003 0310 	and.w	r3, r3, #16
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d020      	beq.n	800473e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f003 0310 	and.w	r3, r3, #16
 8004702:	2b00      	cmp	r3, #0
 8004704:	d01b      	beq.n	800473e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f06f 0210 	mvn.w	r2, #16
 800470e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2208      	movs	r2, #8
 8004714:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	69db      	ldr	r3, [r3, #28]
 800471c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004720:	2b00      	cmp	r3, #0
 8004722:	d003      	beq.n	800472c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f000 f940 	bl	80049aa <HAL_TIM_IC_CaptureCallback>
 800472a:	e005      	b.n	8004738 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f000 f932 	bl	8004996 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 f943 	bl	80049be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	f003 0301 	and.w	r3, r3, #1
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00c      	beq.n	8004762 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	2b00      	cmp	r3, #0
 8004750:	d007      	beq.n	8004762 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f06f 0201 	mvn.w	r2, #1
 800475a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f7fc f821 	bl	80007a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004768:	2b00      	cmp	r3, #0
 800476a:	d104      	bne.n	8004776 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004772:	2b00      	cmp	r3, #0
 8004774:	d00c      	beq.n	8004790 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800477c:	2b00      	cmp	r3, #0
 800477e:	d007      	beq.n	8004790 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004788:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 fafe 	bl	8004d8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00c      	beq.n	80047b4 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d007      	beq.n	80047b4 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80047ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 faf6 	bl	8004da0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00c      	beq.n	80047d8 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d007      	beq.n	80047d8 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80047d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 f8fd 	bl	80049d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	f003 0320 	and.w	r3, r3, #32
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00c      	beq.n	80047fc <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f003 0320 	and.w	r3, r3, #32
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d007      	beq.n	80047fc <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f06f 0220 	mvn.w	r2, #32
 80047f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 fabe 	bl	8004d78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047fc:	bf00      	nop
 80047fe:	3710      	adds	r7, #16
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800480e:	2300      	movs	r3, #0
 8004810:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004818:	2b01      	cmp	r3, #1
 800481a:	d101      	bne.n	8004820 <HAL_TIM_ConfigClockSource+0x1c>
 800481c:	2302      	movs	r3, #2
 800481e:	e0b6      	b.n	800498e <HAL_TIM_ConfigClockSource+0x18a>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2202      	movs	r2, #2
 800482c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800483e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004842:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800484a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68ba      	ldr	r2, [r7, #8]
 8004852:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800485c:	d03e      	beq.n	80048dc <HAL_TIM_ConfigClockSource+0xd8>
 800485e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004862:	f200 8087 	bhi.w	8004974 <HAL_TIM_ConfigClockSource+0x170>
 8004866:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800486a:	f000 8086 	beq.w	800497a <HAL_TIM_ConfigClockSource+0x176>
 800486e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004872:	d87f      	bhi.n	8004974 <HAL_TIM_ConfigClockSource+0x170>
 8004874:	2b70      	cmp	r3, #112	@ 0x70
 8004876:	d01a      	beq.n	80048ae <HAL_TIM_ConfigClockSource+0xaa>
 8004878:	2b70      	cmp	r3, #112	@ 0x70
 800487a:	d87b      	bhi.n	8004974 <HAL_TIM_ConfigClockSource+0x170>
 800487c:	2b60      	cmp	r3, #96	@ 0x60
 800487e:	d050      	beq.n	8004922 <HAL_TIM_ConfigClockSource+0x11e>
 8004880:	2b60      	cmp	r3, #96	@ 0x60
 8004882:	d877      	bhi.n	8004974 <HAL_TIM_ConfigClockSource+0x170>
 8004884:	2b50      	cmp	r3, #80	@ 0x50
 8004886:	d03c      	beq.n	8004902 <HAL_TIM_ConfigClockSource+0xfe>
 8004888:	2b50      	cmp	r3, #80	@ 0x50
 800488a:	d873      	bhi.n	8004974 <HAL_TIM_ConfigClockSource+0x170>
 800488c:	2b40      	cmp	r3, #64	@ 0x40
 800488e:	d058      	beq.n	8004942 <HAL_TIM_ConfigClockSource+0x13e>
 8004890:	2b40      	cmp	r3, #64	@ 0x40
 8004892:	d86f      	bhi.n	8004974 <HAL_TIM_ConfigClockSource+0x170>
 8004894:	2b30      	cmp	r3, #48	@ 0x30
 8004896:	d064      	beq.n	8004962 <HAL_TIM_ConfigClockSource+0x15e>
 8004898:	2b30      	cmp	r3, #48	@ 0x30
 800489a:	d86b      	bhi.n	8004974 <HAL_TIM_ConfigClockSource+0x170>
 800489c:	2b20      	cmp	r3, #32
 800489e:	d060      	beq.n	8004962 <HAL_TIM_ConfigClockSource+0x15e>
 80048a0:	2b20      	cmp	r3, #32
 80048a2:	d867      	bhi.n	8004974 <HAL_TIM_ConfigClockSource+0x170>
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d05c      	beq.n	8004962 <HAL_TIM_ConfigClockSource+0x15e>
 80048a8:	2b10      	cmp	r3, #16
 80048aa:	d05a      	beq.n	8004962 <HAL_TIM_ConfigClockSource+0x15e>
 80048ac:	e062      	b.n	8004974 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80048be:	f000 f9b3 	bl	8004c28 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80048d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	68ba      	ldr	r2, [r7, #8]
 80048d8:	609a      	str	r2, [r3, #8]
      break;
 80048da:	e04f      	b.n	800497c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80048ec:	f000 f99c 	bl	8004c28 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	689a      	ldr	r2, [r3, #8]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80048fe:	609a      	str	r2, [r3, #8]
      break;
 8004900:	e03c      	b.n	800497c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800490e:	461a      	mov	r2, r3
 8004910:	f000 f910 	bl	8004b34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2150      	movs	r1, #80	@ 0x50
 800491a:	4618      	mov	r0, r3
 800491c:	f000 f969 	bl	8004bf2 <TIM_ITRx_SetConfig>
      break;
 8004920:	e02c      	b.n	800497c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800492e:	461a      	mov	r2, r3
 8004930:	f000 f92f 	bl	8004b92 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2160      	movs	r1, #96	@ 0x60
 800493a:	4618      	mov	r0, r3
 800493c:	f000 f959 	bl	8004bf2 <TIM_ITRx_SetConfig>
      break;
 8004940:	e01c      	b.n	800497c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800494e:	461a      	mov	r2, r3
 8004950:	f000 f8f0 	bl	8004b34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2140      	movs	r1, #64	@ 0x40
 800495a:	4618      	mov	r0, r3
 800495c:	f000 f949 	bl	8004bf2 <TIM_ITRx_SetConfig>
      break;
 8004960:	e00c      	b.n	800497c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4619      	mov	r1, r3
 800496c:	4610      	mov	r0, r2
 800496e:	f000 f940 	bl	8004bf2 <TIM_ITRx_SetConfig>
      break;
 8004972:	e003      	b.n	800497c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	73fb      	strb	r3, [r7, #15]
      break;
 8004978:	e000      	b.n	800497c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800497a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800498c:	7bfb      	ldrb	r3, [r7, #15]
}
 800498e:	4618      	mov	r0, r3
 8004990:	3710      	adds	r7, #16
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}

08004996 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004996:	b480      	push	{r7}
 8004998:	b083      	sub	sp, #12
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800499e:	bf00      	nop
 80049a0:	370c      	adds	r7, #12
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr

080049aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049aa:	b480      	push	{r7}
 80049ac:	b083      	sub	sp, #12
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049b2:	bf00      	nop
 80049b4:	370c      	adds	r7, #12
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr

080049be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049be:	b480      	push	{r7}
 80049c0:	b083      	sub	sp, #12
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049c6:	bf00      	nop
 80049c8:	370c      	adds	r7, #12
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr

080049d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049d2:	b480      	push	{r7}
 80049d4:	b083      	sub	sp, #12
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049da:	bf00      	nop
 80049dc:	370c      	adds	r7, #12
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
	...

080049e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b085      	sub	sp, #20
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a46      	ldr	r2, [pc, #280]	@ (8004b14 <TIM_Base_SetConfig+0x12c>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d013      	beq.n	8004a28 <TIM_Base_SetConfig+0x40>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a06:	d00f      	beq.n	8004a28 <TIM_Base_SetConfig+0x40>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a43      	ldr	r2, [pc, #268]	@ (8004b18 <TIM_Base_SetConfig+0x130>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d00b      	beq.n	8004a28 <TIM_Base_SetConfig+0x40>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4a42      	ldr	r2, [pc, #264]	@ (8004b1c <TIM_Base_SetConfig+0x134>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d007      	beq.n	8004a28 <TIM_Base_SetConfig+0x40>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a41      	ldr	r2, [pc, #260]	@ (8004b20 <TIM_Base_SetConfig+0x138>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d003      	beq.n	8004a28 <TIM_Base_SetConfig+0x40>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4a40      	ldr	r2, [pc, #256]	@ (8004b24 <TIM_Base_SetConfig+0x13c>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d108      	bne.n	8004a3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	68fa      	ldr	r2, [r7, #12]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a35      	ldr	r2, [pc, #212]	@ (8004b14 <TIM_Base_SetConfig+0x12c>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d01f      	beq.n	8004a82 <TIM_Base_SetConfig+0x9a>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a48:	d01b      	beq.n	8004a82 <TIM_Base_SetConfig+0x9a>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a32      	ldr	r2, [pc, #200]	@ (8004b18 <TIM_Base_SetConfig+0x130>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d017      	beq.n	8004a82 <TIM_Base_SetConfig+0x9a>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a31      	ldr	r2, [pc, #196]	@ (8004b1c <TIM_Base_SetConfig+0x134>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d013      	beq.n	8004a82 <TIM_Base_SetConfig+0x9a>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a30      	ldr	r2, [pc, #192]	@ (8004b20 <TIM_Base_SetConfig+0x138>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d00f      	beq.n	8004a82 <TIM_Base_SetConfig+0x9a>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a2f      	ldr	r2, [pc, #188]	@ (8004b24 <TIM_Base_SetConfig+0x13c>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d00b      	beq.n	8004a82 <TIM_Base_SetConfig+0x9a>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a2e      	ldr	r2, [pc, #184]	@ (8004b28 <TIM_Base_SetConfig+0x140>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d007      	beq.n	8004a82 <TIM_Base_SetConfig+0x9a>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a2d      	ldr	r2, [pc, #180]	@ (8004b2c <TIM_Base_SetConfig+0x144>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d003      	beq.n	8004a82 <TIM_Base_SetConfig+0x9a>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a2c      	ldr	r2, [pc, #176]	@ (8004b30 <TIM_Base_SetConfig+0x148>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d108      	bne.n	8004a94 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	695b      	ldr	r3, [r3, #20]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	68fa      	ldr	r2, [r7, #12]
 8004aa6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	689a      	ldr	r2, [r3, #8]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	4a16      	ldr	r2, [pc, #88]	@ (8004b14 <TIM_Base_SetConfig+0x12c>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d00f      	beq.n	8004ae0 <TIM_Base_SetConfig+0xf8>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	4a18      	ldr	r2, [pc, #96]	@ (8004b24 <TIM_Base_SetConfig+0x13c>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d00b      	beq.n	8004ae0 <TIM_Base_SetConfig+0xf8>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	4a17      	ldr	r2, [pc, #92]	@ (8004b28 <TIM_Base_SetConfig+0x140>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d007      	beq.n	8004ae0 <TIM_Base_SetConfig+0xf8>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4a16      	ldr	r2, [pc, #88]	@ (8004b2c <TIM_Base_SetConfig+0x144>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d003      	beq.n	8004ae0 <TIM_Base_SetConfig+0xf8>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	4a15      	ldr	r2, [pc, #84]	@ (8004b30 <TIM_Base_SetConfig+0x148>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d103      	bne.n	8004ae8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	691a      	ldr	r2, [r3, #16]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	f003 0301 	and.w	r3, r3, #1
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d105      	bne.n	8004b06 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	f023 0201 	bic.w	r2, r3, #1
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	611a      	str	r2, [r3, #16]
  }
}
 8004b06:	bf00      	nop
 8004b08:	3714      	adds	r7, #20
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	40012c00 	.word	0x40012c00
 8004b18:	40000400 	.word	0x40000400
 8004b1c:	40000800 	.word	0x40000800
 8004b20:	40000c00 	.word	0x40000c00
 8004b24:	40013400 	.word	0x40013400
 8004b28:	40014000 	.word	0x40014000
 8004b2c:	40014400 	.word	0x40014400
 8004b30:	40014800 	.word	0x40014800

08004b34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b087      	sub	sp, #28
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	60b9      	str	r1, [r7, #8]
 8004b3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6a1b      	ldr	r3, [r3, #32]
 8004b44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	6a1b      	ldr	r3, [r3, #32]
 8004b4a:	f023 0201 	bic.w	r2, r3, #1
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	699b      	ldr	r3, [r3, #24]
 8004b56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	011b      	lsls	r3, r3, #4
 8004b64:	693a      	ldr	r2, [r7, #16]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	f023 030a 	bic.w	r3, r3, #10
 8004b70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b72:	697a      	ldr	r2, [r7, #20]
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	693a      	ldr	r2, [r7, #16]
 8004b7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	697a      	ldr	r2, [r7, #20]
 8004b84:	621a      	str	r2, [r3, #32]
}
 8004b86:	bf00      	nop
 8004b88:	371c      	adds	r7, #28
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr

08004b92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b92:	b480      	push	{r7}
 8004b94:	b087      	sub	sp, #28
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	60f8      	str	r0, [r7, #12]
 8004b9a:	60b9      	str	r1, [r7, #8]
 8004b9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6a1b      	ldr	r3, [r3, #32]
 8004ba2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6a1b      	ldr	r3, [r3, #32]
 8004ba8:	f023 0210 	bic.w	r2, r3, #16
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	699b      	ldr	r3, [r3, #24]
 8004bb4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004bbc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	031b      	lsls	r3, r3, #12
 8004bc2:	693a      	ldr	r2, [r7, #16]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004bce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	011b      	lsls	r3, r3, #4
 8004bd4:	697a      	ldr	r2, [r7, #20]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	693a      	ldr	r2, [r7, #16]
 8004bde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	697a      	ldr	r2, [r7, #20]
 8004be4:	621a      	str	r2, [r3, #32]
}
 8004be6:	bf00      	nop
 8004be8:	371c      	adds	r7, #28
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr

08004bf2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004bf2:	b480      	push	{r7}
 8004bf4:	b085      	sub	sp, #20
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
 8004bfa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c0a:	683a      	ldr	r2, [r7, #0]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	f043 0307 	orr.w	r3, r3, #7
 8004c14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	609a      	str	r2, [r3, #8]
}
 8004c1c:	bf00      	nop
 8004c1e:	3714      	adds	r7, #20
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b087      	sub	sp, #28
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
 8004c34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	021a      	lsls	r2, r3, #8
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	431a      	orrs	r2, r3
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	697a      	ldr	r2, [r7, #20]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	697a      	ldr	r2, [r7, #20]
 8004c5a:	609a      	str	r2, [r3, #8]
}
 8004c5c:	bf00      	nop
 8004c5e:	371c      	adds	r7, #28
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b085      	sub	sp, #20
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d101      	bne.n	8004c80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c7c:	2302      	movs	r3, #2
 8004c7e:	e068      	b.n	8004d52 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2202      	movs	r2, #2
 8004c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a2e      	ldr	r2, [pc, #184]	@ (8004d60 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d004      	beq.n	8004cb4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a2d      	ldr	r2, [pc, #180]	@ (8004d64 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d108      	bne.n	8004cc6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004cba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ccc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68fa      	ldr	r2, [r7, #12]
 8004cde:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a1e      	ldr	r2, [pc, #120]	@ (8004d60 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d01d      	beq.n	8004d26 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cf2:	d018      	beq.n	8004d26 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a1b      	ldr	r2, [pc, #108]	@ (8004d68 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d013      	beq.n	8004d26 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a1a      	ldr	r2, [pc, #104]	@ (8004d6c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d00e      	beq.n	8004d26 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a18      	ldr	r2, [pc, #96]	@ (8004d70 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d009      	beq.n	8004d26 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a13      	ldr	r2, [pc, #76]	@ (8004d64 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d004      	beq.n	8004d26 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a14      	ldr	r2, [pc, #80]	@ (8004d74 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d10c      	bne.n	8004d40 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	68ba      	ldr	r2, [r7, #8]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	68ba      	ldr	r2, [r7, #8]
 8004d3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3714      	adds	r7, #20
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	40012c00 	.word	0x40012c00
 8004d64:	40013400 	.word	0x40013400
 8004d68:	40000400 	.word	0x40000400
 8004d6c:	40000800 	.word	0x40000800
 8004d70:	40000c00 	.word	0x40000c00
 8004d74:	40014000 	.word	0x40014000

08004d78 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d80:	bf00      	nop
 8004d82:	370c      	adds	r7, #12
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d94:	bf00      	nop
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004da8:	bf00      	nop
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d101      	bne.n	8004dc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e042      	b.n	8004e4c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d106      	bne.n	8004dde <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f7fc f827 	bl	8000e2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2224      	movs	r2, #36	@ 0x24
 8004de2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f022 0201 	bic.w	r2, r2, #1
 8004df4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d002      	beq.n	8004e04 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f000 fb24 	bl	800544c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f000 f825 	bl	8004e54 <UART_SetConfig>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d101      	bne.n	8004e14 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e01b      	b.n	8004e4c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	685a      	ldr	r2, [r3, #4]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004e22:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	689a      	ldr	r2, [r3, #8]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004e32:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f042 0201 	orr.w	r2, r2, #1
 8004e42:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f000 fba3 	bl	8005590 <UART_CheckIdleState>
 8004e4a:	4603      	mov	r3, r0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3708      	adds	r7, #8
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e58:	b08c      	sub	sp, #48	@ 0x30
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	689a      	ldr	r2, [r3, #8]
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	691b      	ldr	r3, [r3, #16]
 8004e6c:	431a      	orrs	r2, r3
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	695b      	ldr	r3, [r3, #20]
 8004e72:	431a      	orrs	r2, r3
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	69db      	ldr	r3, [r3, #28]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	4baa      	ldr	r3, [pc, #680]	@ (800512c <UART_SetConfig+0x2d8>)
 8004e84:	4013      	ands	r3, r2
 8004e86:	697a      	ldr	r2, [r7, #20]
 8004e88:	6812      	ldr	r2, [r2, #0]
 8004e8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e8c:	430b      	orrs	r3, r1
 8004e8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	68da      	ldr	r2, [r3, #12]
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	430a      	orrs	r2, r1
 8004ea4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	699b      	ldr	r3, [r3, #24]
 8004eaa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a9f      	ldr	r2, [pc, #636]	@ (8005130 <UART_SetConfig+0x2dc>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d004      	beq.n	8004ec0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	6a1b      	ldr	r3, [r3, #32]
 8004eba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004eca:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004ece:	697a      	ldr	r2, [r7, #20]
 8004ed0:	6812      	ldr	r2, [r2, #0]
 8004ed2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ed4:	430b      	orrs	r3, r1
 8004ed6:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ede:	f023 010f 	bic.w	r1, r3, #15
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	430a      	orrs	r2, r1
 8004eec:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a90      	ldr	r2, [pc, #576]	@ (8005134 <UART_SetConfig+0x2e0>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d125      	bne.n	8004f44 <UART_SetConfig+0xf0>
 8004ef8:	4b8f      	ldr	r3, [pc, #572]	@ (8005138 <UART_SetConfig+0x2e4>)
 8004efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004efe:	f003 0303 	and.w	r3, r3, #3
 8004f02:	2b03      	cmp	r3, #3
 8004f04:	d81a      	bhi.n	8004f3c <UART_SetConfig+0xe8>
 8004f06:	a201      	add	r2, pc, #4	@ (adr r2, 8004f0c <UART_SetConfig+0xb8>)
 8004f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f0c:	08004f1d 	.word	0x08004f1d
 8004f10:	08004f2d 	.word	0x08004f2d
 8004f14:	08004f25 	.word	0x08004f25
 8004f18:	08004f35 	.word	0x08004f35
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f22:	e116      	b.n	8005152 <UART_SetConfig+0x2fe>
 8004f24:	2302      	movs	r3, #2
 8004f26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f2a:	e112      	b.n	8005152 <UART_SetConfig+0x2fe>
 8004f2c:	2304      	movs	r3, #4
 8004f2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f32:	e10e      	b.n	8005152 <UART_SetConfig+0x2fe>
 8004f34:	2308      	movs	r3, #8
 8004f36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f3a:	e10a      	b.n	8005152 <UART_SetConfig+0x2fe>
 8004f3c:	2310      	movs	r3, #16
 8004f3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f42:	e106      	b.n	8005152 <UART_SetConfig+0x2fe>
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a7c      	ldr	r2, [pc, #496]	@ (800513c <UART_SetConfig+0x2e8>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d138      	bne.n	8004fc0 <UART_SetConfig+0x16c>
 8004f4e:	4b7a      	ldr	r3, [pc, #488]	@ (8005138 <UART_SetConfig+0x2e4>)
 8004f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f54:	f003 030c 	and.w	r3, r3, #12
 8004f58:	2b0c      	cmp	r3, #12
 8004f5a:	d82d      	bhi.n	8004fb8 <UART_SetConfig+0x164>
 8004f5c:	a201      	add	r2, pc, #4	@ (adr r2, 8004f64 <UART_SetConfig+0x110>)
 8004f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f62:	bf00      	nop
 8004f64:	08004f99 	.word	0x08004f99
 8004f68:	08004fb9 	.word	0x08004fb9
 8004f6c:	08004fb9 	.word	0x08004fb9
 8004f70:	08004fb9 	.word	0x08004fb9
 8004f74:	08004fa9 	.word	0x08004fa9
 8004f78:	08004fb9 	.word	0x08004fb9
 8004f7c:	08004fb9 	.word	0x08004fb9
 8004f80:	08004fb9 	.word	0x08004fb9
 8004f84:	08004fa1 	.word	0x08004fa1
 8004f88:	08004fb9 	.word	0x08004fb9
 8004f8c:	08004fb9 	.word	0x08004fb9
 8004f90:	08004fb9 	.word	0x08004fb9
 8004f94:	08004fb1 	.word	0x08004fb1
 8004f98:	2300      	movs	r3, #0
 8004f9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f9e:	e0d8      	b.n	8005152 <UART_SetConfig+0x2fe>
 8004fa0:	2302      	movs	r3, #2
 8004fa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fa6:	e0d4      	b.n	8005152 <UART_SetConfig+0x2fe>
 8004fa8:	2304      	movs	r3, #4
 8004faa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fae:	e0d0      	b.n	8005152 <UART_SetConfig+0x2fe>
 8004fb0:	2308      	movs	r3, #8
 8004fb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fb6:	e0cc      	b.n	8005152 <UART_SetConfig+0x2fe>
 8004fb8:	2310      	movs	r3, #16
 8004fba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fbe:	e0c8      	b.n	8005152 <UART_SetConfig+0x2fe>
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a5e      	ldr	r2, [pc, #376]	@ (8005140 <UART_SetConfig+0x2ec>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d125      	bne.n	8005016 <UART_SetConfig+0x1c2>
 8004fca:	4b5b      	ldr	r3, [pc, #364]	@ (8005138 <UART_SetConfig+0x2e4>)
 8004fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fd0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004fd4:	2b30      	cmp	r3, #48	@ 0x30
 8004fd6:	d016      	beq.n	8005006 <UART_SetConfig+0x1b2>
 8004fd8:	2b30      	cmp	r3, #48	@ 0x30
 8004fda:	d818      	bhi.n	800500e <UART_SetConfig+0x1ba>
 8004fdc:	2b20      	cmp	r3, #32
 8004fde:	d00a      	beq.n	8004ff6 <UART_SetConfig+0x1a2>
 8004fe0:	2b20      	cmp	r3, #32
 8004fe2:	d814      	bhi.n	800500e <UART_SetConfig+0x1ba>
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d002      	beq.n	8004fee <UART_SetConfig+0x19a>
 8004fe8:	2b10      	cmp	r3, #16
 8004fea:	d008      	beq.n	8004ffe <UART_SetConfig+0x1aa>
 8004fec:	e00f      	b.n	800500e <UART_SetConfig+0x1ba>
 8004fee:	2300      	movs	r3, #0
 8004ff0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ff4:	e0ad      	b.n	8005152 <UART_SetConfig+0x2fe>
 8004ff6:	2302      	movs	r3, #2
 8004ff8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ffc:	e0a9      	b.n	8005152 <UART_SetConfig+0x2fe>
 8004ffe:	2304      	movs	r3, #4
 8005000:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005004:	e0a5      	b.n	8005152 <UART_SetConfig+0x2fe>
 8005006:	2308      	movs	r3, #8
 8005008:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800500c:	e0a1      	b.n	8005152 <UART_SetConfig+0x2fe>
 800500e:	2310      	movs	r3, #16
 8005010:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005014:	e09d      	b.n	8005152 <UART_SetConfig+0x2fe>
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a4a      	ldr	r2, [pc, #296]	@ (8005144 <UART_SetConfig+0x2f0>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d125      	bne.n	800506c <UART_SetConfig+0x218>
 8005020:	4b45      	ldr	r3, [pc, #276]	@ (8005138 <UART_SetConfig+0x2e4>)
 8005022:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005026:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800502a:	2bc0      	cmp	r3, #192	@ 0xc0
 800502c:	d016      	beq.n	800505c <UART_SetConfig+0x208>
 800502e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005030:	d818      	bhi.n	8005064 <UART_SetConfig+0x210>
 8005032:	2b80      	cmp	r3, #128	@ 0x80
 8005034:	d00a      	beq.n	800504c <UART_SetConfig+0x1f8>
 8005036:	2b80      	cmp	r3, #128	@ 0x80
 8005038:	d814      	bhi.n	8005064 <UART_SetConfig+0x210>
 800503a:	2b00      	cmp	r3, #0
 800503c:	d002      	beq.n	8005044 <UART_SetConfig+0x1f0>
 800503e:	2b40      	cmp	r3, #64	@ 0x40
 8005040:	d008      	beq.n	8005054 <UART_SetConfig+0x200>
 8005042:	e00f      	b.n	8005064 <UART_SetConfig+0x210>
 8005044:	2300      	movs	r3, #0
 8005046:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800504a:	e082      	b.n	8005152 <UART_SetConfig+0x2fe>
 800504c:	2302      	movs	r3, #2
 800504e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005052:	e07e      	b.n	8005152 <UART_SetConfig+0x2fe>
 8005054:	2304      	movs	r3, #4
 8005056:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800505a:	e07a      	b.n	8005152 <UART_SetConfig+0x2fe>
 800505c:	2308      	movs	r3, #8
 800505e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005062:	e076      	b.n	8005152 <UART_SetConfig+0x2fe>
 8005064:	2310      	movs	r3, #16
 8005066:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800506a:	e072      	b.n	8005152 <UART_SetConfig+0x2fe>
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a35      	ldr	r2, [pc, #212]	@ (8005148 <UART_SetConfig+0x2f4>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d12a      	bne.n	80050cc <UART_SetConfig+0x278>
 8005076:	4b30      	ldr	r3, [pc, #192]	@ (8005138 <UART_SetConfig+0x2e4>)
 8005078:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800507c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005080:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005084:	d01a      	beq.n	80050bc <UART_SetConfig+0x268>
 8005086:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800508a:	d81b      	bhi.n	80050c4 <UART_SetConfig+0x270>
 800508c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005090:	d00c      	beq.n	80050ac <UART_SetConfig+0x258>
 8005092:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005096:	d815      	bhi.n	80050c4 <UART_SetConfig+0x270>
 8005098:	2b00      	cmp	r3, #0
 800509a:	d003      	beq.n	80050a4 <UART_SetConfig+0x250>
 800509c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050a0:	d008      	beq.n	80050b4 <UART_SetConfig+0x260>
 80050a2:	e00f      	b.n	80050c4 <UART_SetConfig+0x270>
 80050a4:	2300      	movs	r3, #0
 80050a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050aa:	e052      	b.n	8005152 <UART_SetConfig+0x2fe>
 80050ac:	2302      	movs	r3, #2
 80050ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050b2:	e04e      	b.n	8005152 <UART_SetConfig+0x2fe>
 80050b4:	2304      	movs	r3, #4
 80050b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050ba:	e04a      	b.n	8005152 <UART_SetConfig+0x2fe>
 80050bc:	2308      	movs	r3, #8
 80050be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050c2:	e046      	b.n	8005152 <UART_SetConfig+0x2fe>
 80050c4:	2310      	movs	r3, #16
 80050c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050ca:	e042      	b.n	8005152 <UART_SetConfig+0x2fe>
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a17      	ldr	r2, [pc, #92]	@ (8005130 <UART_SetConfig+0x2dc>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d13a      	bne.n	800514c <UART_SetConfig+0x2f8>
 80050d6:	4b18      	ldr	r3, [pc, #96]	@ (8005138 <UART_SetConfig+0x2e4>)
 80050d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050dc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80050e0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80050e4:	d01a      	beq.n	800511c <UART_SetConfig+0x2c8>
 80050e6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80050ea:	d81b      	bhi.n	8005124 <UART_SetConfig+0x2d0>
 80050ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050f0:	d00c      	beq.n	800510c <UART_SetConfig+0x2b8>
 80050f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050f6:	d815      	bhi.n	8005124 <UART_SetConfig+0x2d0>
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d003      	beq.n	8005104 <UART_SetConfig+0x2b0>
 80050fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005100:	d008      	beq.n	8005114 <UART_SetConfig+0x2c0>
 8005102:	e00f      	b.n	8005124 <UART_SetConfig+0x2d0>
 8005104:	2300      	movs	r3, #0
 8005106:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800510a:	e022      	b.n	8005152 <UART_SetConfig+0x2fe>
 800510c:	2302      	movs	r3, #2
 800510e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005112:	e01e      	b.n	8005152 <UART_SetConfig+0x2fe>
 8005114:	2304      	movs	r3, #4
 8005116:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800511a:	e01a      	b.n	8005152 <UART_SetConfig+0x2fe>
 800511c:	2308      	movs	r3, #8
 800511e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005122:	e016      	b.n	8005152 <UART_SetConfig+0x2fe>
 8005124:	2310      	movs	r3, #16
 8005126:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800512a:	e012      	b.n	8005152 <UART_SetConfig+0x2fe>
 800512c:	cfff69f3 	.word	0xcfff69f3
 8005130:	40008000 	.word	0x40008000
 8005134:	40013800 	.word	0x40013800
 8005138:	40021000 	.word	0x40021000
 800513c:	40004400 	.word	0x40004400
 8005140:	40004800 	.word	0x40004800
 8005144:	40004c00 	.word	0x40004c00
 8005148:	40005000 	.word	0x40005000
 800514c:	2310      	movs	r3, #16
 800514e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4aae      	ldr	r2, [pc, #696]	@ (8005410 <UART_SetConfig+0x5bc>)
 8005158:	4293      	cmp	r3, r2
 800515a:	f040 8097 	bne.w	800528c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800515e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005162:	2b08      	cmp	r3, #8
 8005164:	d823      	bhi.n	80051ae <UART_SetConfig+0x35a>
 8005166:	a201      	add	r2, pc, #4	@ (adr r2, 800516c <UART_SetConfig+0x318>)
 8005168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800516c:	08005191 	.word	0x08005191
 8005170:	080051af 	.word	0x080051af
 8005174:	08005199 	.word	0x08005199
 8005178:	080051af 	.word	0x080051af
 800517c:	0800519f 	.word	0x0800519f
 8005180:	080051af 	.word	0x080051af
 8005184:	080051af 	.word	0x080051af
 8005188:	080051af 	.word	0x080051af
 800518c:	080051a7 	.word	0x080051a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005190:	f7fe fbd6 	bl	8003940 <HAL_RCC_GetPCLK1Freq>
 8005194:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005196:	e010      	b.n	80051ba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005198:	4b9e      	ldr	r3, [pc, #632]	@ (8005414 <UART_SetConfig+0x5c0>)
 800519a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800519c:	e00d      	b.n	80051ba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800519e:	f7fe fb37 	bl	8003810 <HAL_RCC_GetSysClockFreq>
 80051a2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80051a4:	e009      	b.n	80051ba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80051aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80051ac:	e005      	b.n	80051ba <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80051ae:	2300      	movs	r3, #0
 80051b0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80051b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80051ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051bc:	2b00      	cmp	r3, #0
 80051be:	f000 8130 	beq.w	8005422 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051c6:	4a94      	ldr	r2, [pc, #592]	@ (8005418 <UART_SetConfig+0x5c4>)
 80051c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051cc:	461a      	mov	r2, r3
 80051ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80051d4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	685a      	ldr	r2, [r3, #4]
 80051da:	4613      	mov	r3, r2
 80051dc:	005b      	lsls	r3, r3, #1
 80051de:	4413      	add	r3, r2
 80051e0:	69ba      	ldr	r2, [r7, #24]
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d305      	bcc.n	80051f2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80051ec:	69ba      	ldr	r2, [r7, #24]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d903      	bls.n	80051fa <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80051f8:	e113      	b.n	8005422 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051fc:	2200      	movs	r2, #0
 80051fe:	60bb      	str	r3, [r7, #8]
 8005200:	60fa      	str	r2, [r7, #12]
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005206:	4a84      	ldr	r2, [pc, #528]	@ (8005418 <UART_SetConfig+0x5c4>)
 8005208:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800520c:	b29b      	uxth	r3, r3
 800520e:	2200      	movs	r2, #0
 8005210:	603b      	str	r3, [r7, #0]
 8005212:	607a      	str	r2, [r7, #4]
 8005214:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005218:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800521c:	f7fa ffee 	bl	80001fc <__aeabi_uldivmod>
 8005220:	4602      	mov	r2, r0
 8005222:	460b      	mov	r3, r1
 8005224:	4610      	mov	r0, r2
 8005226:	4619      	mov	r1, r3
 8005228:	f04f 0200 	mov.w	r2, #0
 800522c:	f04f 0300 	mov.w	r3, #0
 8005230:	020b      	lsls	r3, r1, #8
 8005232:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005236:	0202      	lsls	r2, r0, #8
 8005238:	6979      	ldr	r1, [r7, #20]
 800523a:	6849      	ldr	r1, [r1, #4]
 800523c:	0849      	lsrs	r1, r1, #1
 800523e:	2000      	movs	r0, #0
 8005240:	460c      	mov	r4, r1
 8005242:	4605      	mov	r5, r0
 8005244:	eb12 0804 	adds.w	r8, r2, r4
 8005248:	eb43 0905 	adc.w	r9, r3, r5
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	469a      	mov	sl, r3
 8005254:	4693      	mov	fp, r2
 8005256:	4652      	mov	r2, sl
 8005258:	465b      	mov	r3, fp
 800525a:	4640      	mov	r0, r8
 800525c:	4649      	mov	r1, r9
 800525e:	f7fa ffcd 	bl	80001fc <__aeabi_uldivmod>
 8005262:	4602      	mov	r2, r0
 8005264:	460b      	mov	r3, r1
 8005266:	4613      	mov	r3, r2
 8005268:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800526a:	6a3b      	ldr	r3, [r7, #32]
 800526c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005270:	d308      	bcc.n	8005284 <UART_SetConfig+0x430>
 8005272:	6a3b      	ldr	r3, [r7, #32]
 8005274:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005278:	d204      	bcs.n	8005284 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	6a3a      	ldr	r2, [r7, #32]
 8005280:	60da      	str	r2, [r3, #12]
 8005282:	e0ce      	b.n	8005422 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800528a:	e0ca      	b.n	8005422 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	69db      	ldr	r3, [r3, #28]
 8005290:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005294:	d166      	bne.n	8005364 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005296:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800529a:	2b08      	cmp	r3, #8
 800529c:	d827      	bhi.n	80052ee <UART_SetConfig+0x49a>
 800529e:	a201      	add	r2, pc, #4	@ (adr r2, 80052a4 <UART_SetConfig+0x450>)
 80052a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a4:	080052c9 	.word	0x080052c9
 80052a8:	080052d1 	.word	0x080052d1
 80052ac:	080052d9 	.word	0x080052d9
 80052b0:	080052ef 	.word	0x080052ef
 80052b4:	080052df 	.word	0x080052df
 80052b8:	080052ef 	.word	0x080052ef
 80052bc:	080052ef 	.word	0x080052ef
 80052c0:	080052ef 	.word	0x080052ef
 80052c4:	080052e7 	.word	0x080052e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052c8:	f7fe fb3a 	bl	8003940 <HAL_RCC_GetPCLK1Freq>
 80052cc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80052ce:	e014      	b.n	80052fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052d0:	f7fe fb4c 	bl	800396c <HAL_RCC_GetPCLK2Freq>
 80052d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80052d6:	e010      	b.n	80052fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052d8:	4b4e      	ldr	r3, [pc, #312]	@ (8005414 <UART_SetConfig+0x5c0>)
 80052da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80052dc:	e00d      	b.n	80052fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052de:	f7fe fa97 	bl	8003810 <HAL_RCC_GetSysClockFreq>
 80052e2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80052e4:	e009      	b.n	80052fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80052ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80052ec:	e005      	b.n	80052fa <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80052ee:	2300      	movs	r3, #0
 80052f0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80052f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80052fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	f000 8090 	beq.w	8005422 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005306:	4a44      	ldr	r2, [pc, #272]	@ (8005418 <UART_SetConfig+0x5c4>)
 8005308:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800530c:	461a      	mov	r2, r3
 800530e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005310:	fbb3 f3f2 	udiv	r3, r3, r2
 8005314:	005a      	lsls	r2, r3, #1
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	085b      	lsrs	r3, r3, #1
 800531c:	441a      	add	r2, r3
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	fbb2 f3f3 	udiv	r3, r2, r3
 8005326:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005328:	6a3b      	ldr	r3, [r7, #32]
 800532a:	2b0f      	cmp	r3, #15
 800532c:	d916      	bls.n	800535c <UART_SetConfig+0x508>
 800532e:	6a3b      	ldr	r3, [r7, #32]
 8005330:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005334:	d212      	bcs.n	800535c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005336:	6a3b      	ldr	r3, [r7, #32]
 8005338:	b29b      	uxth	r3, r3
 800533a:	f023 030f 	bic.w	r3, r3, #15
 800533e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005340:	6a3b      	ldr	r3, [r7, #32]
 8005342:	085b      	lsrs	r3, r3, #1
 8005344:	b29b      	uxth	r3, r3
 8005346:	f003 0307 	and.w	r3, r3, #7
 800534a:	b29a      	uxth	r2, r3
 800534c:	8bfb      	ldrh	r3, [r7, #30]
 800534e:	4313      	orrs	r3, r2
 8005350:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	8bfa      	ldrh	r2, [r7, #30]
 8005358:	60da      	str	r2, [r3, #12]
 800535a:	e062      	b.n	8005422 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005362:	e05e      	b.n	8005422 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005364:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005368:	2b08      	cmp	r3, #8
 800536a:	d828      	bhi.n	80053be <UART_SetConfig+0x56a>
 800536c:	a201      	add	r2, pc, #4	@ (adr r2, 8005374 <UART_SetConfig+0x520>)
 800536e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005372:	bf00      	nop
 8005374:	08005399 	.word	0x08005399
 8005378:	080053a1 	.word	0x080053a1
 800537c:	080053a9 	.word	0x080053a9
 8005380:	080053bf 	.word	0x080053bf
 8005384:	080053af 	.word	0x080053af
 8005388:	080053bf 	.word	0x080053bf
 800538c:	080053bf 	.word	0x080053bf
 8005390:	080053bf 	.word	0x080053bf
 8005394:	080053b7 	.word	0x080053b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005398:	f7fe fad2 	bl	8003940 <HAL_RCC_GetPCLK1Freq>
 800539c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800539e:	e014      	b.n	80053ca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053a0:	f7fe fae4 	bl	800396c <HAL_RCC_GetPCLK2Freq>
 80053a4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80053a6:	e010      	b.n	80053ca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053a8:	4b1a      	ldr	r3, [pc, #104]	@ (8005414 <UART_SetConfig+0x5c0>)
 80053aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80053ac:	e00d      	b.n	80053ca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053ae:	f7fe fa2f 	bl	8003810 <HAL_RCC_GetSysClockFreq>
 80053b2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80053b4:	e009      	b.n	80053ca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80053ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80053bc:	e005      	b.n	80053ca <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80053be:	2300      	movs	r3, #0
 80053c0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80053c8:	bf00      	nop
    }

    if (pclk != 0U)
 80053ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d028      	beq.n	8005422 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053d4:	4a10      	ldr	r2, [pc, #64]	@ (8005418 <UART_SetConfig+0x5c4>)
 80053d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053da:	461a      	mov	r2, r3
 80053dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053de:	fbb3 f2f2 	udiv	r2, r3, r2
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	085b      	lsrs	r3, r3, #1
 80053e8:	441a      	add	r2, r3
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80053f2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053f4:	6a3b      	ldr	r3, [r7, #32]
 80053f6:	2b0f      	cmp	r3, #15
 80053f8:	d910      	bls.n	800541c <UART_SetConfig+0x5c8>
 80053fa:	6a3b      	ldr	r3, [r7, #32]
 80053fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005400:	d20c      	bcs.n	800541c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005402:	6a3b      	ldr	r3, [r7, #32]
 8005404:	b29a      	uxth	r2, r3
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	60da      	str	r2, [r3, #12]
 800540c:	e009      	b.n	8005422 <UART_SetConfig+0x5ce>
 800540e:	bf00      	nop
 8005410:	40008000 	.word	0x40008000
 8005414:	00f42400 	.word	0x00f42400
 8005418:	08005b48 	.word	0x08005b48
      }
      else
      {
        ret = HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	2201      	movs	r2, #1
 8005426:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	2201      	movs	r2, #1
 800542e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	2200      	movs	r2, #0
 8005436:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	2200      	movs	r2, #0
 800543c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800543e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005442:	4618      	mov	r0, r3
 8005444:	3730      	adds	r7, #48	@ 0x30
 8005446:	46bd      	mov	sp, r7
 8005448:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800544c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005458:	f003 0308 	and.w	r3, r3, #8
 800545c:	2b00      	cmp	r3, #0
 800545e:	d00a      	beq.n	8005476 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	430a      	orrs	r2, r1
 8005474:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800547a:	f003 0301 	and.w	r3, r3, #1
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00a      	beq.n	8005498 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	430a      	orrs	r2, r1
 8005496:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800549c:	f003 0302 	and.w	r3, r3, #2
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d00a      	beq.n	80054ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	430a      	orrs	r2, r1
 80054b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054be:	f003 0304 	and.w	r3, r3, #4
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d00a      	beq.n	80054dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	430a      	orrs	r2, r1
 80054da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054e0:	f003 0310 	and.w	r3, r3, #16
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d00a      	beq.n	80054fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	430a      	orrs	r2, r1
 80054fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005502:	f003 0320 	and.w	r3, r3, #32
 8005506:	2b00      	cmp	r3, #0
 8005508:	d00a      	beq.n	8005520 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	430a      	orrs	r2, r1
 800551e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005524:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005528:	2b00      	cmp	r3, #0
 800552a:	d01a      	beq.n	8005562 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	430a      	orrs	r2, r1
 8005540:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005546:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800554a:	d10a      	bne.n	8005562 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	430a      	orrs	r2, r1
 8005560:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005566:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00a      	beq.n	8005584 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	430a      	orrs	r2, r1
 8005582:	605a      	str	r2, [r3, #4]
  }
}
 8005584:	bf00      	nop
 8005586:	370c      	adds	r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b098      	sub	sp, #96	@ 0x60
 8005594:	af02      	add	r7, sp, #8
 8005596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80055a0:	f7fc f92a 	bl	80017f8 <HAL_GetTick>
 80055a4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 0308 	and.w	r3, r3, #8
 80055b0:	2b08      	cmp	r3, #8
 80055b2:	d12f      	bne.n	8005614 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055b4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80055b8:	9300      	str	r3, [sp, #0]
 80055ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055bc:	2200      	movs	r2, #0
 80055be:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 f88e 	bl	80056e4 <UART_WaitOnFlagUntilTimeout>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d022      	beq.n	8005614 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055d6:	e853 3f00 	ldrex	r3, [r3]
 80055da:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80055dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	461a      	mov	r2, r3
 80055ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80055ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80055ee:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80055f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80055f4:	e841 2300 	strex	r3, r2, [r1]
 80055f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80055fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d1e6      	bne.n	80055ce <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2220      	movs	r2, #32
 8005604:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005610:	2303      	movs	r3, #3
 8005612:	e063      	b.n	80056dc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 0304 	and.w	r3, r3, #4
 800561e:	2b04      	cmp	r3, #4
 8005620:	d149      	bne.n	80056b6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005622:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005626:	9300      	str	r3, [sp, #0]
 8005628:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800562a:	2200      	movs	r2, #0
 800562c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f000 f857 	bl	80056e4 <UART_WaitOnFlagUntilTimeout>
 8005636:	4603      	mov	r3, r0
 8005638:	2b00      	cmp	r3, #0
 800563a:	d03c      	beq.n	80056b6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005644:	e853 3f00 	ldrex	r3, [r3]
 8005648:	623b      	str	r3, [r7, #32]
   return(result);
 800564a:	6a3b      	ldr	r3, [r7, #32]
 800564c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005650:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	461a      	mov	r2, r3
 8005658:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800565a:	633b      	str	r3, [r7, #48]	@ 0x30
 800565c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800565e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005660:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005662:	e841 2300 	strex	r3, r2, [r1]
 8005666:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800566a:	2b00      	cmp	r3, #0
 800566c:	d1e6      	bne.n	800563c <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	3308      	adds	r3, #8
 8005674:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	e853 3f00 	ldrex	r3, [r3]
 800567c:	60fb      	str	r3, [r7, #12]
   return(result);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f023 0301 	bic.w	r3, r3, #1
 8005684:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	3308      	adds	r3, #8
 800568c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800568e:	61fa      	str	r2, [r7, #28]
 8005690:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005692:	69b9      	ldr	r1, [r7, #24]
 8005694:	69fa      	ldr	r2, [r7, #28]
 8005696:	e841 2300 	strex	r3, r2, [r1]
 800569a:	617b      	str	r3, [r7, #20]
   return(result);
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d1e5      	bne.n	800566e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2220      	movs	r2, #32
 80056a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056b2:	2303      	movs	r3, #3
 80056b4:	e012      	b.n	80056dc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2220      	movs	r2, #32
 80056ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2220      	movs	r2, #32
 80056c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80056da:	2300      	movs	r3, #0
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3758      	adds	r7, #88	@ 0x58
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}

080056e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b084      	sub	sp, #16
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	60f8      	str	r0, [r7, #12]
 80056ec:	60b9      	str	r1, [r7, #8]
 80056ee:	603b      	str	r3, [r7, #0]
 80056f0:	4613      	mov	r3, r2
 80056f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056f4:	e04f      	b.n	8005796 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80056fc:	d04b      	beq.n	8005796 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056fe:	f7fc f87b 	bl	80017f8 <HAL_GetTick>
 8005702:	4602      	mov	r2, r0
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	1ad3      	subs	r3, r2, r3
 8005708:	69ba      	ldr	r2, [r7, #24]
 800570a:	429a      	cmp	r2, r3
 800570c:	d302      	bcc.n	8005714 <UART_WaitOnFlagUntilTimeout+0x30>
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d101      	bne.n	8005718 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005714:	2303      	movs	r3, #3
 8005716:	e04e      	b.n	80057b6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 0304 	and.w	r3, r3, #4
 8005722:	2b00      	cmp	r3, #0
 8005724:	d037      	beq.n	8005796 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	2b80      	cmp	r3, #128	@ 0x80
 800572a:	d034      	beq.n	8005796 <UART_WaitOnFlagUntilTimeout+0xb2>
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	2b40      	cmp	r3, #64	@ 0x40
 8005730:	d031      	beq.n	8005796 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	69db      	ldr	r3, [r3, #28]
 8005738:	f003 0308 	and.w	r3, r3, #8
 800573c:	2b08      	cmp	r3, #8
 800573e:	d110      	bne.n	8005762 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2208      	movs	r2, #8
 8005746:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005748:	68f8      	ldr	r0, [r7, #12]
 800574a:	f000 f838 	bl	80057be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2208      	movs	r2, #8
 8005752:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2200      	movs	r2, #0
 800575a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e029      	b.n	80057b6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	69db      	ldr	r3, [r3, #28]
 8005768:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800576c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005770:	d111      	bne.n	8005796 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800577a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800577c:	68f8      	ldr	r0, [r7, #12]
 800577e:	f000 f81e 	bl	80057be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2220      	movs	r2, #32
 8005786:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e00f      	b.n	80057b6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	69da      	ldr	r2, [r3, #28]
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	4013      	ands	r3, r2
 80057a0:	68ba      	ldr	r2, [r7, #8]
 80057a2:	429a      	cmp	r2, r3
 80057a4:	bf0c      	ite	eq
 80057a6:	2301      	moveq	r3, #1
 80057a8:	2300      	movne	r3, #0
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	461a      	mov	r2, r3
 80057ae:	79fb      	ldrb	r3, [r7, #7]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d0a0      	beq.n	80056f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3710      	adds	r7, #16
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}

080057be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80057be:	b480      	push	{r7}
 80057c0:	b095      	sub	sp, #84	@ 0x54
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057ce:	e853 3f00 	ldrex	r3, [r3]
 80057d2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80057d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80057da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	461a      	mov	r2, r3
 80057e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80057e6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80057ea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80057ec:	e841 2300 	strex	r3, r2, [r1]
 80057f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80057f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d1e6      	bne.n	80057c6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	3308      	adds	r3, #8
 80057fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005800:	6a3b      	ldr	r3, [r7, #32]
 8005802:	e853 3f00 	ldrex	r3, [r3]
 8005806:	61fb      	str	r3, [r7, #28]
   return(result);
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800580e:	f023 0301 	bic.w	r3, r3, #1
 8005812:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	3308      	adds	r3, #8
 800581a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800581c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800581e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005820:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005822:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005824:	e841 2300 	strex	r3, r2, [r1]
 8005828:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800582a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800582c:	2b00      	cmp	r3, #0
 800582e:	d1e3      	bne.n	80057f8 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005834:	2b01      	cmp	r3, #1
 8005836:	d118      	bne.n	800586a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	e853 3f00 	ldrex	r3, [r3]
 8005844:	60bb      	str	r3, [r7, #8]
   return(result);
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	f023 0310 	bic.w	r3, r3, #16
 800584c:	647b      	str	r3, [r7, #68]	@ 0x44
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	461a      	mov	r2, r3
 8005854:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005856:	61bb      	str	r3, [r7, #24]
 8005858:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800585a:	6979      	ldr	r1, [r7, #20]
 800585c:	69ba      	ldr	r2, [r7, #24]
 800585e:	e841 2300 	strex	r3, r2, [r1]
 8005862:	613b      	str	r3, [r7, #16]
   return(result);
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d1e6      	bne.n	8005838 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2220      	movs	r2, #32
 800586e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800587e:	bf00      	nop
 8005880:	3754      	adds	r7, #84	@ 0x54
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr

0800588a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800588a:	b480      	push	{r7}
 800588c:	b085      	sub	sp, #20
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005898:	2b01      	cmp	r3, #1
 800589a:	d101      	bne.n	80058a0 <HAL_UARTEx_DisableFifoMode+0x16>
 800589c:	2302      	movs	r3, #2
 800589e:	e027      	b.n	80058f0 <HAL_UARTEx_DisableFifoMode+0x66>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2224      	movs	r2, #36	@ 0x24
 80058ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f022 0201 	bic.w	r2, r2, #1
 80058c6:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80058ce:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	68fa      	ldr	r2, [r7, #12]
 80058dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2220      	movs	r2, #32
 80058e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80058ee:	2300      	movs	r3, #0
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3714      	adds	r7, #20
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr

080058fc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800590c:	2b01      	cmp	r3, #1
 800590e:	d101      	bne.n	8005914 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005910:	2302      	movs	r3, #2
 8005912:	e02d      	b.n	8005970 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2224      	movs	r2, #36	@ 0x24
 8005920:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f022 0201 	bic.w	r2, r2, #1
 800593a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	683a      	ldr	r2, [r7, #0]
 800594c:	430a      	orrs	r2, r1
 800594e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f000 f84f 	bl	80059f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	68fa      	ldr	r2, [r7, #12]
 800595c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2220      	movs	r2, #32
 8005962:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800596e:	2300      	movs	r3, #0
}
 8005970:	4618      	mov	r0, r3
 8005972:	3710      	adds	r7, #16
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005988:	2b01      	cmp	r3, #1
 800598a:	d101      	bne.n	8005990 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800598c:	2302      	movs	r3, #2
 800598e:	e02d      	b.n	80059ec <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2224      	movs	r2, #36	@ 0x24
 800599c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f022 0201 	bic.w	r2, r2, #1
 80059b6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	683a      	ldr	r2, [r7, #0]
 80059c8:	430a      	orrs	r2, r1
 80059ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f000 f811 	bl	80059f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2220      	movs	r2, #32
 80059de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80059ea:	2300      	movs	r3, #0
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3710      	adds	r7, #16
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b085      	sub	sp, #20
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d108      	bne.n	8005a16 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005a14:	e031      	b.n	8005a7a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005a16:	2308      	movs	r3, #8
 8005a18:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005a1a:	2308      	movs	r3, #8
 8005a1c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	0e5b      	lsrs	r3, r3, #25
 8005a26:	b2db      	uxtb	r3, r3
 8005a28:	f003 0307 	and.w	r3, r3, #7
 8005a2c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	0f5b      	lsrs	r3, r3, #29
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	f003 0307 	and.w	r3, r3, #7
 8005a3c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005a3e:	7bbb      	ldrb	r3, [r7, #14]
 8005a40:	7b3a      	ldrb	r2, [r7, #12]
 8005a42:	4911      	ldr	r1, [pc, #68]	@ (8005a88 <UARTEx_SetNbDataToProcess+0x94>)
 8005a44:	5c8a      	ldrb	r2, [r1, r2]
 8005a46:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005a4a:	7b3a      	ldrb	r2, [r7, #12]
 8005a4c:	490f      	ldr	r1, [pc, #60]	@ (8005a8c <UARTEx_SetNbDataToProcess+0x98>)
 8005a4e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005a50:	fb93 f3f2 	sdiv	r3, r3, r2
 8005a54:	b29a      	uxth	r2, r3
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005a5c:	7bfb      	ldrb	r3, [r7, #15]
 8005a5e:	7b7a      	ldrb	r2, [r7, #13]
 8005a60:	4909      	ldr	r1, [pc, #36]	@ (8005a88 <UARTEx_SetNbDataToProcess+0x94>)
 8005a62:	5c8a      	ldrb	r2, [r1, r2]
 8005a64:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005a68:	7b7a      	ldrb	r2, [r7, #13]
 8005a6a:	4908      	ldr	r1, [pc, #32]	@ (8005a8c <UARTEx_SetNbDataToProcess+0x98>)
 8005a6c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005a6e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005a72:	b29a      	uxth	r2, r3
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005a7a:	bf00      	nop
 8005a7c:	3714      	adds	r7, #20
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr
 8005a86:	bf00      	nop
 8005a88:	08005b60 	.word	0x08005b60
 8005a8c:	08005b68 	.word	0x08005b68

08005a90 <memset>:
 8005a90:	4402      	add	r2, r0
 8005a92:	4603      	mov	r3, r0
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d100      	bne.n	8005a9a <memset+0xa>
 8005a98:	4770      	bx	lr
 8005a9a:	f803 1b01 	strb.w	r1, [r3], #1
 8005a9e:	e7f9      	b.n	8005a94 <memset+0x4>

08005aa0 <__libc_init_array>:
 8005aa0:	b570      	push	{r4, r5, r6, lr}
 8005aa2:	4d0d      	ldr	r5, [pc, #52]	@ (8005ad8 <__libc_init_array+0x38>)
 8005aa4:	4c0d      	ldr	r4, [pc, #52]	@ (8005adc <__libc_init_array+0x3c>)
 8005aa6:	1b64      	subs	r4, r4, r5
 8005aa8:	10a4      	asrs	r4, r4, #2
 8005aaa:	2600      	movs	r6, #0
 8005aac:	42a6      	cmp	r6, r4
 8005aae:	d109      	bne.n	8005ac4 <__libc_init_array+0x24>
 8005ab0:	4d0b      	ldr	r5, [pc, #44]	@ (8005ae0 <__libc_init_array+0x40>)
 8005ab2:	4c0c      	ldr	r4, [pc, #48]	@ (8005ae4 <__libc_init_array+0x44>)
 8005ab4:	f000 f818 	bl	8005ae8 <_init>
 8005ab8:	1b64      	subs	r4, r4, r5
 8005aba:	10a4      	asrs	r4, r4, #2
 8005abc:	2600      	movs	r6, #0
 8005abe:	42a6      	cmp	r6, r4
 8005ac0:	d105      	bne.n	8005ace <__libc_init_array+0x2e>
 8005ac2:	bd70      	pop	{r4, r5, r6, pc}
 8005ac4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ac8:	4798      	blx	r3
 8005aca:	3601      	adds	r6, #1
 8005acc:	e7ee      	b.n	8005aac <__libc_init_array+0xc>
 8005ace:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ad2:	4798      	blx	r3
 8005ad4:	3601      	adds	r6, #1
 8005ad6:	e7f2      	b.n	8005abe <__libc_init_array+0x1e>
 8005ad8:	08005b78 	.word	0x08005b78
 8005adc:	08005b78 	.word	0x08005b78
 8005ae0:	08005b78 	.word	0x08005b78
 8005ae4:	08005b7c 	.word	0x08005b7c

08005ae8 <_init>:
 8005ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aea:	bf00      	nop
 8005aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aee:	bc08      	pop	{r3}
 8005af0:	469e      	mov	lr, r3
 8005af2:	4770      	bx	lr

08005af4 <_fini>:
 8005af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005af6:	bf00      	nop
 8005af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005afa:	bc08      	pop	{r3}
 8005afc:	469e      	mov	lr, r3
 8005afe:	4770      	bx	lr
