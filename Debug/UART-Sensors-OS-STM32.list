
UART-Sensors-OS-STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a780  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000508  0800a940  0800a940  0000b940  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae48  0800ae48  0000c258  2**0
                  CONTENTS
  4 .ARM          00000008  0800ae48  0800ae48  0000be48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ae50  0800ae50  0000c258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae50  0800ae50  0000be50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ae54  0800ae54  0000be54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000258  20000000  0800ae58  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001290  20000258  0800b0b0  0000c258  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200014e8  0800b0b0  0000c4e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c258  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e8fa  00000000  00000000  0000c288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000045f0  00000000  00000000  0002ab82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b58  00000000  00000000  0002f178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000151d  00000000  00000000  00030cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ff8c  00000000  00000000  000321ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000223e7  00000000  00000000  00062179  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011d947  00000000  00000000  00084560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a1ea7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008238  00000000  00000000  001a1eec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  001aa124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000258 	.word	0x20000258
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800a928 	.word	0x0800a928

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000025c 	.word	0x2000025c
 80001fc:	0800a928 	.word	0x0800a928

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bec:	f000 b96a 	b.w	8000ec4 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	460c      	mov	r4, r1
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d14e      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c14:	4694      	mov	ip, r2
 8000c16:	458c      	cmp	ip, r1
 8000c18:	4686      	mov	lr, r0
 8000c1a:	fab2 f282 	clz	r2, r2
 8000c1e:	d962      	bls.n	8000ce6 <__udivmoddi4+0xde>
 8000c20:	b14a      	cbz	r2, 8000c36 <__udivmoddi4+0x2e>
 8000c22:	f1c2 0320 	rsb	r3, r2, #32
 8000c26:	4091      	lsls	r1, r2
 8000c28:	fa20 f303 	lsr.w	r3, r0, r3
 8000c2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c30:	4319      	orrs	r1, r3
 8000c32:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c3a:	fa1f f68c 	uxth.w	r6, ip
 8000c3e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c42:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c46:	fb07 1114 	mls	r1, r7, r4, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb04 f106 	mul.w	r1, r4, r6
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c5e:	f080 8112 	bcs.w	8000e86 <__udivmoddi4+0x27e>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 810f 	bls.w	8000e86 <__udivmoddi4+0x27e>
 8000c68:	3c02      	subs	r4, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a59      	subs	r1, r3, r1
 8000c6e:	fa1f f38e 	uxth.w	r3, lr
 8000c72:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c76:	fb07 1110 	mls	r1, r7, r0, r1
 8000c7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7e:	fb00 f606 	mul.w	r6, r0, r6
 8000c82:	429e      	cmp	r6, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x94>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c8e:	f080 80fc 	bcs.w	8000e8a <__udivmoddi4+0x282>
 8000c92:	429e      	cmp	r6, r3
 8000c94:	f240 80f9 	bls.w	8000e8a <__udivmoddi4+0x282>
 8000c98:	4463      	add	r3, ip
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	1b9b      	subs	r3, r3, r6
 8000c9e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	b11d      	cbz	r5, 8000cae <__udivmoddi4+0xa6>
 8000ca6:	40d3      	lsrs	r3, r2
 8000ca8:	2200      	movs	r2, #0
 8000caa:	e9c5 3200 	strd	r3, r2, [r5]
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d905      	bls.n	8000cc2 <__udivmoddi4+0xba>
 8000cb6:	b10d      	cbz	r5, 8000cbc <__udivmoddi4+0xb4>
 8000cb8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	e7f5      	b.n	8000cae <__udivmoddi4+0xa6>
 8000cc2:	fab3 f183 	clz	r1, r3
 8000cc6:	2900      	cmp	r1, #0
 8000cc8:	d146      	bne.n	8000d58 <__udivmoddi4+0x150>
 8000cca:	42a3      	cmp	r3, r4
 8000ccc:	d302      	bcc.n	8000cd4 <__udivmoddi4+0xcc>
 8000cce:	4290      	cmp	r0, r2
 8000cd0:	f0c0 80f0 	bcc.w	8000eb4 <__udivmoddi4+0x2ac>
 8000cd4:	1a86      	subs	r6, r0, r2
 8000cd6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cda:	2001      	movs	r0, #1
 8000cdc:	2d00      	cmp	r5, #0
 8000cde:	d0e6      	beq.n	8000cae <__udivmoddi4+0xa6>
 8000ce0:	e9c5 6300 	strd	r6, r3, [r5]
 8000ce4:	e7e3      	b.n	8000cae <__udivmoddi4+0xa6>
 8000ce6:	2a00      	cmp	r2, #0
 8000ce8:	f040 8090 	bne.w	8000e0c <__udivmoddi4+0x204>
 8000cec:	eba1 040c 	sub.w	r4, r1, ip
 8000cf0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf4:	fa1f f78c 	uxth.w	r7, ip
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cfe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d02:	fb08 4416 	mls	r4, r8, r6, r4
 8000d06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d0a:	fb07 f006 	mul.w	r0, r7, r6
 8000d0e:	4298      	cmp	r0, r3
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x11c>
 8000d12:	eb1c 0303 	adds.w	r3, ip, r3
 8000d16:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x11a>
 8000d1c:	4298      	cmp	r0, r3
 8000d1e:	f200 80cd 	bhi.w	8000ebc <__udivmoddi4+0x2b4>
 8000d22:	4626      	mov	r6, r4
 8000d24:	1a1c      	subs	r4, r3, r0
 8000d26:	fa1f f38e 	uxth.w	r3, lr
 8000d2a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d2e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d36:	fb00 f707 	mul.w	r7, r0, r7
 8000d3a:	429f      	cmp	r7, r3
 8000d3c:	d908      	bls.n	8000d50 <__udivmoddi4+0x148>
 8000d3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d42:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d46:	d202      	bcs.n	8000d4e <__udivmoddi4+0x146>
 8000d48:	429f      	cmp	r7, r3
 8000d4a:	f200 80b0 	bhi.w	8000eae <__udivmoddi4+0x2a6>
 8000d4e:	4620      	mov	r0, r4
 8000d50:	1bdb      	subs	r3, r3, r7
 8000d52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d56:	e7a5      	b.n	8000ca4 <__udivmoddi4+0x9c>
 8000d58:	f1c1 0620 	rsb	r6, r1, #32
 8000d5c:	408b      	lsls	r3, r1
 8000d5e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d62:	431f      	orrs	r7, r3
 8000d64:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d68:	fa04 f301 	lsl.w	r3, r4, r1
 8000d6c:	ea43 030c 	orr.w	r3, r3, ip
 8000d70:	40f4      	lsrs	r4, r6
 8000d72:	fa00 f801 	lsl.w	r8, r0, r1
 8000d76:	0c38      	lsrs	r0, r7, #16
 8000d78:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d7c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d80:	fa1f fc87 	uxth.w	ip, r7
 8000d84:	fb00 441e 	mls	r4, r0, lr, r4
 8000d88:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d8c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d90:	45a1      	cmp	r9, r4
 8000d92:	fa02 f201 	lsl.w	r2, r2, r1
 8000d96:	d90a      	bls.n	8000dae <__udivmoddi4+0x1a6>
 8000d98:	193c      	adds	r4, r7, r4
 8000d9a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000d9e:	f080 8084 	bcs.w	8000eaa <__udivmoddi4+0x2a2>
 8000da2:	45a1      	cmp	r9, r4
 8000da4:	f240 8081 	bls.w	8000eaa <__udivmoddi4+0x2a2>
 8000da8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dac:	443c      	add	r4, r7
 8000dae:	eba4 0409 	sub.w	r4, r4, r9
 8000db2:	fa1f f983 	uxth.w	r9, r3
 8000db6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dba:	fb00 4413 	mls	r4, r0, r3, r4
 8000dbe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dc2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dc6:	45a4      	cmp	ip, r4
 8000dc8:	d907      	bls.n	8000dda <__udivmoddi4+0x1d2>
 8000dca:	193c      	adds	r4, r7, r4
 8000dcc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000dd0:	d267      	bcs.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd2:	45a4      	cmp	ip, r4
 8000dd4:	d965      	bls.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd6:	3b02      	subs	r3, #2
 8000dd8:	443c      	add	r4, r7
 8000dda:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dde:	fba0 9302 	umull	r9, r3, r0, r2
 8000de2:	eba4 040c 	sub.w	r4, r4, ip
 8000de6:	429c      	cmp	r4, r3
 8000de8:	46ce      	mov	lr, r9
 8000dea:	469c      	mov	ip, r3
 8000dec:	d351      	bcc.n	8000e92 <__udivmoddi4+0x28a>
 8000dee:	d04e      	beq.n	8000e8e <__udivmoddi4+0x286>
 8000df0:	b155      	cbz	r5, 8000e08 <__udivmoddi4+0x200>
 8000df2:	ebb8 030e 	subs.w	r3, r8, lr
 8000df6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dfa:	fa04 f606 	lsl.w	r6, r4, r6
 8000dfe:	40cb      	lsrs	r3, r1
 8000e00:	431e      	orrs	r6, r3
 8000e02:	40cc      	lsrs	r4, r1
 8000e04:	e9c5 6400 	strd	r6, r4, [r5]
 8000e08:	2100      	movs	r1, #0
 8000e0a:	e750      	b.n	8000cae <__udivmoddi4+0xa6>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f103 	lsr.w	r1, r0, r3
 8000e14:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e18:	fa24 f303 	lsr.w	r3, r4, r3
 8000e1c:	4094      	lsls	r4, r2
 8000e1e:	430c      	orrs	r4, r1
 8000e20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e24:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e28:	fa1f f78c 	uxth.w	r7, ip
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3110 	mls	r1, r8, r0, r3
 8000e34:	0c23      	lsrs	r3, r4, #16
 8000e36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e3a:	fb00 f107 	mul.w	r1, r0, r7
 8000e3e:	4299      	cmp	r1, r3
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x24c>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e4a:	d22c      	bcs.n	8000ea6 <__udivmoddi4+0x29e>
 8000e4c:	4299      	cmp	r1, r3
 8000e4e:	d92a      	bls.n	8000ea6 <__udivmoddi4+0x29e>
 8000e50:	3802      	subs	r0, #2
 8000e52:	4463      	add	r3, ip
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b2a4      	uxth	r4, r4
 8000e58:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e5c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e64:	fb01 f307 	mul.w	r3, r1, r7
 8000e68:	42a3      	cmp	r3, r4
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x276>
 8000e6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e70:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e74:	d213      	bcs.n	8000e9e <__udivmoddi4+0x296>
 8000e76:	42a3      	cmp	r3, r4
 8000e78:	d911      	bls.n	8000e9e <__udivmoddi4+0x296>
 8000e7a:	3902      	subs	r1, #2
 8000e7c:	4464      	add	r4, ip
 8000e7e:	1ae4      	subs	r4, r4, r3
 8000e80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e84:	e739      	b.n	8000cfa <__udivmoddi4+0xf2>
 8000e86:	4604      	mov	r4, r0
 8000e88:	e6f0      	b.n	8000c6c <__udivmoddi4+0x64>
 8000e8a:	4608      	mov	r0, r1
 8000e8c:	e706      	b.n	8000c9c <__udivmoddi4+0x94>
 8000e8e:	45c8      	cmp	r8, r9
 8000e90:	d2ae      	bcs.n	8000df0 <__udivmoddi4+0x1e8>
 8000e92:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e96:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e9a:	3801      	subs	r0, #1
 8000e9c:	e7a8      	b.n	8000df0 <__udivmoddi4+0x1e8>
 8000e9e:	4631      	mov	r1, r6
 8000ea0:	e7ed      	b.n	8000e7e <__udivmoddi4+0x276>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	e799      	b.n	8000dda <__udivmoddi4+0x1d2>
 8000ea6:	4630      	mov	r0, r6
 8000ea8:	e7d4      	b.n	8000e54 <__udivmoddi4+0x24c>
 8000eaa:	46d6      	mov	lr, sl
 8000eac:	e77f      	b.n	8000dae <__udivmoddi4+0x1a6>
 8000eae:	4463      	add	r3, ip
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	e74d      	b.n	8000d50 <__udivmoddi4+0x148>
 8000eb4:	4606      	mov	r6, r0
 8000eb6:	4623      	mov	r3, r4
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e70f      	b.n	8000cdc <__udivmoddi4+0xd4>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	4463      	add	r3, ip
 8000ec0:	e730      	b.n	8000d24 <__udivmoddi4+0x11c>
 8000ec2:	bf00      	nop

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	4a07      	ldr	r2, [pc, #28]	@ (8000ef4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000ed8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	4a06      	ldr	r2, [pc, #24]	@ (8000ef8 <vApplicationGetIdleTaskMemory+0x30>)
 8000ede:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2280      	movs	r2, #128	@ 0x80
 8000ee4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000ee6:	bf00      	nop
 8000ee8:	3714      	adds	r7, #20
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	20000274 	.word	0x20000274
 8000ef8:	200002c8 	.word	0x200002c8

08000efc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000efc:	b5b0      	push	{r4, r5, r7, lr}
 8000efe:	b096      	sub	sp, #88	@ 0x58
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f02:	f001 fb61 	bl	80025c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f06:	f000 f85b 	bl	8000fc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f0a:	f000 f937 	bl	800117c <MX_GPIO_Init>
  MX_I2C2_Init();
 8000f0e:	f000 f8a9 	bl	8001064 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8000f12:	f000 f8e7 	bl	80010e4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* Initialize the sensor peripherals */

  BSP_HSENSOR_Init();
 8000f16:	f000 fc63 	bl	80017e0 <BSP_HSENSOR_Init>
  BSP_MAGNETO_Init();
 8000f1a:	f000 fc8f 	bl	800183c <BSP_MAGNETO_Init>
  BSP_ACCELERO_Init();
 8000f1e:	f000 fc09 	bl	8001734 <BSP_ACCELERO_Init>
  BSP_PSENSOR_Init();
 8000f22:	f000 fccf 	bl	80018c4 <BSP_PSENSOR_Init>

  mode = 0;
 8000f26:	4b1f      	ldr	r3, [pc, #124]	@ (8000fa4 <main+0xa8>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of readSensor */
  osThreadDef(readSensor, StartDefaultTask, osPriorityNormal, 0, 256);
 8000f2c:	4b1e      	ldr	r3, [pc, #120]	@ (8000fa8 <main+0xac>)
 8000f2e:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000f32:	461d      	mov	r5, r3
 8000f34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f38:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f3c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readSensorHandle = osThreadCreate(osThread(readSensor), NULL);
 8000f40:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000f44:	2100      	movs	r1, #0
 8000f46:	4618      	mov	r0, r3
 8000f48:	f005 fc25 	bl	8006796 <osThreadCreate>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	4a17      	ldr	r2, [pc, #92]	@ (8000fac <main+0xb0>)
 8000f50:	6013      	str	r3, [r2, #0]

  /* definition and creation of buttonCheck */
  osThreadDef(buttonCheck, StartTask02, osPriorityHigh, 0, 128);
 8000f52:	4b17      	ldr	r3, [pc, #92]	@ (8000fb0 <main+0xb4>)
 8000f54:	f107 0420 	add.w	r4, r7, #32
 8000f58:	461d      	mov	r5, r3
 8000f5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f5e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f62:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  buttonCheckHandle = osThreadCreate(osThread(buttonCheck), NULL);
 8000f66:	f107 0320 	add.w	r3, r7, #32
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f005 fc12 	bl	8006796 <osThreadCreate>
 8000f72:	4603      	mov	r3, r0
 8000f74:	4a0f      	ldr	r2, [pc, #60]	@ (8000fb4 <main+0xb8>)
 8000f76:	6013      	str	r3, [r2, #0]

  /* definition and creation of printUART */
  osThreadDef(printUART, StartTask03, osPriorityLow, 0, 256);
 8000f78:	4b0f      	ldr	r3, [pc, #60]	@ (8000fb8 <main+0xbc>)
 8000f7a:	1d3c      	adds	r4, r7, #4
 8000f7c:	461d      	mov	r5, r3
 8000f7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f82:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f86:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  printUARTHandle = osThreadCreate(osThread(printUART), NULL);
 8000f8a:	1d3b      	adds	r3, r7, #4
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f005 fc01 	bl	8006796 <osThreadCreate>
 8000f94:	4603      	mov	r3, r0
 8000f96:	4a09      	ldr	r2, [pc, #36]	@ (8000fbc <main+0xc0>)
 8000f98:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000f9a:	f005 fbf5 	bl	8006788 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f9e:	bf00      	nop
 8000fa0:	e7fd      	b.n	8000f9e <main+0xa2>
 8000fa2:	bf00      	nop
 8000fa4:	200005d4 	.word	0x200005d4
 8000fa8:	0800a94c 	.word	0x0800a94c
 8000fac:	200005b0 	.word	0x200005b0
 8000fb0:	0800a974 	.word	0x0800a974
 8000fb4:	200005b4 	.word	0x200005b4
 8000fb8:	0800a99c 	.word	0x0800a99c
 8000fbc:	200005b8 	.word	0x200005b8

08000fc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b096      	sub	sp, #88	@ 0x58
 8000fc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fc6:	f107 0314 	add.w	r3, r7, #20
 8000fca:	2244      	movs	r2, #68	@ 0x44
 8000fcc:	2100      	movs	r1, #0
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f007 fb9c 	bl	800870c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fd4:	463b      	mov	r3, r7
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	605a      	str	r2, [r3, #4]
 8000fdc:	609a      	str	r2, [r3, #8]
 8000fde:	60da      	str	r2, [r3, #12]
 8000fe0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000fe2:	2000      	movs	r0, #0
 8000fe4:	f002 fd30 	bl	8003a48 <HAL_PWREx_ControlVoltageScaling>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000fee:	f000 fa4b 	bl	8001488 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000ff2:	2310      	movs	r3, #16
 8000ff4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000ffe:	2360      	movs	r3, #96	@ 0x60
 8001000:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001002:	2302      	movs	r3, #2
 8001004:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001006:	2301      	movs	r3, #1
 8001008:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800100a:	2301      	movs	r3, #1
 800100c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 800100e:	233c      	movs	r3, #60	@ 0x3c
 8001010:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001012:	2302      	movs	r3, #2
 8001014:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001016:	2302      	movs	r3, #2
 8001018:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800101a:	2302      	movs	r3, #2
 800101c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800101e:	f107 0314 	add.w	r3, r7, #20
 8001022:	4618      	mov	r0, r3
 8001024:	f002 fdb4 	bl	8003b90 <HAL_RCC_OscConfig>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800102e:	f000 fa2b 	bl	8001488 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001032:	230f      	movs	r3, #15
 8001034:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001036:	2303      	movs	r3, #3
 8001038:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800103a:	2300      	movs	r3, #0
 800103c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800103e:	2300      	movs	r3, #0
 8001040:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001042:	2300      	movs	r3, #0
 8001044:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001046:	463b      	mov	r3, r7
 8001048:	2105      	movs	r1, #5
 800104a:	4618      	mov	r0, r3
 800104c:	f003 f9ba 	bl	80043c4 <HAL_RCC_ClockConfig>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001056:	f000 fa17 	bl	8001488 <Error_Handler>
  }
}
 800105a:	bf00      	nop
 800105c:	3758      	adds	r7, #88	@ 0x58
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
	...

08001064 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001068:	4b1b      	ldr	r3, [pc, #108]	@ (80010d8 <MX_I2C2_Init+0x74>)
 800106a:	4a1c      	ldr	r2, [pc, #112]	@ (80010dc <MX_I2C2_Init+0x78>)
 800106c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30A175AB;
 800106e:	4b1a      	ldr	r3, [pc, #104]	@ (80010d8 <MX_I2C2_Init+0x74>)
 8001070:	4a1b      	ldr	r2, [pc, #108]	@ (80010e0 <MX_I2C2_Init+0x7c>)
 8001072:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001074:	4b18      	ldr	r3, [pc, #96]	@ (80010d8 <MX_I2C2_Init+0x74>)
 8001076:	2200      	movs	r2, #0
 8001078:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800107a:	4b17      	ldr	r3, [pc, #92]	@ (80010d8 <MX_I2C2_Init+0x74>)
 800107c:	2201      	movs	r2, #1
 800107e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001080:	4b15      	ldr	r3, [pc, #84]	@ (80010d8 <MX_I2C2_Init+0x74>)
 8001082:	2200      	movs	r2, #0
 8001084:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001086:	4b14      	ldr	r3, [pc, #80]	@ (80010d8 <MX_I2C2_Init+0x74>)
 8001088:	2200      	movs	r2, #0
 800108a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800108c:	4b12      	ldr	r3, [pc, #72]	@ (80010d8 <MX_I2C2_Init+0x74>)
 800108e:	2200      	movs	r2, #0
 8001090:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001092:	4b11      	ldr	r3, [pc, #68]	@ (80010d8 <MX_I2C2_Init+0x74>)
 8001094:	2200      	movs	r2, #0
 8001096:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001098:	4b0f      	ldr	r3, [pc, #60]	@ (80010d8 <MX_I2C2_Init+0x74>)
 800109a:	2200      	movs	r2, #0
 800109c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800109e:	480e      	ldr	r0, [pc, #56]	@ (80010d8 <MX_I2C2_Init+0x74>)
 80010a0:	f001 fe60 	bl	8002d64 <HAL_I2C_Init>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80010aa:	f000 f9ed 	bl	8001488 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010ae:	2100      	movs	r1, #0
 80010b0:	4809      	ldr	r0, [pc, #36]	@ (80010d8 <MX_I2C2_Init+0x74>)
 80010b2:	f002 fc11 	bl	80038d8 <HAL_I2CEx_ConfigAnalogFilter>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80010bc:	f000 f9e4 	bl	8001488 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80010c0:	2100      	movs	r1, #0
 80010c2:	4805      	ldr	r0, [pc, #20]	@ (80010d8 <MX_I2C2_Init+0x74>)
 80010c4:	f002 fc53 	bl	800396e <HAL_I2CEx_ConfigDigitalFilter>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80010ce:	f000 f9db 	bl	8001488 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	200004c8 	.word	0x200004c8
 80010dc:	40005800 	.word	0x40005800
 80010e0:	30a175ab 	.word	0x30a175ab

080010e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010e8:	4b22      	ldr	r3, [pc, #136]	@ (8001174 <MX_USART1_UART_Init+0x90>)
 80010ea:	4a23      	ldr	r2, [pc, #140]	@ (8001178 <MX_USART1_UART_Init+0x94>)
 80010ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010ee:	4b21      	ldr	r3, [pc, #132]	@ (8001174 <MX_USART1_UART_Init+0x90>)
 80010f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001174 <MX_USART1_UART_Init+0x90>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001174 <MX_USART1_UART_Init+0x90>)
 80010fe:	2200      	movs	r2, #0
 8001100:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001102:	4b1c      	ldr	r3, [pc, #112]	@ (8001174 <MX_USART1_UART_Init+0x90>)
 8001104:	2200      	movs	r2, #0
 8001106:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001108:	4b1a      	ldr	r3, [pc, #104]	@ (8001174 <MX_USART1_UART_Init+0x90>)
 800110a:	220c      	movs	r2, #12
 800110c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800110e:	4b19      	ldr	r3, [pc, #100]	@ (8001174 <MX_USART1_UART_Init+0x90>)
 8001110:	2200      	movs	r2, #0
 8001112:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001114:	4b17      	ldr	r3, [pc, #92]	@ (8001174 <MX_USART1_UART_Init+0x90>)
 8001116:	2200      	movs	r2, #0
 8001118:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800111a:	4b16      	ldr	r3, [pc, #88]	@ (8001174 <MX_USART1_UART_Init+0x90>)
 800111c:	2200      	movs	r2, #0
 800111e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001120:	4b14      	ldr	r3, [pc, #80]	@ (8001174 <MX_USART1_UART_Init+0x90>)
 8001122:	2200      	movs	r2, #0
 8001124:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001126:	4b13      	ldr	r3, [pc, #76]	@ (8001174 <MX_USART1_UART_Init+0x90>)
 8001128:	2200      	movs	r2, #0
 800112a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800112c:	4811      	ldr	r0, [pc, #68]	@ (8001174 <MX_USART1_UART_Init+0x90>)
 800112e:	f004 fc17 	bl	8005960 <HAL_UART_Init>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001138:	f000 f9a6 	bl	8001488 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800113c:	2100      	movs	r1, #0
 800113e:	480d      	ldr	r0, [pc, #52]	@ (8001174 <MX_USART1_UART_Init+0x90>)
 8001140:	f005 fa40 	bl	80065c4 <HAL_UARTEx_SetTxFifoThreshold>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800114a:	f000 f99d 	bl	8001488 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800114e:	2100      	movs	r1, #0
 8001150:	4808      	ldr	r0, [pc, #32]	@ (8001174 <MX_USART1_UART_Init+0x90>)
 8001152:	f005 fa75 	bl	8006640 <HAL_UARTEx_SetRxFifoThreshold>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800115c:	f000 f994 	bl	8001488 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001160:	4804      	ldr	r0, [pc, #16]	@ (8001174 <MX_USART1_UART_Init+0x90>)
 8001162:	f005 f9f6 	bl	8006552 <HAL_UARTEx_DisableFifoMode>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800116c:	f000 f98c 	bl	8001488 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001170:	bf00      	nop
 8001172:	bd80      	pop	{r7, pc}
 8001174:	2000051c 	.word	0x2000051c
 8001178:	40013800 	.word	0x40013800

0800117c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b088      	sub	sp, #32
 8001180:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001182:	f107 030c 	add.w	r3, r7, #12
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]
 800118c:	609a      	str	r2, [r3, #8]
 800118e:	60da      	str	r2, [r3, #12]
 8001190:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001192:	4b1f      	ldr	r3, [pc, #124]	@ (8001210 <MX_GPIO_Init+0x94>)
 8001194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001196:	4a1e      	ldr	r2, [pc, #120]	@ (8001210 <MX_GPIO_Init+0x94>)
 8001198:	f043 0304 	orr.w	r3, r3, #4
 800119c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800119e:	4b1c      	ldr	r3, [pc, #112]	@ (8001210 <MX_GPIO_Init+0x94>)
 80011a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a2:	f003 0304 	and.w	r3, r3, #4
 80011a6:	60bb      	str	r3, [r7, #8]
 80011a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011aa:	4b19      	ldr	r3, [pc, #100]	@ (8001210 <MX_GPIO_Init+0x94>)
 80011ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ae:	4a18      	ldr	r2, [pc, #96]	@ (8001210 <MX_GPIO_Init+0x94>)
 80011b0:	f043 0302 	orr.w	r3, r3, #2
 80011b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011b6:	4b16      	ldr	r3, [pc, #88]	@ (8001210 <MX_GPIO_Init+0x94>)
 80011b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	607b      	str	r3, [r7, #4]
 80011c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(myLed1_GPIO_Port, myLed1_Pin, GPIO_PIN_RESET);
 80011c2:	2200      	movs	r2, #0
 80011c4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80011c8:	4812      	ldr	r0, [pc, #72]	@ (8001214 <MX_GPIO_Init+0x98>)
 80011ca:	f001 fdb3 	bl	8002d34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : myButton_Pin */
  GPIO_InitStruct.Pin = myButton_Pin;
 80011ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011d4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80011d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(myButton_GPIO_Port, &GPIO_InitStruct);
 80011de:	f107 030c 	add.w	r3, r7, #12
 80011e2:	4619      	mov	r1, r3
 80011e4:	480c      	ldr	r0, [pc, #48]	@ (8001218 <MX_GPIO_Init+0x9c>)
 80011e6:	f001 fb09 	bl	80027fc <HAL_GPIO_Init>

  /*Configure GPIO pin : myLed1_Pin */
  GPIO_InitStruct.Pin = myLed1_Pin;
 80011ea:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80011ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f0:	2301      	movs	r3, #1
 80011f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f8:	2300      	movs	r3, #0
 80011fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(myLed1_GPIO_Port, &GPIO_InitStruct);
 80011fc:	f107 030c 	add.w	r3, r7, #12
 8001200:	4619      	mov	r1, r3
 8001202:	4804      	ldr	r0, [pc, #16]	@ (8001214 <MX_GPIO_Init+0x98>)
 8001204:	f001 fafa 	bl	80027fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001208:	bf00      	nop
 800120a:	3720      	adds	r7, #32
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	40021000 	.word	0x40021000
 8001214:	48000400 	.word	0x48000400
 8001218:	48000800 	.word	0x48000800

0800121c <printOne>:

/* USER CODE BEGIN 4 */

void printOne(char* string, float data) {
 800121c:	b580      	push	{r7, lr}
 800121e:	b0a2      	sub	sp, #136	@ 0x88
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	ed87 0a00 	vstr	s0, [r7]
	char output[120];
	sprintf(output, string, (int) data);
 8001228:	edd7 7a00 	vldr	s15, [r7]
 800122c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001230:	f107 030c 	add.w	r3, r7, #12
 8001234:	ee17 2a90 	vmov	r2, s15
 8001238:	6879      	ldr	r1, [r7, #4]
 800123a:	4618      	mov	r0, r3
 800123c:	f007 f972 	bl	8008524 <siprintf>
	uint16_t len = strlen(output);
 8001240:	f107 030c 	add.w	r3, r7, #12
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff f82b 	bl	80002a0 <strlen>
 800124a:	4603      	mov	r3, r0
 800124c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	HAL_UART_Transmit(&huart1, (uint8_t *)output, len, 120);
 8001250:	f8b7 2086 	ldrh.w	r2, [r7, #134]	@ 0x86
 8001254:	f107 010c 	add.w	r1, r7, #12
 8001258:	2378      	movs	r3, #120	@ 0x78
 800125a:	4803      	ldr	r0, [pc, #12]	@ (8001268 <printOne+0x4c>)
 800125c:	f004 fbd0 	bl	8005a00 <HAL_UART_Transmit>
}
 8001260:	bf00      	nop
 8001262:	3788      	adds	r7, #136	@ 0x88
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	2000051c 	.word	0x2000051c

0800126c <printThree>:

void printThree(char* string, int data1, int data2, int data3) {
 800126c:	b580      	push	{r7, lr}
 800126e:	b096      	sub	sp, #88	@ 0x58
 8001270:	af02      	add	r7, sp, #8
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	607a      	str	r2, [r7, #4]
 8001278:	603b      	str	r3, [r7, #0]
	char output[60];
	sprintf(output, string, data1, data2, data3);
 800127a:	f107 0010 	add.w	r0, r7, #16
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	9300      	str	r3, [sp, #0]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	68ba      	ldr	r2, [r7, #8]
 8001286:	68f9      	ldr	r1, [r7, #12]
 8001288:	f007 f94c 	bl	8008524 <siprintf>
	uint16_t len = strlen(output);
 800128c:	f107 0310 	add.w	r3, r7, #16
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff f805 	bl	80002a0 <strlen>
 8001296:	4603      	mov	r3, r0
 8001298:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	HAL_UART_Transmit(&huart1, (uint8_t *)output, len, 120);
 800129c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80012a0:	f107 0110 	add.w	r1, r7, #16
 80012a4:	2378      	movs	r3, #120	@ 0x78
 80012a6:	4803      	ldr	r0, [pc, #12]	@ (80012b4 <printThree+0x48>)
 80012a8:	f004 fbaa 	bl	8005a00 <HAL_UART_Transmit>
}
 80012ac:	bf00      	nop
 80012ae:	3750      	adds	r7, #80	@ 0x50
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	2000051c 	.word	0x2000051c

080012b8 <readSensors>:

/* Read sensor and print values */
void readSensors() {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
	if (mode == 0) {
 80012bc:	4b12      	ldr	r3, [pc, #72]	@ (8001308 <readSensors+0x50>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d107      	bne.n	80012d4 <readSensors+0x1c>
		humidity = BSP_HSENSOR_ReadHumidity();
 80012c4:	f000 faac 	bl	8001820 <BSP_HSENSOR_ReadHumidity>
 80012c8:	eef0 7a40 	vmov.f32	s15, s0
 80012cc:	4b0f      	ldr	r3, [pc, #60]	@ (800130c <readSensors+0x54>)
 80012ce:	edc3 7a00 	vstr	s15, [r3]
		BSP_ACCELERO_AccGetXYZ(acceleration);
	}
	else {
		pressure = BSP_PSENSOR_ReadPressure();
	}
}
 80012d2:	e016      	b.n	8001302 <readSensors+0x4a>
	else if (mode == 1) {
 80012d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001308 <readSensors+0x50>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d103      	bne.n	80012e4 <readSensors+0x2c>
		BSP_MAGNETO_GetXYZ(magneticfield);
 80012dc:	480c      	ldr	r0, [pc, #48]	@ (8001310 <readSensors+0x58>)
 80012de:	f000 fad9 	bl	8001894 <BSP_MAGNETO_GetXYZ>
}
 80012e2:	e00e      	b.n	8001302 <readSensors+0x4a>
	else if (mode == 2) {
 80012e4:	4b08      	ldr	r3, [pc, #32]	@ (8001308 <readSensors+0x50>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	d103      	bne.n	80012f4 <readSensors+0x3c>
		BSP_ACCELERO_AccGetXYZ(acceleration);
 80012ec:	4809      	ldr	r0, [pc, #36]	@ (8001314 <readSensors+0x5c>)
 80012ee:	f000 fa5f 	bl	80017b0 <BSP_ACCELERO_AccGetXYZ>
}
 80012f2:	e006      	b.n	8001302 <readSensors+0x4a>
		pressure = BSP_PSENSOR_ReadPressure();
 80012f4:	f000 fb06 	bl	8001904 <BSP_PSENSOR_ReadPressure>
 80012f8:	eef0 7a40 	vmov.f32	s15, s0
 80012fc:	4b06      	ldr	r3, [pc, #24]	@ (8001318 <readSensors+0x60>)
 80012fe:	edc3 7a00 	vstr	s15, [r3]
}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	200005d4 	.word	0x200005d4
 800130c:	200005bc 	.word	0x200005bc
 8001310:	200005c0 	.word	0x200005c0
 8001314:	200005c8 	.word	0x200005c8
 8001318:	200005d0 	.word	0x200005d0

0800131c <printSensors>:

/* Function to printer sensor values */
void printSensors() {
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
	if (mode == 0) {
 8001320:	4b1e      	ldr	r3, [pc, #120]	@ (800139c <printSensors+0x80>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d108      	bne.n	800133a <printSensors+0x1e>
			printOne("Humidity: %d\n\r", humidity);
 8001328:	4b1d      	ldr	r3, [pc, #116]	@ (80013a0 <printSensors+0x84>)
 800132a:	edd3 7a00 	vldr	s15, [r3]
 800132e:	eeb0 0a67 	vmov.f32	s0, s15
 8001332:	481c      	ldr	r0, [pc, #112]	@ (80013a4 <printSensors+0x88>)
 8001334:	f7ff ff72 	bl	800121c <printOne>
		}
		else {
			printOne("Pressure: %d\n\r", pressure);
	}

}
 8001338:	e02d      	b.n	8001396 <printSensors+0x7a>
		else if (mode == 1) {
 800133a:	4b18      	ldr	r3, [pc, #96]	@ (800139c <printSensors+0x80>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2b01      	cmp	r3, #1
 8001340:	d10e      	bne.n	8001360 <printSensors+0x44>
			printThree("Magnetic Field X, Y, Z Coordinate: %d, %d, %d\n\r", magneticfield[0], magneticfield[1], magneticfield[2]);
 8001342:	4b19      	ldr	r3, [pc, #100]	@ (80013a8 <printSensors+0x8c>)
 8001344:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001348:	4619      	mov	r1, r3
 800134a:	4b17      	ldr	r3, [pc, #92]	@ (80013a8 <printSensors+0x8c>)
 800134c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001350:	461a      	mov	r2, r3
 8001352:	4b15      	ldr	r3, [pc, #84]	@ (80013a8 <printSensors+0x8c>)
 8001354:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001358:	4814      	ldr	r0, [pc, #80]	@ (80013ac <printSensors+0x90>)
 800135a:	f7ff ff87 	bl	800126c <printThree>
}
 800135e:	e01a      	b.n	8001396 <printSensors+0x7a>
		else if (mode == 2) {
 8001360:	4b0e      	ldr	r3, [pc, #56]	@ (800139c <printSensors+0x80>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2b02      	cmp	r3, #2
 8001366:	d10e      	bne.n	8001386 <printSensors+0x6a>
			printThree("Acceleration X, Y, Z Coordinate: %d, %d, %d\n\r", acceleration[0], acceleration[1], acceleration[2]);
 8001368:	4b11      	ldr	r3, [pc, #68]	@ (80013b0 <printSensors+0x94>)
 800136a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800136e:	4619      	mov	r1, r3
 8001370:	4b0f      	ldr	r3, [pc, #60]	@ (80013b0 <printSensors+0x94>)
 8001372:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001376:	461a      	mov	r2, r3
 8001378:	4b0d      	ldr	r3, [pc, #52]	@ (80013b0 <printSensors+0x94>)
 800137a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800137e:	480d      	ldr	r0, [pc, #52]	@ (80013b4 <printSensors+0x98>)
 8001380:	f7ff ff74 	bl	800126c <printThree>
}
 8001384:	e007      	b.n	8001396 <printSensors+0x7a>
			printOne("Pressure: %d\n\r", pressure);
 8001386:	4b0c      	ldr	r3, [pc, #48]	@ (80013b8 <printSensors+0x9c>)
 8001388:	edd3 7a00 	vldr	s15, [r3]
 800138c:	eeb0 0a67 	vmov.f32	s0, s15
 8001390:	480a      	ldr	r0, [pc, #40]	@ (80013bc <printSensors+0xa0>)
 8001392:	f7ff ff43 	bl	800121c <printOne>
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	200005d4 	.word	0x200005d4
 80013a0:	200005bc 	.word	0x200005bc
 80013a4:	0800a9b8 	.word	0x0800a9b8
 80013a8:	200005c0 	.word	0x200005c0
 80013ac:	0800a9c8 	.word	0x0800a9c8
 80013b0:	200005c8 	.word	0x200005c8
 80013b4:	0800a9f8 	.word	0x0800a9f8
 80013b8:	200005d0 	.word	0x200005d0
 80013bc:	0800aa28 	.word	0x0800aa28

080013c0 <readButton>:
/* Read Button Using Polling */
void readButton() {
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
	int status = HAL_GPIO_ReadPin(myButton_GPIO_Port, myButton_Pin);
 80013c6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013ca:	480c      	ldr	r0, [pc, #48]	@ (80013fc <readButton+0x3c>)
 80013cc:	f001 fc9a 	bl	8002d04 <HAL_GPIO_ReadPin>
 80013d0:	4603      	mov	r3, r0
 80013d2:	607b      	str	r3, [r7, #4]
	if (status == 0) {
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d10b      	bne.n	80013f2 <readButton+0x32>
		mode = ((mode+1) % 4);
 80013da:	4b09      	ldr	r3, [pc, #36]	@ (8001400 <readButton+0x40>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	3301      	adds	r3, #1
 80013e0:	425a      	negs	r2, r3
 80013e2:	f003 0303 	and.w	r3, r3, #3
 80013e6:	f002 0203 	and.w	r2, r2, #3
 80013ea:	bf58      	it	pl
 80013ec:	4253      	negpl	r3, r2
 80013ee:	4a04      	ldr	r2, [pc, #16]	@ (8001400 <readButton+0x40>)
 80013f0:	6013      	str	r3, [r2, #0]
	}
}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	48000800 	.word	0x48000800
 8001400:	200005d4 	.word	0x200005d4

08001404 <vApplicationStackOverflowHook>:


void vApplicationStackOverflowHook(TaskHandle_t xTask, char *pcTaskName)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
    // Report stack overflow
    printf("Stack overflow detected in task: %s\n", pcTaskName);
 800140e:	6839      	ldr	r1, [r7, #0]
 8001410:	4802      	ldr	r0, [pc, #8]	@ (800141c <vApplicationStackOverflowHook+0x18>)
 8001412:	f007 f969 	bl	80086e8 <iprintf>

    // Optionally halt the system for debugging
    while (1);
 8001416:	bf00      	nop
 8001418:	e7fd      	b.n	8001416 <vApplicationStackOverflowHook+0x12>
 800141a:	bf00      	nop
 800141c:	0800aa38 	.word	0x0800aa38

08001420 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	osDelay(100);
 8001428:	2064      	movs	r0, #100	@ 0x64
 800142a:	f005 fa00 	bl	800682e <osDelay>
	readSensors();
 800142e:	f7ff ff43 	bl	80012b8 <readSensors>
	osDelay(100);
 8001432:	bf00      	nop
 8001434:	e7f8      	b.n	8001428 <StartDefaultTask+0x8>

08001436 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	b082      	sub	sp, #8
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(230);
 800143e:	20e6      	movs	r0, #230	@ 0xe6
 8001440:	f005 f9f5 	bl	800682e <osDelay>
    readButton();
 8001444:	f7ff ffbc 	bl	80013c0 <readButton>
    osDelay(230);
 8001448:	bf00      	nop
 800144a:	e7f8      	b.n	800143e <StartTask02+0x8>

0800144c <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(260);
 8001454:	f44f 7082 	mov.w	r0, #260	@ 0x104
 8001458:	f005 f9e9 	bl	800682e <osDelay>
    printSensors();
 800145c:	f7ff ff5e 	bl	800131c <printSensors>
    osDelay(260);
 8001460:	bf00      	nop
 8001462:	e7f7      	b.n	8001454 <StartTask03+0x8>

08001464 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a04      	ldr	r2, [pc, #16]	@ (8001484 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d101      	bne.n	800147a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001476:	f001 f8bf 	bl	80025f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800147a:	bf00      	nop
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40001000 	.word	0x40001000

08001488 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800148c:	b672      	cpsid	i
}
 800148e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001490:	bf00      	nop
 8001492:	e7fd      	b.n	8001490 <Error_Handler+0x8>

08001494 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b08a      	sub	sp, #40	@ 0x28
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800149c:	4b27      	ldr	r3, [pc, #156]	@ (800153c <I2Cx_MspInit+0xa8>)
 800149e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014a0:	4a26      	ldr	r2, [pc, #152]	@ (800153c <I2Cx_MspInit+0xa8>)
 80014a2:	f043 0302 	orr.w	r3, r3, #2
 80014a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014a8:	4b24      	ldr	r3, [pc, #144]	@ (800153c <I2Cx_MspInit+0xa8>)
 80014aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ac:	f003 0302 	and.w	r3, r3, #2
 80014b0:	613b      	str	r3, [r7, #16]
 80014b2:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 80014b4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80014b8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80014ba:	2312      	movs	r3, #18
 80014bc:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80014be:	2301      	movs	r3, #1
 80014c0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c2:	2303      	movs	r3, #3
 80014c4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80014c6:	2304      	movs	r3, #4
 80014c8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80014ca:	f107 0314 	add.w	r3, r7, #20
 80014ce:	4619      	mov	r1, r3
 80014d0:	481b      	ldr	r0, [pc, #108]	@ (8001540 <I2Cx_MspInit+0xac>)
 80014d2:	f001 f993 	bl	80027fc <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80014d6:	f107 0314 	add.w	r3, r7, #20
 80014da:	4619      	mov	r1, r3
 80014dc:	4818      	ldr	r0, [pc, #96]	@ (8001540 <I2Cx_MspInit+0xac>)
 80014de:	f001 f98d 	bl	80027fc <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 80014e2:	4b16      	ldr	r3, [pc, #88]	@ (800153c <I2Cx_MspInit+0xa8>)
 80014e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014e6:	4a15      	ldr	r2, [pc, #84]	@ (800153c <I2Cx_MspInit+0xa8>)
 80014e8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80014ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80014ee:	4b13      	ldr	r3, [pc, #76]	@ (800153c <I2Cx_MspInit+0xa8>)
 80014f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 80014fa:	4b10      	ldr	r3, [pc, #64]	@ (800153c <I2Cx_MspInit+0xa8>)
 80014fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014fe:	4a0f      	ldr	r2, [pc, #60]	@ (800153c <I2Cx_MspInit+0xa8>)
 8001500:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001504:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001506:	4b0d      	ldr	r3, [pc, #52]	@ (800153c <I2Cx_MspInit+0xa8>)
 8001508:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800150a:	4a0c      	ldr	r2, [pc, #48]	@ (800153c <I2Cx_MspInit+0xa8>)
 800150c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001510:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001512:	2200      	movs	r2, #0
 8001514:	210f      	movs	r1, #15
 8001516:	2021      	movs	r0, #33	@ 0x21
 8001518:	f001 f946 	bl	80027a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 800151c:	2021      	movs	r0, #33	@ 0x21
 800151e:	f001 f95f 	bl	80027e0 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8001522:	2200      	movs	r2, #0
 8001524:	210f      	movs	r1, #15
 8001526:	2022      	movs	r0, #34	@ 0x22
 8001528:	f001 f93e 	bl	80027a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 800152c:	2022      	movs	r0, #34	@ 0x22
 800152e:	f001 f957 	bl	80027e0 <HAL_NVIC_EnableIRQ>
}
 8001532:	bf00      	nop
 8001534:	3728      	adds	r7, #40	@ 0x28
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40021000 	.word	0x40021000
 8001540:	48000400 	.word	0x48000400

08001544 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	4a12      	ldr	r2, [pc, #72]	@ (8001598 <I2Cx_Init+0x54>)
 8001550:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a11      	ldr	r2, [pc, #68]	@ (800159c <I2Cx_Init+0x58>)
 8001556:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2200      	movs	r2, #0
 800155c:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2201      	movs	r2, #1
 8001562:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2200      	movs	r2, #0
 8001568:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2200      	movs	r2, #0
 800156e:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2200      	movs	r2, #0
 8001574:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2200      	movs	r2, #0
 800157a:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f7ff ff89 	bl	8001494 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f001 fbee 	bl	8002d64 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8001588:	2100      	movs	r1, #0
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f002 f9a4 	bl	80038d8 <HAL_I2CEx_ConfigAnalogFilter>
}
 8001590:	bf00      	nop
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	40005800 	.word	0x40005800
 800159c:	00702681 	.word	0x00702681

080015a0 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b08a      	sub	sp, #40	@ 0x28
 80015a4:	af04      	add	r7, sp, #16
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	4608      	mov	r0, r1
 80015aa:	4611      	mov	r1, r2
 80015ac:	461a      	mov	r2, r3
 80015ae:	4603      	mov	r3, r0
 80015b0:	72fb      	strb	r3, [r7, #11]
 80015b2:	460b      	mov	r3, r1
 80015b4:	813b      	strh	r3, [r7, #8]
 80015b6:	4613      	mov	r3, r2
 80015b8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80015ba:	2300      	movs	r3, #0
 80015bc:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80015be:	7afb      	ldrb	r3, [r7, #11]
 80015c0:	b299      	uxth	r1, r3
 80015c2:	88f8      	ldrh	r0, [r7, #6]
 80015c4:	893a      	ldrh	r2, [r7, #8]
 80015c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015ca:	9302      	str	r3, [sp, #8]
 80015cc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80015ce:	9301      	str	r3, [sp, #4]
 80015d0:	6a3b      	ldr	r3, [r7, #32]
 80015d2:	9300      	str	r3, [sp, #0]
 80015d4:	4603      	mov	r3, r0
 80015d6:	68f8      	ldr	r0, [r7, #12]
 80015d8:	f001 fda2 	bl	8003120 <HAL_I2C_Mem_Read>
 80015dc:	4603      	mov	r3, r0
 80015de:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80015e0:	7dfb      	ldrb	r3, [r7, #23]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d004      	beq.n	80015f0 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80015e6:	7afb      	ldrb	r3, [r7, #11]
 80015e8:	4619      	mov	r1, r3
 80015ea:	68f8      	ldr	r0, [r7, #12]
 80015ec:	f000 f832 	bl	8001654 <I2Cx_Error>
  }
  return status;
 80015f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3718      	adds	r7, #24
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b08a      	sub	sp, #40	@ 0x28
 80015fe:	af04      	add	r7, sp, #16
 8001600:	60f8      	str	r0, [r7, #12]
 8001602:	4608      	mov	r0, r1
 8001604:	4611      	mov	r1, r2
 8001606:	461a      	mov	r2, r3
 8001608:	4603      	mov	r3, r0
 800160a:	72fb      	strb	r3, [r7, #11]
 800160c:	460b      	mov	r3, r1
 800160e:	813b      	strh	r3, [r7, #8]
 8001610:	4613      	mov	r3, r2
 8001612:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001614:	2300      	movs	r3, #0
 8001616:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001618:	7afb      	ldrb	r3, [r7, #11]
 800161a:	b299      	uxth	r1, r3
 800161c:	88f8      	ldrh	r0, [r7, #6]
 800161e:	893a      	ldrh	r2, [r7, #8]
 8001620:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001624:	9302      	str	r3, [sp, #8]
 8001626:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001628:	9301      	str	r3, [sp, #4]
 800162a:	6a3b      	ldr	r3, [r7, #32]
 800162c:	9300      	str	r3, [sp, #0]
 800162e:	4603      	mov	r3, r0
 8001630:	68f8      	ldr	r0, [r7, #12]
 8001632:	f001 fc61 	bl	8002ef8 <HAL_I2C_Mem_Write>
 8001636:	4603      	mov	r3, r0
 8001638:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800163a:	7dfb      	ldrb	r3, [r7, #23]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d004      	beq.n	800164a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001640:	7afb      	ldrb	r3, [r7, #11]
 8001642:	4619      	mov	r1, r3
 8001644:	68f8      	ldr	r0, [r7, #12]
 8001646:	f000 f805 	bl	8001654 <I2Cx_Error>
  }
  return status;
 800164a:	7dfb      	ldrb	r3, [r7, #23]
}
 800164c:	4618      	mov	r0, r3
 800164e:	3718      	adds	r7, #24
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	460b      	mov	r3, r1
 800165e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f001 fc1a 	bl	8002e9a <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f7ff ff6c 	bl	8001544 <I2Cx_Init>
}
 800166c:	bf00      	nop
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}

08001674 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8001678:	4802      	ldr	r0, [pc, #8]	@ (8001684 <SENSOR_IO_Init+0x10>)
 800167a:	f7ff ff63 	bl	8001544 <I2Cx_Init>
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	200005d8 	.word	0x200005d8

08001688 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af02      	add	r7, sp, #8
 800168e:	4603      	mov	r3, r0
 8001690:	71fb      	strb	r3, [r7, #7]
 8001692:	460b      	mov	r3, r1
 8001694:	71bb      	strb	r3, [r7, #6]
 8001696:	4613      	mov	r3, r2
 8001698:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800169a:	79bb      	ldrb	r3, [r7, #6]
 800169c:	b29a      	uxth	r2, r3
 800169e:	79f9      	ldrb	r1, [r7, #7]
 80016a0:	2301      	movs	r3, #1
 80016a2:	9301      	str	r3, [sp, #4]
 80016a4:	1d7b      	adds	r3, r7, #5
 80016a6:	9300      	str	r3, [sp, #0]
 80016a8:	2301      	movs	r3, #1
 80016aa:	4803      	ldr	r0, [pc, #12]	@ (80016b8 <SENSOR_IO_Write+0x30>)
 80016ac:	f7ff ffa5 	bl	80015fa <I2Cx_WriteMultiple>
}
 80016b0:	bf00      	nop
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	200005d8 	.word	0x200005d8

080016bc <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af02      	add	r7, sp, #8
 80016c2:	4603      	mov	r3, r0
 80016c4:	460a      	mov	r2, r1
 80016c6:	71fb      	strb	r3, [r7, #7]
 80016c8:	4613      	mov	r3, r2
 80016ca:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80016cc:	2300      	movs	r3, #0
 80016ce:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80016d0:	79bb      	ldrb	r3, [r7, #6]
 80016d2:	b29a      	uxth	r2, r3
 80016d4:	79f9      	ldrb	r1, [r7, #7]
 80016d6:	2301      	movs	r3, #1
 80016d8:	9301      	str	r3, [sp, #4]
 80016da:	f107 030f 	add.w	r3, r7, #15
 80016de:	9300      	str	r3, [sp, #0]
 80016e0:	2301      	movs	r3, #1
 80016e2:	4804      	ldr	r0, [pc, #16]	@ (80016f4 <SENSOR_IO_Read+0x38>)
 80016e4:	f7ff ff5c 	bl	80015a0 <I2Cx_ReadMultiple>

  return read_value;
 80016e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3710      	adds	r7, #16
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	200005d8 	.word	0x200005d8

080016f8 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af02      	add	r7, sp, #8
 80016fe:	603a      	str	r2, [r7, #0]
 8001700:	461a      	mov	r2, r3
 8001702:	4603      	mov	r3, r0
 8001704:	71fb      	strb	r3, [r7, #7]
 8001706:	460b      	mov	r3, r1
 8001708:	71bb      	strb	r3, [r7, #6]
 800170a:	4613      	mov	r3, r2
 800170c:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800170e:	79bb      	ldrb	r3, [r7, #6]
 8001710:	b29a      	uxth	r2, r3
 8001712:	79f9      	ldrb	r1, [r7, #7]
 8001714:	88bb      	ldrh	r3, [r7, #4]
 8001716:	9301      	str	r3, [sp, #4]
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	9300      	str	r3, [sp, #0]
 800171c:	2301      	movs	r3, #1
 800171e:	4804      	ldr	r0, [pc, #16]	@ (8001730 <SENSOR_IO_ReadMultiple+0x38>)
 8001720:	f7ff ff3e 	bl	80015a0 <I2Cx_ReadMultiple>
 8001724:	4603      	mov	r3, r0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	200005d8 	.word	0x200005d8

08001734 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 800173a:	2300      	movs	r3, #0
 800173c:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800173e:	2300      	movs	r3, #0
 8001740:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8001742:	4b19      	ldr	r3, [pc, #100]	@ (80017a8 <BSP_ACCELERO_Init+0x74>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	4798      	blx	r3
 8001748:	4603      	mov	r3, r0
 800174a:	2b6a      	cmp	r3, #106	@ 0x6a
 800174c:	d002      	beq.n	8001754 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	73fb      	strb	r3, [r7, #15]
 8001752:	e024      	b.n	800179e <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8001754:	4b15      	ldr	r3, [pc, #84]	@ (80017ac <BSP_ACCELERO_Init+0x78>)
 8001756:	4a14      	ldr	r2, [pc, #80]	@ (80017a8 <BSP_ACCELERO_Init+0x74>)
 8001758:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 800175a:	2330      	movs	r3, #48	@ 0x30
 800175c:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 800175e:	2300      	movs	r3, #0
 8001760:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8001762:	2300      	movs	r3, #0
 8001764:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8001766:	2340      	movs	r3, #64	@ 0x40
 8001768:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 800176a:	2300      	movs	r3, #0
 800176c:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 800176e:	2300      	movs	r3, #0
 8001770:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8001772:	797a      	ldrb	r2, [r7, #5]
 8001774:	7abb      	ldrb	r3, [r7, #10]
 8001776:	4313      	orrs	r3, r2
 8001778:	b2db      	uxtb	r3, r3
 800177a:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 800177c:	7a3b      	ldrb	r3, [r7, #8]
 800177e:	f043 0304 	orr.w	r3, r3, #4
 8001782:	b2db      	uxtb	r3, r3
 8001784:	021b      	lsls	r3, r3, #8
 8001786:	b21a      	sxth	r2, r3
 8001788:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800178c:	4313      	orrs	r3, r2
 800178e:	b21b      	sxth	r3, r3
 8001790:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8001792:	4b06      	ldr	r3, [pc, #24]	@ (80017ac <BSP_ACCELERO_Init+0x78>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	89ba      	ldrh	r2, [r7, #12]
 800179a:	4610      	mov	r0, r2
 800179c:	4798      	blx	r3
  }  

  return ret;
 800179e:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3710      	adds	r7, #16
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	20000050 	.word	0x20000050
 80017ac:	2000062c 	.word	0x2000062c

080017b0 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 80017b8:	4b08      	ldr	r3, [pc, #32]	@ (80017dc <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d009      	beq.n	80017d4 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 80017c0:	4b06      	ldr	r3, [pc, #24]	@ (80017dc <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d004      	beq.n	80017d4 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 80017ca:	4b04      	ldr	r3, [pc, #16]	@ (80017dc <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	4798      	blx	r3
    }
  }
}
 80017d4:	bf00      	nop
 80017d6:	3708      	adds	r7, #8
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	2000062c 	.word	0x2000062c

080017e0 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 80017e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001818 <BSP_HSENSOR_Init+0x38>)
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	20be      	movs	r0, #190	@ 0xbe
 80017ec:	4798      	blx	r3
 80017ee:	4603      	mov	r3, r0
 80017f0:	2bbc      	cmp	r3, #188	@ 0xbc
 80017f2:	d002      	beq.n	80017fa <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	607b      	str	r3, [r7, #4]
 80017f8:	e009      	b.n	800180e <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 80017fa:	4b08      	ldr	r3, [pc, #32]	@ (800181c <BSP_HSENSOR_Init+0x3c>)
 80017fc:	4a06      	ldr	r2, [pc, #24]	@ (8001818 <BSP_HSENSOR_Init+0x38>)
 80017fe:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8001800:	4b06      	ldr	r3, [pc, #24]	@ (800181c <BSP_HSENSOR_Init+0x3c>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	20be      	movs	r0, #190	@ 0xbe
 8001808:	4798      	blx	r3
    ret = HSENSOR_OK;
 800180a:	2300      	movs	r3, #0
 800180c:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 800180e:	687b      	ldr	r3, [r7, #4]
}
 8001810:	4618      	mov	r0, r3
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	20000004 	.word	0x20000004
 800181c:	20000630 	.word	0x20000630

08001820 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 8001824:	4b04      	ldr	r3, [pc, #16]	@ (8001838 <BSP_HSENSOR_ReadHumidity+0x18>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	20be      	movs	r0, #190	@ 0xbe
 800182c:	4798      	blx	r3
 800182e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001832:	eeb0 0a67 	vmov.f32	s0, s15
 8001836:	bd80      	pop	{r7, pc}
 8001838:	20000630 	.word	0x20000630

0800183c <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 8001842:	2300      	movs	r3, #0
 8001844:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 8001846:	4b11      	ldr	r3, [pc, #68]	@ (800188c <BSP_MAGNETO_Init+0x50>)
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	4798      	blx	r3
 800184c:	4603      	mov	r3, r0
 800184e:	2b3d      	cmp	r3, #61	@ 0x3d
 8001850:	d002      	beq.n	8001858 <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	71fb      	strb	r3, [r7, #7]
 8001856:	e013      	b.n	8001880 <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 8001858:	4b0d      	ldr	r3, [pc, #52]	@ (8001890 <BSP_MAGNETO_Init+0x54>)
 800185a:	4a0c      	ldr	r2, [pc, #48]	@ (800188c <BSP_MAGNETO_Init+0x50>)
 800185c:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 800185e:	2358      	movs	r3, #88	@ 0x58
 8001860:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 8001862:	2300      	movs	r3, #0
 8001864:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 8001866:	2300      	movs	r3, #0
 8001868:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 800186a:	2308      	movs	r3, #8
 800186c:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 800186e:	2340      	movs	r3, #64	@ 0x40
 8001870:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 8001872:	4b07      	ldr	r3, [pc, #28]	@ (8001890 <BSP_MAGNETO_Init+0x54>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	463a      	mov	r2, r7
 800187a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800187e:	4798      	blx	r3
  } 

  return ret;  
 8001880:	79fb      	ldrb	r3, [r7, #7]
}
 8001882:	4618      	mov	r0, r3
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	20000010 	.word	0x20000010
 8001890:	20000634 	.word	0x20000634

08001894 <BSP_MAGNETO_GetXYZ>:
  * @brief  Get XYZ magnetometer values.
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  if(MagnetoDrv != NULL)
 800189c:	4b08      	ldr	r3, [pc, #32]	@ (80018c0 <BSP_MAGNETO_GetXYZ+0x2c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d009      	beq.n	80018b8 <BSP_MAGNETO_GetXYZ+0x24>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 80018a4:	4b06      	ldr	r3, [pc, #24]	@ (80018c0 <BSP_MAGNETO_GetXYZ+0x2c>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d004      	beq.n	80018b8 <BSP_MAGNETO_GetXYZ+0x24>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 80018ae:	4b04      	ldr	r3, [pc, #16]	@ (80018c0 <BSP_MAGNETO_GetXYZ+0x2c>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	4798      	blx	r3
    }
  }
}
 80018b8:	bf00      	nop
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	20000634 	.word	0x20000634

080018c4 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 80018ca:	4b0c      	ldr	r3, [pc, #48]	@ (80018fc <BSP_PSENSOR_Init+0x38>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	20ba      	movs	r0, #186	@ 0xba
 80018d0:	4798      	blx	r3
 80018d2:	4603      	mov	r3, r0
 80018d4:	2bb1      	cmp	r3, #177	@ 0xb1
 80018d6:	d002      	beq.n	80018de <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	607b      	str	r3, [r7, #4]
 80018dc:	e009      	b.n	80018f2 <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 80018de:	4b08      	ldr	r3, [pc, #32]	@ (8001900 <BSP_PSENSOR_Init+0x3c>)
 80018e0:	4a06      	ldr	r2, [pc, #24]	@ (80018fc <BSP_PSENSOR_Init+0x38>)
 80018e2:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 80018e4:	4b06      	ldr	r3, [pc, #24]	@ (8001900 <BSP_PSENSOR_Init+0x3c>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	20ba      	movs	r0, #186	@ 0xba
 80018ec:	4798      	blx	r3
    ret = PSENSOR_OK;
 80018ee:	2300      	movs	r3, #0
 80018f0:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 80018f2:	687b      	ldr	r3, [r7, #4]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3708      	adds	r7, #8
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	20000044 	.word	0x20000044
 8001900:	20000638 	.word	0x20000638

08001904 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 8001908:	4b04      	ldr	r3, [pc, #16]	@ (800191c <BSP_PSENSOR_ReadPressure+0x18>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	20ba      	movs	r0, #186	@ 0xba
 8001910:	4798      	blx	r3
 8001912:	eef0 7a40 	vmov.f32	s15, s0
}
 8001916:	eeb0 0a67 	vmov.f32	s0, s15
 800191a:	bd80      	pop	{r7, pc}
 800191c:	20000638 	.word	0x20000638

08001920 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001926:	4b11      	ldr	r3, [pc, #68]	@ (800196c <HAL_MspInit+0x4c>)
 8001928:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800192a:	4a10      	ldr	r2, [pc, #64]	@ (800196c <HAL_MspInit+0x4c>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	6613      	str	r3, [r2, #96]	@ 0x60
 8001932:	4b0e      	ldr	r3, [pc, #56]	@ (800196c <HAL_MspInit+0x4c>)
 8001934:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	607b      	str	r3, [r7, #4]
 800193c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800193e:	4b0b      	ldr	r3, [pc, #44]	@ (800196c <HAL_MspInit+0x4c>)
 8001940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001942:	4a0a      	ldr	r2, [pc, #40]	@ (800196c <HAL_MspInit+0x4c>)
 8001944:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001948:	6593      	str	r3, [r2, #88]	@ 0x58
 800194a:	4b08      	ldr	r3, [pc, #32]	@ (800196c <HAL_MspInit+0x4c>)
 800194c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800194e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001952:	603b      	str	r3, [r7, #0]
 8001954:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001956:	2200      	movs	r2, #0
 8001958:	210f      	movs	r1, #15
 800195a:	f06f 0001 	mvn.w	r0, #1
 800195e:	f000 ff23 	bl	80027a8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001962:	bf00      	nop
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40021000 	.word	0x40021000

08001970 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b0ae      	sub	sp, #184	@ 0xb8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001978:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	605a      	str	r2, [r3, #4]
 8001982:	609a      	str	r2, [r3, #8]
 8001984:	60da      	str	r2, [r3, #12]
 8001986:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001988:	f107 0310 	add.w	r3, r7, #16
 800198c:	2294      	movs	r2, #148	@ 0x94
 800198e:	2100      	movs	r1, #0
 8001990:	4618      	mov	r0, r3
 8001992:	f006 febb 	bl	800870c <memset>
  if(hi2c->Instance==I2C2)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a21      	ldr	r2, [pc, #132]	@ (8001a20 <HAL_I2C_MspInit+0xb0>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d13b      	bne.n	8001a18 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80019a0:	2380      	movs	r3, #128	@ 0x80
 80019a2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80019a4:	2300      	movs	r3, #0
 80019a6:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019a8:	f107 0310 	add.w	r3, r7, #16
 80019ac:	4618      	mov	r0, r3
 80019ae:	f002 fff9 	bl	80049a4 <HAL_RCCEx_PeriphCLKConfig>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80019b8:	f7ff fd66 	bl	8001488 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019bc:	4b19      	ldr	r3, [pc, #100]	@ (8001a24 <HAL_I2C_MspInit+0xb4>)
 80019be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019c0:	4a18      	ldr	r2, [pc, #96]	@ (8001a24 <HAL_I2C_MspInit+0xb4>)
 80019c2:	f043 0302 	orr.w	r3, r3, #2
 80019c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019c8:	4b16      	ldr	r3, [pc, #88]	@ (8001a24 <HAL_I2C_MspInit+0xb4>)
 80019ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019cc:	f003 0302 	and.w	r3, r3, #2
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80019d4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80019d8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019dc:	2312      	movs	r3, #18
 80019de:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e2:	2300      	movs	r3, #0
 80019e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e8:	2303      	movs	r3, #3
 80019ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80019ee:	2304      	movs	r3, #4
 80019f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019f4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80019f8:	4619      	mov	r1, r3
 80019fa:	480b      	ldr	r0, [pc, #44]	@ (8001a28 <HAL_I2C_MspInit+0xb8>)
 80019fc:	f000 fefe 	bl	80027fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001a00:	4b08      	ldr	r3, [pc, #32]	@ (8001a24 <HAL_I2C_MspInit+0xb4>)
 8001a02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a04:	4a07      	ldr	r2, [pc, #28]	@ (8001a24 <HAL_I2C_MspInit+0xb4>)
 8001a06:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001a0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a0c:	4b05      	ldr	r3, [pc, #20]	@ (8001a24 <HAL_I2C_MspInit+0xb4>)
 8001a0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a10:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a14:	60bb      	str	r3, [r7, #8]
 8001a16:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001a18:	bf00      	nop
 8001a1a:	37b8      	adds	r7, #184	@ 0xb8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40005800 	.word	0x40005800
 8001a24:	40021000 	.word	0x40021000
 8001a28:	48000400 	.word	0x48000400

08001a2c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a0b      	ldr	r2, [pc, #44]	@ (8001a68 <HAL_I2C_MspDeInit+0x3c>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d10f      	bne.n	8001a5e <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8001a6c <HAL_I2C_MspDeInit+0x40>)
 8001a40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a42:	4a0a      	ldr	r2, [pc, #40]	@ (8001a6c <HAL_I2C_MspDeInit+0x40>)
 8001a44:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001a48:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8001a4a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001a4e:	4808      	ldr	r0, [pc, #32]	@ (8001a70 <HAL_I2C_MspDeInit+0x44>)
 8001a50:	f001 f866 	bl	8002b20 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8001a54:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a58:	4805      	ldr	r0, [pc, #20]	@ (8001a70 <HAL_I2C_MspDeInit+0x44>)
 8001a5a:	f001 f861 	bl	8002b20 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001a5e:	bf00      	nop
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40005800 	.word	0x40005800
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	48000400 	.word	0x48000400

08001a74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b0ae      	sub	sp, #184	@ 0xb8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a7c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	609a      	str	r2, [r3, #8]
 8001a88:	60da      	str	r2, [r3, #12]
 8001a8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a8c:	f107 0310 	add.w	r3, r7, #16
 8001a90:	2294      	movs	r2, #148	@ 0x94
 8001a92:	2100      	movs	r1, #0
 8001a94:	4618      	mov	r0, r3
 8001a96:	f006 fe39 	bl	800870c <memset>
  if(huart->Instance==USART1)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a21      	ldr	r2, [pc, #132]	@ (8001b24 <HAL_UART_MspInit+0xb0>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d13a      	bne.n	8001b1a <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001aac:	f107 0310 	add.w	r3, r7, #16
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f002 ff77 	bl	80049a4 <HAL_RCCEx_PeriphCLKConfig>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001abc:	f7ff fce4 	bl	8001488 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ac0:	4b19      	ldr	r3, [pc, #100]	@ (8001b28 <HAL_UART_MspInit+0xb4>)
 8001ac2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ac4:	4a18      	ldr	r2, [pc, #96]	@ (8001b28 <HAL_UART_MspInit+0xb4>)
 8001ac6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001aca:	6613      	str	r3, [r2, #96]	@ 0x60
 8001acc:	4b16      	ldr	r3, [pc, #88]	@ (8001b28 <HAL_UART_MspInit+0xb4>)
 8001ace:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ad0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ad8:	4b13      	ldr	r3, [pc, #76]	@ (8001b28 <HAL_UART_MspInit+0xb4>)
 8001ada:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001adc:	4a12      	ldr	r2, [pc, #72]	@ (8001b28 <HAL_UART_MspInit+0xb4>)
 8001ade:	f043 0302 	orr.w	r3, r3, #2
 8001ae2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ae4:	4b10      	ldr	r3, [pc, #64]	@ (8001b28 <HAL_UART_MspInit+0xb4>)
 8001ae6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ae8:	f003 0302 	and.w	r3, r3, #2
 8001aec:	60bb      	str	r3, [r7, #8]
 8001aee:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001af0:	23c0      	movs	r3, #192	@ 0xc0
 8001af2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af6:	2302      	movs	r3, #2
 8001af8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afc:	2300      	movs	r3, #0
 8001afe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b02:	2303      	movs	r3, #3
 8001b04:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b08:	2307      	movs	r3, #7
 8001b0a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b0e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001b12:	4619      	mov	r1, r3
 8001b14:	4805      	ldr	r0, [pc, #20]	@ (8001b2c <HAL_UART_MspInit+0xb8>)
 8001b16:	f000 fe71 	bl	80027fc <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001b1a:	bf00      	nop
 8001b1c:	37b8      	adds	r7, #184	@ 0xb8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	40013800 	.word	0x40013800
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	48000400 	.word	0x48000400

08001b30 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b08e      	sub	sp, #56	@ 0x38
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001b3e:	4b34      	ldr	r3, [pc, #208]	@ (8001c10 <HAL_InitTick+0xe0>)
 8001b40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b42:	4a33      	ldr	r2, [pc, #204]	@ (8001c10 <HAL_InitTick+0xe0>)
 8001b44:	f043 0310 	orr.w	r3, r3, #16
 8001b48:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b4a:	4b31      	ldr	r3, [pc, #196]	@ (8001c10 <HAL_InitTick+0xe0>)
 8001b4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b4e:	f003 0310 	and.w	r3, r3, #16
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b56:	f107 0210 	add.w	r2, r7, #16
 8001b5a:	f107 0314 	add.w	r3, r7, #20
 8001b5e:	4611      	mov	r1, r2
 8001b60:	4618      	mov	r0, r3
 8001b62:	f002 fe2d 	bl	80047c0 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001b66:	6a3b      	ldr	r3, [r7, #32]
 8001b68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001b6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d103      	bne.n	8001b78 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001b70:	f002 fdfa 	bl	8004768 <HAL_RCC_GetPCLK1Freq>
 8001b74:	6378      	str	r0, [r7, #52]	@ 0x34
 8001b76:	e004      	b.n	8001b82 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001b78:	f002 fdf6 	bl	8004768 <HAL_RCC_GetPCLK1Freq>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b84:	4a23      	ldr	r2, [pc, #140]	@ (8001c14 <HAL_InitTick+0xe4>)
 8001b86:	fba2 2303 	umull	r2, r3, r2, r3
 8001b8a:	0c9b      	lsrs	r3, r3, #18
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001b90:	4b21      	ldr	r3, [pc, #132]	@ (8001c18 <HAL_InitTick+0xe8>)
 8001b92:	4a22      	ldr	r2, [pc, #136]	@ (8001c1c <HAL_InitTick+0xec>)
 8001b94:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001b96:	4b20      	ldr	r3, [pc, #128]	@ (8001c18 <HAL_InitTick+0xe8>)
 8001b98:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b9c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001b9e:	4a1e      	ldr	r2, [pc, #120]	@ (8001c18 <HAL_InitTick+0xe8>)
 8001ba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ba2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001ba4:	4b1c      	ldr	r3, [pc, #112]	@ (8001c18 <HAL_InitTick+0xe8>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001baa:	4b1b      	ldr	r3, [pc, #108]	@ (8001c18 <HAL_InitTick+0xe8>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bb0:	4b19      	ldr	r3, [pc, #100]	@ (8001c18 <HAL_InitTick+0xe8>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001bb6:	4818      	ldr	r0, [pc, #96]	@ (8001c18 <HAL_InitTick+0xe8>)
 8001bb8:	f003 fc0c 	bl	80053d4 <HAL_TIM_Base_Init>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001bc2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d11b      	bne.n	8001c02 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001bca:	4813      	ldr	r0, [pc, #76]	@ (8001c18 <HAL_InitTick+0xe8>)
 8001bcc:	f003 fc64 	bl	8005498 <HAL_TIM_Base_Start_IT>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001bd6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d111      	bne.n	8001c02 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001bde:	2036      	movs	r0, #54	@ 0x36
 8001be0:	f000 fdfe 	bl	80027e0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2b0f      	cmp	r3, #15
 8001be8:	d808      	bhi.n	8001bfc <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001bea:	2200      	movs	r2, #0
 8001bec:	6879      	ldr	r1, [r7, #4]
 8001bee:	2036      	movs	r0, #54	@ 0x36
 8001bf0:	f000 fdda 	bl	80027a8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bf4:	4a0a      	ldr	r2, [pc, #40]	@ (8001c20 <HAL_InitTick+0xf0>)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6013      	str	r3, [r2, #0]
 8001bfa:	e002      	b.n	8001c02 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001c02:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3738      	adds	r7, #56	@ 0x38
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40021000 	.word	0x40021000
 8001c14:	431bde83 	.word	0x431bde83
 8001c18:	2000063c 	.word	0x2000063c
 8001c1c:	40001000 	.word	0x40001000
 8001c20:	20000084 	.word	0x20000084

08001c24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c28:	bf00      	nop
 8001c2a:	e7fd      	b.n	8001c28 <NMI_Handler+0x4>

08001c2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c30:	bf00      	nop
 8001c32:	e7fd      	b.n	8001c30 <HardFault_Handler+0x4>

08001c34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c38:	bf00      	nop
 8001c3a:	e7fd      	b.n	8001c38 <MemManage_Handler+0x4>

08001c3c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c40:	bf00      	nop
 8001c42:	e7fd      	b.n	8001c40 <BusFault_Handler+0x4>

08001c44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c48:	bf00      	nop
 8001c4a:	e7fd      	b.n	8001c48 <UsageFault_Handler+0x4>

08001c4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c50:	bf00      	nop
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
	...

08001c5c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001c60:	4802      	ldr	r0, [pc, #8]	@ (8001c6c <TIM6_DAC_IRQHandler+0x10>)
 8001c62:	f003 fc89 	bl	8005578 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001c66:	bf00      	nop
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	2000063c 	.word	0x2000063c

08001c70 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  return 1;
 8001c74:	2301      	movs	r3, #1
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <_kill>:

int _kill(int pid, int sig)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c8a:	f006 fd4b 	bl	8008724 <__errno>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2216      	movs	r2, #22
 8001c92:	601a      	str	r2, [r3, #0]
  return -1;
 8001c94:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3708      	adds	r7, #8
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <_exit>:

void _exit (int status)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ca8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f7ff ffe7 	bl	8001c80 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001cb2:	bf00      	nop
 8001cb4:	e7fd      	b.n	8001cb2 <_exit+0x12>

08001cb6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b086      	sub	sp, #24
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	60f8      	str	r0, [r7, #12]
 8001cbe:	60b9      	str	r1, [r7, #8]
 8001cc0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	617b      	str	r3, [r7, #20]
 8001cc6:	e00a      	b.n	8001cde <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cc8:	f3af 8000 	nop.w
 8001ccc:	4601      	mov	r1, r0
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	1c5a      	adds	r2, r3, #1
 8001cd2:	60ba      	str	r2, [r7, #8]
 8001cd4:	b2ca      	uxtb	r2, r1
 8001cd6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	3301      	adds	r3, #1
 8001cdc:	617b      	str	r3, [r7, #20]
 8001cde:	697a      	ldr	r2, [r7, #20]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	dbf0      	blt.n	8001cc8 <_read+0x12>
  }

  return len;
 8001ce6:	687b      	ldr	r3, [r7, #4]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3718      	adds	r7, #24
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b086      	sub	sp, #24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	60b9      	str	r1, [r7, #8]
 8001cfa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	617b      	str	r3, [r7, #20]
 8001d00:	e009      	b.n	8001d16 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	1c5a      	adds	r2, r3, #1
 8001d06:	60ba      	str	r2, [r7, #8]
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	3301      	adds	r3, #1
 8001d14:	617b      	str	r3, [r7, #20]
 8001d16:	697a      	ldr	r2, [r7, #20]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	dbf1      	blt.n	8001d02 <_write+0x12>
  }
  return len;
 8001d1e:	687b      	ldr	r3, [r7, #4]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3718      	adds	r7, #24
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <_close>:

int _close(int file)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d30:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d50:	605a      	str	r2, [r3, #4]
  return 0;
 8001d52:	2300      	movs	r3, #0
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <_isatty>:

int _isatty(int file)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d68:	2301      	movs	r3, #1
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr

08001d76 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d76:	b480      	push	{r7}
 8001d78:	b085      	sub	sp, #20
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	60f8      	str	r0, [r7, #12]
 8001d7e:	60b9      	str	r1, [r7, #8]
 8001d80:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d82:	2300      	movs	r3, #0
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3714      	adds	r7, #20
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d98:	4a14      	ldr	r2, [pc, #80]	@ (8001dec <_sbrk+0x5c>)
 8001d9a:	4b15      	ldr	r3, [pc, #84]	@ (8001df0 <_sbrk+0x60>)
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001da4:	4b13      	ldr	r3, [pc, #76]	@ (8001df4 <_sbrk+0x64>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d102      	bne.n	8001db2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dac:	4b11      	ldr	r3, [pc, #68]	@ (8001df4 <_sbrk+0x64>)
 8001dae:	4a12      	ldr	r2, [pc, #72]	@ (8001df8 <_sbrk+0x68>)
 8001db0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001db2:	4b10      	ldr	r3, [pc, #64]	@ (8001df4 <_sbrk+0x64>)
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4413      	add	r3, r2
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d207      	bcs.n	8001dd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dc0:	f006 fcb0 	bl	8008724 <__errno>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	220c      	movs	r2, #12
 8001dc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001dce:	e009      	b.n	8001de4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dd0:	4b08      	ldr	r3, [pc, #32]	@ (8001df4 <_sbrk+0x64>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dd6:	4b07      	ldr	r3, [pc, #28]	@ (8001df4 <_sbrk+0x64>)
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4413      	add	r3, r2
 8001dde:	4a05      	ldr	r2, [pc, #20]	@ (8001df4 <_sbrk+0x64>)
 8001de0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001de2:	68fb      	ldr	r3, [r7, #12]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3718      	adds	r7, #24
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	200a0000 	.word	0x200a0000
 8001df0:	00000400 	.word	0x00000400
 8001df4:	20000688 	.word	0x20000688
 8001df8:	200014e8 	.word	0x200014e8

08001dfc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001e00:	4b06      	ldr	r3, [pc, #24]	@ (8001e1c <SystemInit+0x20>)
 8001e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e06:	4a05      	ldr	r2, [pc, #20]	@ (8001e1c <SystemInit+0x20>)
 8001e08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001e10:	bf00      	nop
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	e000ed00 	.word	0xe000ed00

08001e20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001e20:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e58 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e24:	f7ff ffea 	bl	8001dfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e28:	480c      	ldr	r0, [pc, #48]	@ (8001e5c <LoopForever+0x6>)
  ldr r1, =_edata
 8001e2a:	490d      	ldr	r1, [pc, #52]	@ (8001e60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e2c:	4a0d      	ldr	r2, [pc, #52]	@ (8001e64 <LoopForever+0xe>)
  movs r3, #0
 8001e2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e30:	e002      	b.n	8001e38 <LoopCopyDataInit>

08001e32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e36:	3304      	adds	r3, #4

08001e38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e3c:	d3f9      	bcc.n	8001e32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e3e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e40:	4c0a      	ldr	r4, [pc, #40]	@ (8001e6c <LoopForever+0x16>)
  movs r3, #0
 8001e42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e44:	e001      	b.n	8001e4a <LoopFillZerobss>

08001e46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e48:	3204      	adds	r2, #4

08001e4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e4c:	d3fb      	bcc.n	8001e46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e4e:	f006 fc6f 	bl	8008730 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e52:	f7ff f853 	bl	8000efc <main>

08001e56 <LoopForever>:

LoopForever:
    b LoopForever
 8001e56:	e7fe      	b.n	8001e56 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001e58:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001e5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e60:	20000258 	.word	0x20000258
  ldr r2, =_sidata
 8001e64:	0800ae58 	.word	0x0800ae58
  ldr r2, =_sbss
 8001e68:	20000258 	.word	0x20000258
  ldr r4, =_ebss
 8001e6c:	200014e8 	.word	0x200014e8

08001e70 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e70:	e7fe      	b.n	8001e70 <ADC1_IRQHandler>

08001e72 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b084      	sub	sp, #16
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	4603      	mov	r3, r0
 8001e7a:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8001e7c:	88fb      	ldrh	r3, [r7, #6]
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	2120      	movs	r1, #32
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7ff fc1a 	bl	80016bc <SENSOR_IO_Read>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8001e8c:	7bfb      	ldrb	r3, [r7, #15]
 8001e8e:	f023 0304 	bic.w	r3, r3, #4
 8001e92:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8001e94:	7bfb      	ldrb	r3, [r7, #15]
 8001e96:	f043 0304 	orr.w	r3, r3, #4
 8001e9a:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8001e9c:	7bfb      	ldrb	r3, [r7, #15]
 8001e9e:	f023 0303 	bic.w	r3, r3, #3
 8001ea2:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8001ea4:	7bfb      	ldrb	r3, [r7, #15]
 8001ea6:	f043 0301 	orr.w	r3, r3, #1
 8001eaa:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8001eac:	7bfb      	ldrb	r3, [r7, #15]
 8001eae:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001eb2:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8001eb4:	88fb      	ldrh	r3, [r7, #6]
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	7bfa      	ldrb	r2, [r7, #15]
 8001eba:	2120      	movs	r1, #32
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff fbe3 	bl	8001688 <SENSOR_IO_Write>
}
 8001ec2:	bf00      	nop
 8001ec4:	3710      	adds	r7, #16
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b084      	sub	sp, #16
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 8001ed8:	f7ff fbcc 	bl	8001674 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8001edc:	88fb      	ldrh	r3, [r7, #6]
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	210f      	movs	r1, #15
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff fbea 	bl	80016bc <SENSOR_IO_Read>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8001eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
	...

08001ef8 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b088      	sub	sp, #32
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8001f02:	88fb      	ldrh	r3, [r7, #6]
 8001f04:	b2d8      	uxtb	r0, r3
 8001f06:	f107 020c 	add.w	r2, r7, #12
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	21b0      	movs	r1, #176	@ 0xb0
 8001f0e:	f7ff fbf3 	bl	80016f8 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 8001f12:	7b3b      	ldrb	r3, [r7, #12]
 8001f14:	085b      	lsrs	r3, r3, #1
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 8001f1a:	7b7b      	ldrb	r3, [r7, #13]
 8001f1c:	085b      	lsrs	r3, r3, #1
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8001f22:	88fb      	ldrh	r3, [r7, #6]
 8001f24:	b2d8      	uxtb	r0, r3
 8001f26:	f107 020c 	add.w	r2, r7, #12
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	21b6      	movs	r1, #182	@ 0xb6
 8001f2e:	f7ff fbe3 	bl	80016f8 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001f32:	7b7b      	ldrb	r3, [r7, #13]
 8001f34:	021b      	lsls	r3, r3, #8
 8001f36:	b21a      	sxth	r2, r3
 8001f38:	7b3b      	ldrb	r3, [r7, #12]
 8001f3a:	b21b      	sxth	r3, r3
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8001f40:	88fb      	ldrh	r3, [r7, #6]
 8001f42:	b2d8      	uxtb	r0, r3
 8001f44:	f107 020c 	add.w	r2, r7, #12
 8001f48:	2302      	movs	r3, #2
 8001f4a:	21ba      	movs	r1, #186	@ 0xba
 8001f4c:	f7ff fbd4 	bl	80016f8 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001f50:	7b7b      	ldrb	r3, [r7, #13]
 8001f52:	021b      	lsls	r3, r3, #8
 8001f54:	b21a      	sxth	r2, r3
 8001f56:	7b3b      	ldrb	r3, [r7, #12]
 8001f58:	b21b      	sxth	r3, r3
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8001f5e:	88fb      	ldrh	r3, [r7, #6]
 8001f60:	b2d8      	uxtb	r0, r3
 8001f62:	f107 020c 	add.w	r2, r7, #12
 8001f66:	2302      	movs	r3, #2
 8001f68:	21a8      	movs	r1, #168	@ 0xa8
 8001f6a:	f7ff fbc5 	bl	80016f8 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001f6e:	7b7b      	ldrb	r3, [r7, #13]
 8001f70:	021b      	lsls	r3, r3, #8
 8001f72:	b21a      	sxth	r2, r3
 8001f74:	7b3b      	ldrb	r3, [r7, #12]
 8001f76:	b21b      	sxth	r3, r3
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8001f7c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001f80:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	ee07 3a90 	vmov	s15, r3
 8001f8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f8e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8001f92:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	ee07 3a90 	vmov	s15, r3
 8001f9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fa0:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001fa4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001fa8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	ee07 3a90 	vmov	s15, r3
 8001fb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001fba:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001fbe:	ee07 3a90 	vmov	s15, r3
 8001fc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fca:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 8001fce:	edd7 7a04 	vldr	s15, [r7, #16]
 8001fd2:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001fd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fda:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 8001fde:	edd7 7a04 	vldr	s15, [r7, #16]
 8001fe2:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8002028 <HTS221_H_ReadHumidity+0x130>
 8001fe6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fee:	dd01      	ble.n	8001ff4 <HTS221_H_ReadHumidity+0xfc>
 8001ff0:	4b0e      	ldr	r3, [pc, #56]	@ (800202c <HTS221_H_ReadHumidity+0x134>)
 8001ff2:	e00a      	b.n	800200a <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8001ff4:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ff8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002000:	d502      	bpl.n	8002008 <HTS221_H_ReadHumidity+0x110>
 8002002:	f04f 0300 	mov.w	r3, #0
 8002006:	e000      	b.n	800200a <HTS221_H_ReadHumidity+0x112>
 8002008:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 800200a:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 800200c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002010:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002014:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002018:	eef0 7a66 	vmov.f32	s15, s13
}
 800201c:	eeb0 0a67 	vmov.f32	s0, s15
 8002020:	3720      	adds	r7, #32
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	447a0000 	.word	0x447a0000
 800202c:	447a0000 	.word	0x447a0000

08002030 <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	463b      	mov	r3, r7
 8002038:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 800203c:	783b      	ldrb	r3, [r7, #0]
 800203e:	461a      	mov	r2, r3
 8002040:	2120      	movs	r1, #32
 8002042:	203c      	movs	r0, #60	@ 0x3c
 8002044:	f7ff fb20 	bl	8001688 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 8002048:	787b      	ldrb	r3, [r7, #1]
 800204a:	461a      	mov	r2, r3
 800204c:	2121      	movs	r1, #33	@ 0x21
 800204e:	203c      	movs	r0, #60	@ 0x3c
 8002050:	f7ff fb1a 	bl	8001688 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 8002054:	78bb      	ldrb	r3, [r7, #2]
 8002056:	461a      	mov	r2, r3
 8002058:	2122      	movs	r1, #34	@ 0x22
 800205a:	203c      	movs	r0, #60	@ 0x3c
 800205c:	f7ff fb14 	bl	8001688 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 8002060:	78fb      	ldrb	r3, [r7, #3]
 8002062:	461a      	mov	r2, r3
 8002064:	2123      	movs	r1, #35	@ 0x23
 8002066:	203c      	movs	r0, #60	@ 0x3c
 8002068:	f7ff fb0e 	bl	8001688 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 800206c:	793b      	ldrb	r3, [r7, #4]
 800206e:	461a      	mov	r2, r3
 8002070:	2124      	movs	r1, #36	@ 0x24
 8002072:	203c      	movs	r0, #60	@ 0x3c
 8002074:	f7ff fb08 	bl	8001688 <SENSOR_IO_Write>
}
 8002078:	bf00      	nop
 800207a:	3708      	adds	r7, #8
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8002086:	2300      	movs	r3, #0
 8002088:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 800208a:	2122      	movs	r1, #34	@ 0x22
 800208c:	203c      	movs	r0, #60	@ 0x3c
 800208e:	f7ff fb15 	bl	80016bc <SENSOR_IO_Read>
 8002092:	4603      	mov	r3, r0
 8002094:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 8002096:	79fb      	ldrb	r3, [r7, #7]
 8002098:	f023 0303 	bic.w	r3, r3, #3
 800209c:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 800209e:	79fb      	ldrb	r3, [r7, #7]
 80020a0:	f043 0303 	orr.w	r3, r3, #3
 80020a4:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 80020a6:	79fb      	ldrb	r3, [r7, #7]
 80020a8:	461a      	mov	r2, r3
 80020aa:	2122      	movs	r1, #34	@ 0x22
 80020ac:	203c      	movs	r0, #60	@ 0x3c
 80020ae:	f7ff faeb 	bl	8001688 <SENSOR_IO_Write>
}
 80020b2:	bf00      	nop
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 80020be:	f7ff fad9 	bl	8001674 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 80020c2:	210f      	movs	r1, #15
 80020c4:	203c      	movs	r0, #60	@ 0x3c
 80020c6:	f7ff faf9 	bl	80016bc <SENSOR_IO_Read>
 80020ca:	4603      	mov	r3, r0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	4603      	mov	r3, r0
 80020d8:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 80020da:	2300      	movs	r3, #0
 80020dc:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 80020de:	2122      	movs	r1, #34	@ 0x22
 80020e0:	203c      	movs	r0, #60	@ 0x3c
 80020e2:	f7ff faeb 	bl	80016bc <SENSOR_IO_Read>
 80020e6:	4603      	mov	r3, r0
 80020e8:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 80020ea:	7bfb      	ldrb	r3, [r7, #15]
 80020ec:	f023 0320 	bic.w	r3, r3, #32
 80020f0:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80020f2:	88fb      	ldrh	r3, [r7, #6]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d003      	beq.n	8002100 <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 80020f8:	7bfb      	ldrb	r3, [r7, #15]
 80020fa:	f043 0320 	orr.w	r3, r3, #32
 80020fe:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8002100:	7bfb      	ldrb	r3, [r7, #15]
 8002102:	461a      	mov	r2, r3
 8002104:	2122      	movs	r1, #34	@ 0x22
 8002106:	203c      	movs	r0, #60	@ 0x3c
 8002108:	f7ff fabe 	bl	8001688 <SENSOR_IO_Write>
}
 800210c:	bf00      	nop
 800210e:	3710      	adds	r7, #16
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b088      	sub	sp, #32
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 800211c:	2300      	movs	r3, #0
 800211e:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8002120:	2300      	movs	r3, #0
 8002122:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8002124:	f04f 0300 	mov.w	r3, #0
 8002128:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 800212a:	2121      	movs	r1, #33	@ 0x21
 800212c:	203c      	movs	r0, #60	@ 0x3c
 800212e:	f7ff fac5 	bl	80016bc <SENSOR_IO_Read>
 8002132:	4603      	mov	r3, r0
 8002134:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 8002136:	f107 0208 	add.w	r2, r7, #8
 800213a:	2306      	movs	r3, #6
 800213c:	21a8      	movs	r1, #168	@ 0xa8
 800213e:	203c      	movs	r0, #60	@ 0x3c
 8002140:	f7ff fada 	bl	80016f8 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8002144:	2300      	movs	r3, #0
 8002146:	77fb      	strb	r3, [r7, #31]
 8002148:	e01a      	b.n	8002180 <LIS3MDL_MagReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800214a:	7ffb      	ldrb	r3, [r7, #31]
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	3301      	adds	r3, #1
 8002150:	3320      	adds	r3, #32
 8002152:	443b      	add	r3, r7
 8002154:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002158:	021b      	lsls	r3, r3, #8
 800215a:	b29b      	uxth	r3, r3
 800215c:	7ffa      	ldrb	r2, [r7, #31]
 800215e:	0052      	lsls	r2, r2, #1
 8002160:	3220      	adds	r2, #32
 8002162:	443a      	add	r2, r7
 8002164:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8002168:	4413      	add	r3, r2
 800216a:	b29a      	uxth	r2, r3
 800216c:	7ffb      	ldrb	r3, [r7, #31]
 800216e:	b212      	sxth	r2, r2
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	3320      	adds	r3, #32
 8002174:	443b      	add	r3, r7
 8002176:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800217a:	7ffb      	ldrb	r3, [r7, #31]
 800217c:	3301      	adds	r3, #1
 800217e:	77fb      	strb	r3, [r7, #31]
 8002180:	7ffb      	ldrb	r3, [r7, #31]
 8002182:	2b02      	cmp	r3, #2
 8002184:	d9e1      	bls.n	800214a <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 8002186:	7dfb      	ldrb	r3, [r7, #23]
 8002188:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800218c:	2b60      	cmp	r3, #96	@ 0x60
 800218e:	d013      	beq.n	80021b8 <LIS3MDL_MagReadXYZ+0xa4>
 8002190:	2b60      	cmp	r3, #96	@ 0x60
 8002192:	dc14      	bgt.n	80021be <LIS3MDL_MagReadXYZ+0xaa>
 8002194:	2b40      	cmp	r3, #64	@ 0x40
 8002196:	d00c      	beq.n	80021b2 <LIS3MDL_MagReadXYZ+0x9e>
 8002198:	2b40      	cmp	r3, #64	@ 0x40
 800219a:	dc10      	bgt.n	80021be <LIS3MDL_MagReadXYZ+0xaa>
 800219c:	2b00      	cmp	r3, #0
 800219e:	d002      	beq.n	80021a6 <LIS3MDL_MagReadXYZ+0x92>
 80021a0:	2b20      	cmp	r3, #32
 80021a2:	d003      	beq.n	80021ac <LIS3MDL_MagReadXYZ+0x98>
 80021a4:	e00b      	b.n	80021be <LIS3MDL_MagReadXYZ+0xaa>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 80021a6:	4b19      	ldr	r3, [pc, #100]	@ (800220c <LIS3MDL_MagReadXYZ+0xf8>)
 80021a8:	61bb      	str	r3, [r7, #24]
    break;
 80021aa:	e008      	b.n	80021be <LIS3MDL_MagReadXYZ+0xaa>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 80021ac:	4b18      	ldr	r3, [pc, #96]	@ (8002210 <LIS3MDL_MagReadXYZ+0xfc>)
 80021ae:	61bb      	str	r3, [r7, #24]
    break;
 80021b0:	e005      	b.n	80021be <LIS3MDL_MagReadXYZ+0xaa>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 80021b2:	4b18      	ldr	r3, [pc, #96]	@ (8002214 <LIS3MDL_MagReadXYZ+0x100>)
 80021b4:	61bb      	str	r3, [r7, #24]
    break;
 80021b6:	e002      	b.n	80021be <LIS3MDL_MagReadXYZ+0xaa>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 80021b8:	4b17      	ldr	r3, [pc, #92]	@ (8002218 <LIS3MDL_MagReadXYZ+0x104>)
 80021ba:	61bb      	str	r3, [r7, #24]
    break;    
 80021bc:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 80021be:	2300      	movs	r3, #0
 80021c0:	77fb      	strb	r3, [r7, #31]
 80021c2:	e01a      	b.n	80021fa <LIS3MDL_MagReadXYZ+0xe6>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80021c4:	7ffb      	ldrb	r3, [r7, #31]
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	3320      	adds	r3, #32
 80021ca:	443b      	add	r3, r7
 80021cc:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80021d0:	ee07 3a90 	vmov	s15, r3
 80021d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021d8:	edd7 7a06 	vldr	s15, [r7, #24]
 80021dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021e0:	7ffb      	ldrb	r3, [r7, #31]
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	4413      	add	r3, r2
 80021e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021ec:	ee17 2a90 	vmov	r2, s15
 80021f0:	b212      	sxth	r2, r2
 80021f2:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80021f4:	7ffb      	ldrb	r3, [r7, #31]
 80021f6:	3301      	adds	r3, #1
 80021f8:	77fb      	strb	r3, [r7, #31]
 80021fa:	7ffb      	ldrb	r3, [r7, #31]
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d9e1      	bls.n	80021c4 <LIS3MDL_MagReadXYZ+0xb0>
  }
}
 8002200:	bf00      	nop
 8002202:	bf00      	nop
 8002204:	3720      	adds	r7, #32
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	3e0f5c29 	.word	0x3e0f5c29
 8002210:	3e947ae1 	.word	0x3e947ae1
 8002214:	3edc28f6 	.word	0x3edc28f6
 8002218:	3f147ae1 	.word	0x3f147ae1

0800221c <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	4603      	mov	r3, r0
 8002224:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 8002226:	88fb      	ldrh	r3, [r7, #6]
 8002228:	4618      	mov	r0, r3
 800222a:	f000 f879 	bl	8002320 <LPS22HB_Init>
}
 800222e:	bf00      	nop
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 8002236:	b580      	push	{r7, lr}
 8002238:	b084      	sub	sp, #16
 800223a:	af00      	add	r7, sp, #0
 800223c:	4603      	mov	r3, r0
 800223e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002240:	2300      	movs	r3, #0
 8002242:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 8002244:	f7ff fa16 	bl	8001674 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8002248:	88fb      	ldrh	r3, [r7, #6]
 800224a:	b2db      	uxtb	r3, r3
 800224c:	210f      	movs	r1, #15
 800224e:	4618      	mov	r0, r3
 8002250:	f7ff fa34 	bl	80016bc <SENSOR_IO_Read>
 8002254:	4603      	mov	r3, r0
 8002256:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8002258:	7bfb      	ldrb	r3, [r7, #15]
}
 800225a:	4618      	mov	r0, r3
 800225c:	3710      	adds	r7, #16
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
	...

08002264 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8002264:	b590      	push	{r4, r7, lr}
 8002266:	b087      	sub	sp, #28
 8002268:	af00      	add	r7, sp, #0
 800226a:	4603      	mov	r3, r0
 800226c:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 800226e:	2300      	movs	r3, #0
 8002270:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 8002272:	2300      	movs	r3, #0
 8002274:	74fb      	strb	r3, [r7, #19]
 8002276:	e013      	b.n	80022a0 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 8002278:	88fb      	ldrh	r3, [r7, #6]
 800227a:	b2da      	uxtb	r2, r3
 800227c:	7cfb      	ldrb	r3, [r7, #19]
 800227e:	3328      	adds	r3, #40	@ 0x28
 8002280:	b2db      	uxtb	r3, r3
 8002282:	7cfc      	ldrb	r4, [r7, #19]
 8002284:	4619      	mov	r1, r3
 8002286:	4610      	mov	r0, r2
 8002288:	f7ff fa18 	bl	80016bc <SENSOR_IO_Read>
 800228c:	4603      	mov	r3, r0
 800228e:	461a      	mov	r2, r3
 8002290:	f104 0318 	add.w	r3, r4, #24
 8002294:	443b      	add	r3, r7
 8002296:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 800229a:	7cfb      	ldrb	r3, [r7, #19]
 800229c:	3301      	adds	r3, #1
 800229e:	74fb      	strb	r3, [r7, #19]
 80022a0:	7cfb      	ldrb	r3, [r7, #19]
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d9e8      	bls.n	8002278 <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 80022a6:	2300      	movs	r3, #0
 80022a8:	74fb      	strb	r3, [r7, #19]
 80022aa:	e00f      	b.n	80022cc <LPS22HB_P_ReadPressure+0x68>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 80022ac:	7cfb      	ldrb	r3, [r7, #19]
 80022ae:	3318      	adds	r3, #24
 80022b0:	443b      	add	r3, r7
 80022b2:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80022b6:	461a      	mov	r2, r3
 80022b8:	7cfb      	ldrb	r3, [r7, #19]
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	697a      	ldr	r2, [r7, #20]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 80022c6:	7cfb      	ldrb	r3, [r7, #19]
 80022c8:	3301      	adds	r3, #1
 80022ca:	74fb      	strb	r3, [r7, #19]
 80022cc:	7cfb      	ldrb	r3, [r7, #19]
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d9ec      	bls.n	80022ac <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d003      	beq.n	80022e4 <LPS22HB_P_ReadPressure+0x80>
    tmp |= 0xFF000000;
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80022e2:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2264      	movs	r2, #100	@ 0x64
 80022ec:	fb02 f303 	mul.w	r3, r2, r3
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	da01      	bge.n	80022f8 <LPS22HB_P_ReadPressure+0x94>
 80022f4:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 80022f8:	131b      	asrs	r3, r3, #12
 80022fa:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	ee07 3a90 	vmov	s15, r3
 8002302:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002306:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800231c <LPS22HB_P_ReadPressure+0xb8>
 800230a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800230e:	eef0 7a66 	vmov.f32	s15, s13
}
 8002312:	eeb0 0a67 	vmov.f32	s0, s15
 8002316:	371c      	adds	r7, #28
 8002318:	46bd      	mov	sp, r7
 800231a:	bd90      	pop	{r4, r7, pc}
 800231c:	42c80000 	.word	0x42c80000

08002320 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	4603      	mov	r3, r0
 8002328:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 800232a:	88fb      	ldrh	r3, [r7, #6]
 800232c:	b2db      	uxtb	r3, r3
 800232e:	211a      	movs	r1, #26
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff f9c3 	bl	80016bc <SENSOR_IO_Read>
 8002336:	4603      	mov	r3, r0
 8002338:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 800233a:	7bfb      	ldrb	r3, [r7, #15]
 800233c:	f023 0301 	bic.w	r3, r3, #1
 8002340:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 8002342:	7bfb      	ldrb	r3, [r7, #15]
 8002344:	f043 0301 	orr.w	r3, r3, #1
 8002348:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 800234a:	88fb      	ldrh	r3, [r7, #6]
 800234c:	b2db      	uxtb	r3, r3
 800234e:	7bfa      	ldrb	r2, [r7, #15]
 8002350:	211a      	movs	r1, #26
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff f998 	bl	8001688 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8002358:	88fb      	ldrh	r3, [r7, #6]
 800235a:	b2db      	uxtb	r3, r3
 800235c:	2110      	movs	r1, #16
 800235e:	4618      	mov	r0, r3
 8002360:	f7ff f9ac 	bl	80016bc <SENSOR_IO_Read>
 8002364:	4603      	mov	r3, r0
 8002366:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 8002368:	7bfb      	ldrb	r3, [r7, #15]
 800236a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800236e:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 8002370:	7bfb      	ldrb	r3, [r7, #15]
 8002372:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8002376:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 8002378:	7bfb      	ldrb	r3, [r7, #15]
 800237a:	f023 0302 	bic.w	r3, r3, #2
 800237e:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 8002380:	7bfb      	ldrb	r3, [r7, #15]
 8002382:	f043 0302 	orr.w	r3, r3, #2
 8002386:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 8002388:	88fb      	ldrh	r3, [r7, #6]
 800238a:	b2db      	uxtb	r3, r3
 800238c:	7bfa      	ldrb	r2, [r7, #15]
 800238e:	2110      	movs	r1, #16
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff f979 	bl	8001688 <SENSOR_IO_Write>
}  
 8002396:	bf00      	nop
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 800239e:	b580      	push	{r7, lr}
 80023a0:	b084      	sub	sp, #16
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	4603      	mov	r3, r0
 80023a6:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80023a8:	2300      	movs	r3, #0
 80023aa:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80023ac:	2110      	movs	r1, #16
 80023ae:	20d4      	movs	r0, #212	@ 0xd4
 80023b0:	f7ff f984 	bl	80016bc <SENSOR_IO_Read>
 80023b4:	4603      	mov	r3, r0
 80023b6:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 80023b8:	88fb      	ldrh	r3, [r7, #6]
 80023ba:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 80023bc:	7bbb      	ldrb	r3, [r7, #14]
 80023be:	f003 0303 	and.w	r3, r3, #3
 80023c2:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 80023c4:	7bba      	ldrb	r2, [r7, #14]
 80023c6:	7bfb      	ldrb	r3, [r7, #15]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 80023cc:	7bbb      	ldrb	r3, [r7, #14]
 80023ce:	461a      	mov	r2, r3
 80023d0:	2110      	movs	r1, #16
 80023d2:	20d4      	movs	r0, #212	@ 0xd4
 80023d4:	f7ff f958 	bl	8001688 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 80023d8:	2112      	movs	r1, #18
 80023da:	20d4      	movs	r0, #212	@ 0xd4
 80023dc:	f7ff f96e 	bl	80016bc <SENSOR_IO_Read>
 80023e0:	4603      	mov	r3, r0
 80023e2:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 80023e4:	88fb      	ldrh	r3, [r7, #6]
 80023e6:	0a1b      	lsrs	r3, r3, #8
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 80023ec:	7bbb      	ldrb	r3, [r7, #14]
 80023ee:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 80023f2:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 80023f4:	7bba      	ldrb	r2, [r7, #14]
 80023f6:	7bfb      	ldrb	r3, [r7, #15]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 80023fc:	7bbb      	ldrb	r3, [r7, #14]
 80023fe:	461a      	mov	r2, r3
 8002400:	2112      	movs	r1, #18
 8002402:	20d4      	movs	r0, #212	@ 0xd4
 8002404:	f7ff f940 	bl	8001688 <SENSOR_IO_Write>
}
 8002408:	bf00      	nop
 800240a:	3710      	adds	r7, #16
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8002416:	2300      	movs	r3, #0
 8002418:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800241a:	2110      	movs	r1, #16
 800241c:	20d4      	movs	r0, #212	@ 0xd4
 800241e:	f7ff f94d 	bl	80016bc <SENSOR_IO_Read>
 8002422:	4603      	mov	r3, r0
 8002424:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8002426:	79fb      	ldrb	r3, [r7, #7]
 8002428:	f003 030f 	and.w	r3, r3, #15
 800242c:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 800242e:	79fb      	ldrb	r3, [r7, #7]
 8002430:	461a      	mov	r2, r3
 8002432:	2110      	movs	r1, #16
 8002434:	20d4      	movs	r0, #212	@ 0xd4
 8002436:	f7ff f927 	bl	8001688 <SENSOR_IO_Write>
}
 800243a:	bf00      	nop
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8002442:	b580      	push	{r7, lr}
 8002444:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8002446:	f7ff f915 	bl	8001674 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 800244a:	210f      	movs	r1, #15
 800244c:	20d4      	movs	r0, #212	@ 0xd4
 800244e:	f7ff f935 	bl	80016bc <SENSOR_IO_Read>
 8002452:	4603      	mov	r3, r0
}
 8002454:	4618      	mov	r0, r3
 8002456:	bd80      	pop	{r7, pc}

08002458 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	4603      	mov	r3, r0
 8002460:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002462:	2300      	movs	r3, #0
 8002464:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8002466:	2115      	movs	r1, #21
 8002468:	20d4      	movs	r0, #212	@ 0xd4
 800246a:	f7ff f927 	bl	80016bc <SENSOR_IO_Read>
 800246e:	4603      	mov	r3, r0
 8002470:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8002472:	7bfb      	ldrb	r3, [r7, #15]
 8002474:	f023 0310 	bic.w	r3, r3, #16
 8002478:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 800247a:	88fb      	ldrh	r3, [r7, #6]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d003      	beq.n	8002488 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8002480:	7bfb      	ldrb	r3, [r7, #15]
 8002482:	f043 0310 	orr.w	r3, r3, #16
 8002486:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8002488:	7bfb      	ldrb	r3, [r7, #15]
 800248a:	461a      	mov	r2, r3
 800248c:	2115      	movs	r1, #21
 800248e:	20d4      	movs	r0, #212	@ 0xd4
 8002490:	f7ff f8fa 	bl	8001688 <SENSOR_IO_Write>
}
 8002494:	bf00      	nop
 8002496:	3710      	adds	r7, #16
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b088      	sub	sp, #32
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 80024a4:	2300      	movs	r3, #0
 80024a6:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80024a8:	2300      	movs	r3, #0
 80024aa:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80024ac:	f04f 0300 	mov.w	r3, #0
 80024b0:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80024b2:	2110      	movs	r1, #16
 80024b4:	20d4      	movs	r0, #212	@ 0xd4
 80024b6:	f7ff f901 	bl	80016bc <SENSOR_IO_Read>
 80024ba:	4603      	mov	r3, r0
 80024bc:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 80024be:	f107 0208 	add.w	r2, r7, #8
 80024c2:	2306      	movs	r3, #6
 80024c4:	2128      	movs	r1, #40	@ 0x28
 80024c6:	20d4      	movs	r0, #212	@ 0xd4
 80024c8:	f7ff f916 	bl	80016f8 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80024cc:	2300      	movs	r3, #0
 80024ce:	77fb      	strb	r3, [r7, #31]
 80024d0:	e01a      	b.n	8002508 <LSM6DSL_AccReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80024d2:	7ffb      	ldrb	r3, [r7, #31]
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	3301      	adds	r3, #1
 80024d8:	3320      	adds	r3, #32
 80024da:	443b      	add	r3, r7
 80024dc:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80024e0:	021b      	lsls	r3, r3, #8
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	7ffa      	ldrb	r2, [r7, #31]
 80024e6:	0052      	lsls	r2, r2, #1
 80024e8:	3220      	adds	r2, #32
 80024ea:	443a      	add	r2, r7
 80024ec:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 80024f0:	4413      	add	r3, r2
 80024f2:	b29a      	uxth	r2, r3
 80024f4:	7ffb      	ldrb	r3, [r7, #31]
 80024f6:	b212      	sxth	r2, r2
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	3320      	adds	r3, #32
 80024fc:	443b      	add	r3, r7
 80024fe:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8002502:	7ffb      	ldrb	r3, [r7, #31]
 8002504:	3301      	adds	r3, #1
 8002506:	77fb      	strb	r3, [r7, #31]
 8002508:	7ffb      	ldrb	r3, [r7, #31]
 800250a:	2b02      	cmp	r3, #2
 800250c:	d9e1      	bls.n	80024d2 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 800250e:	7dfb      	ldrb	r3, [r7, #23]
 8002510:	f003 030c 	and.w	r3, r3, #12
 8002514:	2b0c      	cmp	r3, #12
 8002516:	d829      	bhi.n	800256c <LSM6DSL_AccReadXYZ+0xd0>
 8002518:	a201      	add	r2, pc, #4	@ (adr r2, 8002520 <LSM6DSL_AccReadXYZ+0x84>)
 800251a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800251e:	bf00      	nop
 8002520:	08002555 	.word	0x08002555
 8002524:	0800256d 	.word	0x0800256d
 8002528:	0800256d 	.word	0x0800256d
 800252c:	0800256d 	.word	0x0800256d
 8002530:	08002567 	.word	0x08002567
 8002534:	0800256d 	.word	0x0800256d
 8002538:	0800256d 	.word	0x0800256d
 800253c:	0800256d 	.word	0x0800256d
 8002540:	0800255b 	.word	0x0800255b
 8002544:	0800256d 	.word	0x0800256d
 8002548:	0800256d 	.word	0x0800256d
 800254c:	0800256d 	.word	0x0800256d
 8002550:	08002561 	.word	0x08002561
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8002554:	4b18      	ldr	r3, [pc, #96]	@ (80025b8 <LSM6DSL_AccReadXYZ+0x11c>)
 8002556:	61bb      	str	r3, [r7, #24]
    break;
 8002558:	e008      	b.n	800256c <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 800255a:	4b18      	ldr	r3, [pc, #96]	@ (80025bc <LSM6DSL_AccReadXYZ+0x120>)
 800255c:	61bb      	str	r3, [r7, #24]
    break;
 800255e:	e005      	b.n	800256c <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8002560:	4b17      	ldr	r3, [pc, #92]	@ (80025c0 <LSM6DSL_AccReadXYZ+0x124>)
 8002562:	61bb      	str	r3, [r7, #24]
    break;
 8002564:	e002      	b.n	800256c <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8002566:	4b17      	ldr	r3, [pc, #92]	@ (80025c4 <LSM6DSL_AccReadXYZ+0x128>)
 8002568:	61bb      	str	r3, [r7, #24]
    break;    
 800256a:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 800256c:	2300      	movs	r3, #0
 800256e:	77fb      	strb	r3, [r7, #31]
 8002570:	e01a      	b.n	80025a8 <LSM6DSL_AccReadXYZ+0x10c>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8002572:	7ffb      	ldrb	r3, [r7, #31]
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	3320      	adds	r3, #32
 8002578:	443b      	add	r3, r7
 800257a:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800257e:	ee07 3a90 	vmov	s15, r3
 8002582:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002586:	edd7 7a06 	vldr	s15, [r7, #24]
 800258a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800258e:	7ffb      	ldrb	r3, [r7, #31]
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	4413      	add	r3, r2
 8002596:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800259a:	ee17 2a90 	vmov	r2, s15
 800259e:	b212      	sxth	r2, r2
 80025a0:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80025a2:	7ffb      	ldrb	r3, [r7, #31]
 80025a4:	3301      	adds	r3, #1
 80025a6:	77fb      	strb	r3, [r7, #31]
 80025a8:	7ffb      	ldrb	r3, [r7, #31]
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d9e1      	bls.n	8002572 <LSM6DSL_AccReadXYZ+0xd6>
  }
}
 80025ae:	bf00      	nop
 80025b0:	bf00      	nop
 80025b2:	3720      	adds	r7, #32
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	3d79db23 	.word	0x3d79db23
 80025bc:	3df9db23 	.word	0x3df9db23
 80025c0:	3e79db23 	.word	0x3e79db23
 80025c4:	3ef9db23 	.word	0x3ef9db23

080025c8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80025ce:	2300      	movs	r3, #0
 80025d0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025d2:	2003      	movs	r0, #3
 80025d4:	f000 f8dd 	bl	8002792 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80025d8:	200f      	movs	r0, #15
 80025da:	f7ff faa9 	bl	8001b30 <HAL_InitTick>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d002      	beq.n	80025ea <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	71fb      	strb	r3, [r7, #7]
 80025e8:	e001      	b.n	80025ee <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80025ea:	f7ff f999 	bl	8001920 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80025ee:	79fb      	ldrb	r3, [r7, #7]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3708      	adds	r7, #8
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80025fc:	4b06      	ldr	r3, [pc, #24]	@ (8002618 <HAL_IncTick+0x20>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	461a      	mov	r2, r3
 8002602:	4b06      	ldr	r3, [pc, #24]	@ (800261c <HAL_IncTick+0x24>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4413      	add	r3, r2
 8002608:	4a04      	ldr	r2, [pc, #16]	@ (800261c <HAL_IncTick+0x24>)
 800260a:	6013      	str	r3, [r2, #0]
}
 800260c:	bf00      	nop
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	20000088 	.word	0x20000088
 800261c:	2000068c 	.word	0x2000068c

08002620 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  return uwTick;
 8002624:	4b03      	ldr	r3, [pc, #12]	@ (8002634 <HAL_GetTick+0x14>)
 8002626:	681b      	ldr	r3, [r3, #0]
}
 8002628:	4618      	mov	r0, r3
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	2000068c 	.word	0x2000068c

08002638 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002638:	b480      	push	{r7}
 800263a:	b085      	sub	sp, #20
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f003 0307 	and.w	r3, r3, #7
 8002646:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002648:	4b0c      	ldr	r3, [pc, #48]	@ (800267c <__NVIC_SetPriorityGrouping+0x44>)
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800264e:	68ba      	ldr	r2, [r7, #8]
 8002650:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002654:	4013      	ands	r3, r2
 8002656:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002660:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002664:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002668:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800266a:	4a04      	ldr	r2, [pc, #16]	@ (800267c <__NVIC_SetPriorityGrouping+0x44>)
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	60d3      	str	r3, [r2, #12]
}
 8002670:	bf00      	nop
 8002672:	3714      	adds	r7, #20
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr
 800267c:	e000ed00 	.word	0xe000ed00

08002680 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002684:	4b04      	ldr	r3, [pc, #16]	@ (8002698 <__NVIC_GetPriorityGrouping+0x18>)
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	0a1b      	lsrs	r3, r3, #8
 800268a:	f003 0307 	and.w	r3, r3, #7
}
 800268e:	4618      	mov	r0, r3
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr
 8002698:	e000ed00 	.word	0xe000ed00

0800269c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	4603      	mov	r3, r0
 80026a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	db0b      	blt.n	80026c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026ae:	79fb      	ldrb	r3, [r7, #7]
 80026b0:	f003 021f 	and.w	r2, r3, #31
 80026b4:	4907      	ldr	r1, [pc, #28]	@ (80026d4 <__NVIC_EnableIRQ+0x38>)
 80026b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ba:	095b      	lsrs	r3, r3, #5
 80026bc:	2001      	movs	r0, #1
 80026be:	fa00 f202 	lsl.w	r2, r0, r2
 80026c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80026c6:	bf00      	nop
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	e000e100 	.word	0xe000e100

080026d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	4603      	mov	r3, r0
 80026e0:	6039      	str	r1, [r7, #0]
 80026e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	db0a      	blt.n	8002702 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	b2da      	uxtb	r2, r3
 80026f0:	490c      	ldr	r1, [pc, #48]	@ (8002724 <__NVIC_SetPriority+0x4c>)
 80026f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f6:	0112      	lsls	r2, r2, #4
 80026f8:	b2d2      	uxtb	r2, r2
 80026fa:	440b      	add	r3, r1
 80026fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002700:	e00a      	b.n	8002718 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	b2da      	uxtb	r2, r3
 8002706:	4908      	ldr	r1, [pc, #32]	@ (8002728 <__NVIC_SetPriority+0x50>)
 8002708:	79fb      	ldrb	r3, [r7, #7]
 800270a:	f003 030f 	and.w	r3, r3, #15
 800270e:	3b04      	subs	r3, #4
 8002710:	0112      	lsls	r2, r2, #4
 8002712:	b2d2      	uxtb	r2, r2
 8002714:	440b      	add	r3, r1
 8002716:	761a      	strb	r2, [r3, #24]
}
 8002718:	bf00      	nop
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr
 8002724:	e000e100 	.word	0xe000e100
 8002728:	e000ed00 	.word	0xe000ed00

0800272c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800272c:	b480      	push	{r7}
 800272e:	b089      	sub	sp, #36	@ 0x24
 8002730:	af00      	add	r7, sp, #0
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	60b9      	str	r1, [r7, #8]
 8002736:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f003 0307 	and.w	r3, r3, #7
 800273e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	f1c3 0307 	rsb	r3, r3, #7
 8002746:	2b04      	cmp	r3, #4
 8002748:	bf28      	it	cs
 800274a:	2304      	movcs	r3, #4
 800274c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	3304      	adds	r3, #4
 8002752:	2b06      	cmp	r3, #6
 8002754:	d902      	bls.n	800275c <NVIC_EncodePriority+0x30>
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	3b03      	subs	r3, #3
 800275a:	e000      	b.n	800275e <NVIC_EncodePriority+0x32>
 800275c:	2300      	movs	r3, #0
 800275e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002760:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	fa02 f303 	lsl.w	r3, r2, r3
 800276a:	43da      	mvns	r2, r3
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	401a      	ands	r2, r3
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002774:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	fa01 f303 	lsl.w	r3, r1, r3
 800277e:	43d9      	mvns	r1, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002784:	4313      	orrs	r3, r2
         );
}
 8002786:	4618      	mov	r0, r3
 8002788:	3724      	adds	r7, #36	@ 0x24
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr

08002792 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002792:	b580      	push	{r7, lr}
 8002794:	b082      	sub	sp, #8
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f7ff ff4c 	bl	8002638 <__NVIC_SetPriorityGrouping>
}
 80027a0:	bf00      	nop
 80027a2:	3708      	adds	r7, #8
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b086      	sub	sp, #24
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	4603      	mov	r3, r0
 80027b0:	60b9      	str	r1, [r7, #8]
 80027b2:	607a      	str	r2, [r7, #4]
 80027b4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80027b6:	2300      	movs	r3, #0
 80027b8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027ba:	f7ff ff61 	bl	8002680 <__NVIC_GetPriorityGrouping>
 80027be:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	68b9      	ldr	r1, [r7, #8]
 80027c4:	6978      	ldr	r0, [r7, #20]
 80027c6:	f7ff ffb1 	bl	800272c <NVIC_EncodePriority>
 80027ca:	4602      	mov	r2, r0
 80027cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027d0:	4611      	mov	r1, r2
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7ff ff80 	bl	80026d8 <__NVIC_SetPriority>
}
 80027d8:	bf00      	nop
 80027da:	3718      	adds	r7, #24
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	4603      	mov	r3, r0
 80027e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7ff ff54 	bl	800269c <__NVIC_EnableIRQ>
}
 80027f4:	bf00      	nop
 80027f6:	3708      	adds	r7, #8
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b087      	sub	sp, #28
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002806:	2300      	movs	r3, #0
 8002808:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800280a:	e166      	b.n	8002ada <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	2101      	movs	r1, #1
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	fa01 f303 	lsl.w	r3, r1, r3
 8002818:	4013      	ands	r3, r2
 800281a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2b00      	cmp	r3, #0
 8002820:	f000 8158 	beq.w	8002ad4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f003 0303 	and.w	r3, r3, #3
 800282c:	2b01      	cmp	r3, #1
 800282e:	d005      	beq.n	800283c <HAL_GPIO_Init+0x40>
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f003 0303 	and.w	r3, r3, #3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d130      	bne.n	800289e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	2203      	movs	r2, #3
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	43db      	mvns	r3, r3
 800284e:	693a      	ldr	r2, [r7, #16]
 8002850:	4013      	ands	r3, r2
 8002852:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	68da      	ldr	r2, [r3, #12]
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	693a      	ldr	r2, [r7, #16]
 8002862:	4313      	orrs	r3, r2
 8002864:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	693a      	ldr	r2, [r7, #16]
 800286a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002872:	2201      	movs	r2, #1
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	fa02 f303 	lsl.w	r3, r2, r3
 800287a:	43db      	mvns	r3, r3
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	4013      	ands	r3, r2
 8002880:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	091b      	lsrs	r3, r3, #4
 8002888:	f003 0201 	and.w	r2, r3, #1
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	fa02 f303 	lsl.w	r3, r2, r3
 8002892:	693a      	ldr	r2, [r7, #16]
 8002894:	4313      	orrs	r3, r2
 8002896:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f003 0303 	and.w	r3, r3, #3
 80028a6:	2b03      	cmp	r3, #3
 80028a8:	d017      	beq.n	80028da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	2203      	movs	r2, #3
 80028b6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ba:	43db      	mvns	r3, r3
 80028bc:	693a      	ldr	r2, [r7, #16]
 80028be:	4013      	ands	r3, r2
 80028c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	689a      	ldr	r2, [r3, #8]
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	fa02 f303 	lsl.w	r3, r2, r3
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f003 0303 	and.w	r3, r3, #3
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d123      	bne.n	800292e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	08da      	lsrs	r2, r3, #3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	3208      	adds	r2, #8
 80028ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	f003 0307 	and.w	r3, r3, #7
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	220f      	movs	r2, #15
 80028fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002902:	43db      	mvns	r3, r3
 8002904:	693a      	ldr	r2, [r7, #16]
 8002906:	4013      	ands	r3, r2
 8002908:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	691a      	ldr	r2, [r3, #16]
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	f003 0307 	and.w	r3, r3, #7
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	fa02 f303 	lsl.w	r3, r2, r3
 800291a:	693a      	ldr	r2, [r7, #16]
 800291c:	4313      	orrs	r3, r2
 800291e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	08da      	lsrs	r2, r3, #3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	3208      	adds	r2, #8
 8002928:	6939      	ldr	r1, [r7, #16]
 800292a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	2203      	movs	r2, #3
 800293a:	fa02 f303 	lsl.w	r3, r2, r3
 800293e:	43db      	mvns	r3, r3
 8002940:	693a      	ldr	r2, [r7, #16]
 8002942:	4013      	ands	r3, r2
 8002944:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f003 0203 	and.w	r2, r3, #3
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	fa02 f303 	lsl.w	r3, r2, r3
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	4313      	orrs	r3, r2
 800295a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	693a      	ldr	r2, [r7, #16]
 8002960:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800296a:	2b00      	cmp	r3, #0
 800296c:	f000 80b2 	beq.w	8002ad4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002970:	4b61      	ldr	r3, [pc, #388]	@ (8002af8 <HAL_GPIO_Init+0x2fc>)
 8002972:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002974:	4a60      	ldr	r2, [pc, #384]	@ (8002af8 <HAL_GPIO_Init+0x2fc>)
 8002976:	f043 0301 	orr.w	r3, r3, #1
 800297a:	6613      	str	r3, [r2, #96]	@ 0x60
 800297c:	4b5e      	ldr	r3, [pc, #376]	@ (8002af8 <HAL_GPIO_Init+0x2fc>)
 800297e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	60bb      	str	r3, [r7, #8]
 8002986:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002988:	4a5c      	ldr	r2, [pc, #368]	@ (8002afc <HAL_GPIO_Init+0x300>)
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	089b      	lsrs	r3, r3, #2
 800298e:	3302      	adds	r3, #2
 8002990:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002994:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	f003 0303 	and.w	r3, r3, #3
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	220f      	movs	r2, #15
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	43db      	mvns	r3, r3
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	4013      	ands	r3, r2
 80029aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80029b2:	d02b      	beq.n	8002a0c <HAL_GPIO_Init+0x210>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a52      	ldr	r2, [pc, #328]	@ (8002b00 <HAL_GPIO_Init+0x304>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d025      	beq.n	8002a08 <HAL_GPIO_Init+0x20c>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a51      	ldr	r2, [pc, #324]	@ (8002b04 <HAL_GPIO_Init+0x308>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d01f      	beq.n	8002a04 <HAL_GPIO_Init+0x208>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a50      	ldr	r2, [pc, #320]	@ (8002b08 <HAL_GPIO_Init+0x30c>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d019      	beq.n	8002a00 <HAL_GPIO_Init+0x204>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4a4f      	ldr	r2, [pc, #316]	@ (8002b0c <HAL_GPIO_Init+0x310>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d013      	beq.n	80029fc <HAL_GPIO_Init+0x200>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4a4e      	ldr	r2, [pc, #312]	@ (8002b10 <HAL_GPIO_Init+0x314>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d00d      	beq.n	80029f8 <HAL_GPIO_Init+0x1fc>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a4d      	ldr	r2, [pc, #308]	@ (8002b14 <HAL_GPIO_Init+0x318>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d007      	beq.n	80029f4 <HAL_GPIO_Init+0x1f8>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a4c      	ldr	r2, [pc, #304]	@ (8002b18 <HAL_GPIO_Init+0x31c>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d101      	bne.n	80029f0 <HAL_GPIO_Init+0x1f4>
 80029ec:	2307      	movs	r3, #7
 80029ee:	e00e      	b.n	8002a0e <HAL_GPIO_Init+0x212>
 80029f0:	2308      	movs	r3, #8
 80029f2:	e00c      	b.n	8002a0e <HAL_GPIO_Init+0x212>
 80029f4:	2306      	movs	r3, #6
 80029f6:	e00a      	b.n	8002a0e <HAL_GPIO_Init+0x212>
 80029f8:	2305      	movs	r3, #5
 80029fa:	e008      	b.n	8002a0e <HAL_GPIO_Init+0x212>
 80029fc:	2304      	movs	r3, #4
 80029fe:	e006      	b.n	8002a0e <HAL_GPIO_Init+0x212>
 8002a00:	2303      	movs	r3, #3
 8002a02:	e004      	b.n	8002a0e <HAL_GPIO_Init+0x212>
 8002a04:	2302      	movs	r3, #2
 8002a06:	e002      	b.n	8002a0e <HAL_GPIO_Init+0x212>
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e000      	b.n	8002a0e <HAL_GPIO_Init+0x212>
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	697a      	ldr	r2, [r7, #20]
 8002a10:	f002 0203 	and.w	r2, r2, #3
 8002a14:	0092      	lsls	r2, r2, #2
 8002a16:	4093      	lsls	r3, r2
 8002a18:	693a      	ldr	r2, [r7, #16]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a1e:	4937      	ldr	r1, [pc, #220]	@ (8002afc <HAL_GPIO_Init+0x300>)
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	089b      	lsrs	r3, r3, #2
 8002a24:	3302      	adds	r3, #2
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a2c:	4b3b      	ldr	r3, [pc, #236]	@ (8002b1c <HAL_GPIO_Init+0x320>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	43db      	mvns	r3, r3
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d003      	beq.n	8002a50 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002a48:	693a      	ldr	r2, [r7, #16]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a50:	4a32      	ldr	r2, [pc, #200]	@ (8002b1c <HAL_GPIO_Init+0x320>)
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002a56:	4b31      	ldr	r3, [pc, #196]	@ (8002b1c <HAL_GPIO_Init+0x320>)
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	43db      	mvns	r3, r3
 8002a60:	693a      	ldr	r2, [r7, #16]
 8002a62:	4013      	ands	r3, r2
 8002a64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d003      	beq.n	8002a7a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002a72:	693a      	ldr	r2, [r7, #16]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a7a:	4a28      	ldr	r2, [pc, #160]	@ (8002b1c <HAL_GPIO_Init+0x320>)
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002a80:	4b26      	ldr	r3, [pc, #152]	@ (8002b1c <HAL_GPIO_Init+0x320>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	43db      	mvns	r3, r3
 8002a8a:	693a      	ldr	r2, [r7, #16]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d003      	beq.n	8002aa4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002aa4:	4a1d      	ldr	r2, [pc, #116]	@ (8002b1c <HAL_GPIO_Init+0x320>)
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002aaa:	4b1c      	ldr	r3, [pc, #112]	@ (8002b1c <HAL_GPIO_Init+0x320>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	43db      	mvns	r3, r3
 8002ab4:	693a      	ldr	r2, [r7, #16]
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d003      	beq.n	8002ace <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002ac6:	693a      	ldr	r2, [r7, #16]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ace:	4a13      	ldr	r2, [pc, #76]	@ (8002b1c <HAL_GPIO_Init+0x320>)
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	f47f ae91 	bne.w	800280c <HAL_GPIO_Init+0x10>
  }
}
 8002aea:	bf00      	nop
 8002aec:	bf00      	nop
 8002aee:	371c      	adds	r7, #28
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr
 8002af8:	40021000 	.word	0x40021000
 8002afc:	40010000 	.word	0x40010000
 8002b00:	48000400 	.word	0x48000400
 8002b04:	48000800 	.word	0x48000800
 8002b08:	48000c00 	.word	0x48000c00
 8002b0c:	48001000 	.word	0x48001000
 8002b10:	48001400 	.word	0x48001400
 8002b14:	48001800 	.word	0x48001800
 8002b18:	48001c00 	.word	0x48001c00
 8002b1c:	40010400 	.word	0x40010400

08002b20 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b087      	sub	sp, #28
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002b2e:	e0c9      	b.n	8002cc4 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002b30:	2201      	movs	r2, #1
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	683a      	ldr	r2, [r7, #0]
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	f000 80bc 	beq.w	8002cbe <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002b46:	4a66      	ldr	r2, [pc, #408]	@ (8002ce0 <HAL_GPIO_DeInit+0x1c0>)
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	089b      	lsrs	r3, r3, #2
 8002b4c:	3302      	adds	r3, #2
 8002b4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b52:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	f003 0303 	and.w	r3, r3, #3
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	220f      	movs	r2, #15
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	68fa      	ldr	r2, [r7, #12]
 8002b64:	4013      	ands	r3, r2
 8002b66:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002b6e:	d02b      	beq.n	8002bc8 <HAL_GPIO_DeInit+0xa8>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	4a5c      	ldr	r2, [pc, #368]	@ (8002ce4 <HAL_GPIO_DeInit+0x1c4>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d025      	beq.n	8002bc4 <HAL_GPIO_DeInit+0xa4>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4a5b      	ldr	r2, [pc, #364]	@ (8002ce8 <HAL_GPIO_DeInit+0x1c8>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d01f      	beq.n	8002bc0 <HAL_GPIO_DeInit+0xa0>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4a5a      	ldr	r2, [pc, #360]	@ (8002cec <HAL_GPIO_DeInit+0x1cc>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d019      	beq.n	8002bbc <HAL_GPIO_DeInit+0x9c>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4a59      	ldr	r2, [pc, #356]	@ (8002cf0 <HAL_GPIO_DeInit+0x1d0>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d013      	beq.n	8002bb8 <HAL_GPIO_DeInit+0x98>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4a58      	ldr	r2, [pc, #352]	@ (8002cf4 <HAL_GPIO_DeInit+0x1d4>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d00d      	beq.n	8002bb4 <HAL_GPIO_DeInit+0x94>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	4a57      	ldr	r2, [pc, #348]	@ (8002cf8 <HAL_GPIO_DeInit+0x1d8>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d007      	beq.n	8002bb0 <HAL_GPIO_DeInit+0x90>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	4a56      	ldr	r2, [pc, #344]	@ (8002cfc <HAL_GPIO_DeInit+0x1dc>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d101      	bne.n	8002bac <HAL_GPIO_DeInit+0x8c>
 8002ba8:	2307      	movs	r3, #7
 8002baa:	e00e      	b.n	8002bca <HAL_GPIO_DeInit+0xaa>
 8002bac:	2308      	movs	r3, #8
 8002bae:	e00c      	b.n	8002bca <HAL_GPIO_DeInit+0xaa>
 8002bb0:	2306      	movs	r3, #6
 8002bb2:	e00a      	b.n	8002bca <HAL_GPIO_DeInit+0xaa>
 8002bb4:	2305      	movs	r3, #5
 8002bb6:	e008      	b.n	8002bca <HAL_GPIO_DeInit+0xaa>
 8002bb8:	2304      	movs	r3, #4
 8002bba:	e006      	b.n	8002bca <HAL_GPIO_DeInit+0xaa>
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e004      	b.n	8002bca <HAL_GPIO_DeInit+0xaa>
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	e002      	b.n	8002bca <HAL_GPIO_DeInit+0xaa>
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e000      	b.n	8002bca <HAL_GPIO_DeInit+0xaa>
 8002bc8:	2300      	movs	r3, #0
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	f002 0203 	and.w	r2, r2, #3
 8002bd0:	0092      	lsls	r2, r2, #2
 8002bd2:	4093      	lsls	r3, r2
 8002bd4:	68fa      	ldr	r2, [r7, #12]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d132      	bne.n	8002c40 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002bda:	4b49      	ldr	r3, [pc, #292]	@ (8002d00 <HAL_GPIO_DeInit+0x1e0>)
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	43db      	mvns	r3, r3
 8002be2:	4947      	ldr	r1, [pc, #284]	@ (8002d00 <HAL_GPIO_DeInit+0x1e0>)
 8002be4:	4013      	ands	r3, r2
 8002be6:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002be8:	4b45      	ldr	r3, [pc, #276]	@ (8002d00 <HAL_GPIO_DeInit+0x1e0>)
 8002bea:	685a      	ldr	r2, [r3, #4]
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	43db      	mvns	r3, r3
 8002bf0:	4943      	ldr	r1, [pc, #268]	@ (8002d00 <HAL_GPIO_DeInit+0x1e0>)
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002bf6:	4b42      	ldr	r3, [pc, #264]	@ (8002d00 <HAL_GPIO_DeInit+0x1e0>)
 8002bf8:	68da      	ldr	r2, [r3, #12]
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	43db      	mvns	r3, r3
 8002bfe:	4940      	ldr	r1, [pc, #256]	@ (8002d00 <HAL_GPIO_DeInit+0x1e0>)
 8002c00:	4013      	ands	r3, r2
 8002c02:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002c04:	4b3e      	ldr	r3, [pc, #248]	@ (8002d00 <HAL_GPIO_DeInit+0x1e0>)
 8002c06:	689a      	ldr	r2, [r3, #8]
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	43db      	mvns	r3, r3
 8002c0c:	493c      	ldr	r1, [pc, #240]	@ (8002d00 <HAL_GPIO_DeInit+0x1e0>)
 8002c0e:	4013      	ands	r3, r2
 8002c10:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	f003 0303 	and.w	r3, r3, #3
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	220f      	movs	r2, #15
 8002c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c20:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002c22:	4a2f      	ldr	r2, [pc, #188]	@ (8002ce0 <HAL_GPIO_DeInit+0x1c0>)
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	089b      	lsrs	r3, r3, #2
 8002c28:	3302      	adds	r3, #2
 8002c2a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	43da      	mvns	r2, r3
 8002c32:	482b      	ldr	r0, [pc, #172]	@ (8002ce0 <HAL_GPIO_DeInit+0x1c0>)
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	089b      	lsrs	r3, r3, #2
 8002c38:	400a      	ands	r2, r1
 8002c3a:	3302      	adds	r3, #2
 8002c3c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	005b      	lsls	r3, r3, #1
 8002c48:	2103      	movs	r1, #3
 8002c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c4e:	431a      	orrs	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	08da      	lsrs	r2, r3, #3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	3208      	adds	r2, #8
 8002c5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	f003 0307 	and.w	r3, r3, #7
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	220f      	movs	r2, #15
 8002c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6e:	43db      	mvns	r3, r3
 8002c70:	697a      	ldr	r2, [r7, #20]
 8002c72:	08d2      	lsrs	r2, r2, #3
 8002c74:	4019      	ands	r1, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	3208      	adds	r2, #8
 8002c7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	689a      	ldr	r2, [r3, #8]
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	2103      	movs	r1, #3
 8002c88:	fa01 f303 	lsl.w	r3, r1, r3
 8002c8c:	43db      	mvns	r3, r3
 8002c8e:	401a      	ands	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685a      	ldr	r2, [r3, #4]
 8002c98:	2101      	movs	r1, #1
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca0:	43db      	mvns	r3, r3
 8002ca2:	401a      	ands	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	68da      	ldr	r2, [r3, #12]
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	2103      	movs	r1, #3
 8002cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb6:	43db      	mvns	r3, r3
 8002cb8:	401a      	ands	r2, r3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002cc4:	683a      	ldr	r2, [r7, #0]
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	f47f af2f 	bne.w	8002b30 <HAL_GPIO_DeInit+0x10>
  }
}
 8002cd2:	bf00      	nop
 8002cd4:	bf00      	nop
 8002cd6:	371c      	adds	r7, #28
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr
 8002ce0:	40010000 	.word	0x40010000
 8002ce4:	48000400 	.word	0x48000400
 8002ce8:	48000800 	.word	0x48000800
 8002cec:	48000c00 	.word	0x48000c00
 8002cf0:	48001000 	.word	0x48001000
 8002cf4:	48001400 	.word	0x48001400
 8002cf8:	48001800 	.word	0x48001800
 8002cfc:	48001c00 	.word	0x48001c00
 8002d00:	40010400 	.word	0x40010400

08002d04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b085      	sub	sp, #20
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	691a      	ldr	r2, [r3, #16]
 8002d14:	887b      	ldrh	r3, [r7, #2]
 8002d16:	4013      	ands	r3, r2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d002      	beq.n	8002d22 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	73fb      	strb	r3, [r7, #15]
 8002d20:	e001      	b.n	8002d26 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d22:	2300      	movs	r3, #0
 8002d24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3714      	adds	r7, #20
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	807b      	strh	r3, [r7, #2]
 8002d40:	4613      	mov	r3, r2
 8002d42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d44:	787b      	ldrb	r3, [r7, #1]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d003      	beq.n	8002d52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d4a:	887a      	ldrh	r2, [r7, #2]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d50:	e002      	b.n	8002d58 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d52:	887a      	ldrh	r2, [r7, #2]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002d58:	bf00      	nop
 8002d5a:	370c      	adds	r7, #12
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e08d      	b.n	8002e92 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d106      	bne.n	8002d90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f7fe fdf0 	bl	8001970 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2224      	movs	r2, #36	@ 0x24
 8002d94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f022 0201 	bic.w	r2, r2, #1
 8002da6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685a      	ldr	r2, [r3, #4]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002db4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	689a      	ldr	r2, [r3, #8]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002dc4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d107      	bne.n	8002dde <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	689a      	ldr	r2, [r3, #8]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002dda:	609a      	str	r2, [r3, #8]
 8002ddc:	e006      	b.n	8002dec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	689a      	ldr	r2, [r3, #8]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002dea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d108      	bne.n	8002e06 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	685a      	ldr	r2, [r3, #4]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e02:	605a      	str	r2, [r3, #4]
 8002e04:	e007      	b.n	8002e16 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	685a      	ldr	r2, [r3, #4]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e14:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	6812      	ldr	r2, [r2, #0]
 8002e20:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002e24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e28:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	68da      	ldr	r2, [r3, #12]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e38:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	691a      	ldr	r2, [r3, #16]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	430a      	orrs	r2, r1
 8002e52:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	69d9      	ldr	r1, [r3, #28]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a1a      	ldr	r2, [r3, #32]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	430a      	orrs	r2, r1
 8002e62:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f042 0201 	orr.w	r2, r2, #1
 8002e72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2220      	movs	r2, #32
 8002e7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b082      	sub	sp, #8
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d101      	bne.n	8002eac <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e021      	b.n	8002ef0 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2224      	movs	r2, #36	@ 0x24
 8002eb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f022 0201 	bic.w	r2, r2, #1
 8002ec2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f7fe fdb1 	bl	8001a2c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3708      	adds	r7, #8
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b088      	sub	sp, #32
 8002efc:	af02      	add	r7, sp, #8
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	4608      	mov	r0, r1
 8002f02:	4611      	mov	r1, r2
 8002f04:	461a      	mov	r2, r3
 8002f06:	4603      	mov	r3, r0
 8002f08:	817b      	strh	r3, [r7, #10]
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	813b      	strh	r3, [r7, #8]
 8002f0e:	4613      	mov	r3, r2
 8002f10:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b20      	cmp	r3, #32
 8002f1c:	f040 80f9 	bne.w	8003112 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f20:	6a3b      	ldr	r3, [r7, #32]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d002      	beq.n	8002f2c <HAL_I2C_Mem_Write+0x34>
 8002f26:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d105      	bne.n	8002f38 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f32:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e0ed      	b.n	8003114 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d101      	bne.n	8002f46 <HAL_I2C_Mem_Write+0x4e>
 8002f42:	2302      	movs	r3, #2
 8002f44:	e0e6      	b.n	8003114 <HAL_I2C_Mem_Write+0x21c>
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f4e:	f7ff fb67 	bl	8002620 <HAL_GetTick>
 8002f52:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	9300      	str	r3, [sp, #0]
 8002f58:	2319      	movs	r3, #25
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002f60:	68f8      	ldr	r0, [r7, #12]
 8002f62:	f000 fac3 	bl	80034ec <I2C_WaitOnFlagUntilTimeout>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d001      	beq.n	8002f70 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e0d1      	b.n	8003114 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2221      	movs	r2, #33	@ 0x21
 8002f74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2240      	movs	r2, #64	@ 0x40
 8002f7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2200      	movs	r2, #0
 8002f84:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6a3a      	ldr	r2, [r7, #32]
 8002f8a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002f90:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f98:	88f8      	ldrh	r0, [r7, #6]
 8002f9a:	893a      	ldrh	r2, [r7, #8]
 8002f9c:	8979      	ldrh	r1, [r7, #10]
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	9301      	str	r3, [sp, #4]
 8002fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fa4:	9300      	str	r3, [sp, #0]
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	68f8      	ldr	r0, [r7, #12]
 8002faa:	f000 f9d3 	bl	8003354 <I2C_RequestMemoryWrite>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d005      	beq.n	8002fc0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e0a9      	b.n	8003114 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	2bff      	cmp	r3, #255	@ 0xff
 8002fc8:	d90e      	bls.n	8002fe8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	22ff      	movs	r2, #255	@ 0xff
 8002fce:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fd4:	b2da      	uxtb	r2, r3
 8002fd6:	8979      	ldrh	r1, [r7, #10]
 8002fd8:	2300      	movs	r3, #0
 8002fda:	9300      	str	r3, [sp, #0]
 8002fdc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002fe0:	68f8      	ldr	r0, [r7, #12]
 8002fe2:	f000 fc47 	bl	8003874 <I2C_TransferConfig>
 8002fe6:	e00f      	b.n	8003008 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fec:	b29a      	uxth	r2, r3
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ff6:	b2da      	uxtb	r2, r3
 8002ff8:	8979      	ldrh	r1, [r7, #10]
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	9300      	str	r3, [sp, #0]
 8002ffe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003002:	68f8      	ldr	r0, [r7, #12]
 8003004:	f000 fc36 	bl	8003874 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003008:	697a      	ldr	r2, [r7, #20]
 800300a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800300c:	68f8      	ldr	r0, [r7, #12]
 800300e:	f000 fac6 	bl	800359e <I2C_WaitOnTXISFlagUntilTimeout>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d001      	beq.n	800301c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e07b      	b.n	8003114 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003020:	781a      	ldrb	r2, [r3, #0]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800302c:	1c5a      	adds	r2, r3, #1
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003036:	b29b      	uxth	r3, r3
 8003038:	3b01      	subs	r3, #1
 800303a:	b29a      	uxth	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003044:	3b01      	subs	r3, #1
 8003046:	b29a      	uxth	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003050:	b29b      	uxth	r3, r3
 8003052:	2b00      	cmp	r3, #0
 8003054:	d034      	beq.n	80030c0 <HAL_I2C_Mem_Write+0x1c8>
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800305a:	2b00      	cmp	r3, #0
 800305c:	d130      	bne.n	80030c0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	9300      	str	r3, [sp, #0]
 8003062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003064:	2200      	movs	r2, #0
 8003066:	2180      	movs	r1, #128	@ 0x80
 8003068:	68f8      	ldr	r0, [r7, #12]
 800306a:	f000 fa3f 	bl	80034ec <I2C_WaitOnFlagUntilTimeout>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d001      	beq.n	8003078 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e04d      	b.n	8003114 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800307c:	b29b      	uxth	r3, r3
 800307e:	2bff      	cmp	r3, #255	@ 0xff
 8003080:	d90e      	bls.n	80030a0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	22ff      	movs	r2, #255	@ 0xff
 8003086:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800308c:	b2da      	uxtb	r2, r3
 800308e:	8979      	ldrh	r1, [r7, #10]
 8003090:	2300      	movs	r3, #0
 8003092:	9300      	str	r3, [sp, #0]
 8003094:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003098:	68f8      	ldr	r0, [r7, #12]
 800309a:	f000 fbeb 	bl	8003874 <I2C_TransferConfig>
 800309e:	e00f      	b.n	80030c0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030ae:	b2da      	uxtb	r2, r3
 80030b0:	8979      	ldrh	r1, [r7, #10]
 80030b2:	2300      	movs	r3, #0
 80030b4:	9300      	str	r3, [sp, #0]
 80030b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80030ba:	68f8      	ldr	r0, [r7, #12]
 80030bc:	f000 fbda 	bl	8003874 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d19e      	bne.n	8003008 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030ca:	697a      	ldr	r2, [r7, #20]
 80030cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	f000 faac 	bl	800362c <I2C_WaitOnSTOPFlagUntilTimeout>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e01a      	b.n	8003114 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2220      	movs	r2, #32
 80030e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	6859      	ldr	r1, [r3, #4]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	4b0a      	ldr	r3, [pc, #40]	@ (800311c <HAL_I2C_Mem_Write+0x224>)
 80030f2:	400b      	ands	r3, r1
 80030f4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2220      	movs	r2, #32
 80030fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800310e:	2300      	movs	r3, #0
 8003110:	e000      	b.n	8003114 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003112:	2302      	movs	r3, #2
  }
}
 8003114:	4618      	mov	r0, r3
 8003116:	3718      	adds	r7, #24
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	fe00e800 	.word	0xfe00e800

08003120 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b088      	sub	sp, #32
 8003124:	af02      	add	r7, sp, #8
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	4608      	mov	r0, r1
 800312a:	4611      	mov	r1, r2
 800312c:	461a      	mov	r2, r3
 800312e:	4603      	mov	r3, r0
 8003130:	817b      	strh	r3, [r7, #10]
 8003132:	460b      	mov	r3, r1
 8003134:	813b      	strh	r3, [r7, #8]
 8003136:	4613      	mov	r3, r2
 8003138:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b20      	cmp	r3, #32
 8003144:	f040 80fd 	bne.w	8003342 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003148:	6a3b      	ldr	r3, [r7, #32]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d002      	beq.n	8003154 <HAL_I2C_Mem_Read+0x34>
 800314e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003150:	2b00      	cmp	r3, #0
 8003152:	d105      	bne.n	8003160 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800315a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e0f1      	b.n	8003344 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003166:	2b01      	cmp	r3, #1
 8003168:	d101      	bne.n	800316e <HAL_I2C_Mem_Read+0x4e>
 800316a:	2302      	movs	r3, #2
 800316c:	e0ea      	b.n	8003344 <HAL_I2C_Mem_Read+0x224>
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2201      	movs	r2, #1
 8003172:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003176:	f7ff fa53 	bl	8002620 <HAL_GetTick>
 800317a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	9300      	str	r3, [sp, #0]
 8003180:	2319      	movs	r3, #25
 8003182:	2201      	movs	r2, #1
 8003184:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	f000 f9af 	bl	80034ec <I2C_WaitOnFlagUntilTimeout>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d001      	beq.n	8003198 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e0d5      	b.n	8003344 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2222      	movs	r2, #34	@ 0x22
 800319c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2240      	movs	r2, #64	@ 0x40
 80031a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2200      	movs	r2, #0
 80031ac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6a3a      	ldr	r2, [r7, #32]
 80031b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80031b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2200      	movs	r2, #0
 80031be:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80031c0:	88f8      	ldrh	r0, [r7, #6]
 80031c2:	893a      	ldrh	r2, [r7, #8]
 80031c4:	8979      	ldrh	r1, [r7, #10]
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	9301      	str	r3, [sp, #4]
 80031ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031cc:	9300      	str	r3, [sp, #0]
 80031ce:	4603      	mov	r3, r0
 80031d0:	68f8      	ldr	r0, [r7, #12]
 80031d2:	f000 f913 	bl	80033fc <I2C_RequestMemoryRead>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d005      	beq.n	80031e8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e0ad      	b.n	8003344 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	2bff      	cmp	r3, #255	@ 0xff
 80031f0:	d90e      	bls.n	8003210 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2201      	movs	r2, #1
 80031f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031fc:	b2da      	uxtb	r2, r3
 80031fe:	8979      	ldrh	r1, [r7, #10]
 8003200:	4b52      	ldr	r3, [pc, #328]	@ (800334c <HAL_I2C_Mem_Read+0x22c>)
 8003202:	9300      	str	r3, [sp, #0]
 8003204:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003208:	68f8      	ldr	r0, [r7, #12]
 800320a:	f000 fb33 	bl	8003874 <I2C_TransferConfig>
 800320e:	e00f      	b.n	8003230 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003214:	b29a      	uxth	r2, r3
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800321e:	b2da      	uxtb	r2, r3
 8003220:	8979      	ldrh	r1, [r7, #10]
 8003222:	4b4a      	ldr	r3, [pc, #296]	@ (800334c <HAL_I2C_Mem_Read+0x22c>)
 8003224:	9300      	str	r3, [sp, #0]
 8003226:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800322a:	68f8      	ldr	r0, [r7, #12]
 800322c:	f000 fb22 	bl	8003874 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	9300      	str	r3, [sp, #0]
 8003234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003236:	2200      	movs	r2, #0
 8003238:	2104      	movs	r1, #4
 800323a:	68f8      	ldr	r0, [r7, #12]
 800323c:	f000 f956 	bl	80034ec <I2C_WaitOnFlagUntilTimeout>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d001      	beq.n	800324a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e07c      	b.n	8003344 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003254:	b2d2      	uxtb	r2, r2
 8003256:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800325c:	1c5a      	adds	r2, r3, #1
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003266:	3b01      	subs	r3, #1
 8003268:	b29a      	uxth	r2, r3
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003272:	b29b      	uxth	r3, r3
 8003274:	3b01      	subs	r3, #1
 8003276:	b29a      	uxth	r2, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003280:	b29b      	uxth	r3, r3
 8003282:	2b00      	cmp	r3, #0
 8003284:	d034      	beq.n	80032f0 <HAL_I2C_Mem_Read+0x1d0>
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800328a:	2b00      	cmp	r3, #0
 800328c:	d130      	bne.n	80032f0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	9300      	str	r3, [sp, #0]
 8003292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003294:	2200      	movs	r2, #0
 8003296:	2180      	movs	r1, #128	@ 0x80
 8003298:	68f8      	ldr	r0, [r7, #12]
 800329a:	f000 f927 	bl	80034ec <I2C_WaitOnFlagUntilTimeout>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d001      	beq.n	80032a8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e04d      	b.n	8003344 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	2bff      	cmp	r3, #255	@ 0xff
 80032b0:	d90e      	bls.n	80032d0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2201      	movs	r2, #1
 80032b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032bc:	b2da      	uxtb	r2, r3
 80032be:	8979      	ldrh	r1, [r7, #10]
 80032c0:	2300      	movs	r3, #0
 80032c2:	9300      	str	r3, [sp, #0]
 80032c4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80032c8:	68f8      	ldr	r0, [r7, #12]
 80032ca:	f000 fad3 	bl	8003874 <I2C_TransferConfig>
 80032ce:	e00f      	b.n	80032f0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032d4:	b29a      	uxth	r2, r3
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032de:	b2da      	uxtb	r2, r3
 80032e0:	8979      	ldrh	r1, [r7, #10]
 80032e2:	2300      	movs	r3, #0
 80032e4:	9300      	str	r3, [sp, #0]
 80032e6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80032ea:	68f8      	ldr	r0, [r7, #12]
 80032ec:	f000 fac2 	bl	8003874 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d19a      	bne.n	8003230 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032fa:	697a      	ldr	r2, [r7, #20]
 80032fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80032fe:	68f8      	ldr	r0, [r7, #12]
 8003300:	f000 f994 	bl	800362c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e01a      	b.n	8003344 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2220      	movs	r2, #32
 8003314:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	6859      	ldr	r1, [r3, #4]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	4b0b      	ldr	r3, [pc, #44]	@ (8003350 <HAL_I2C_Mem_Read+0x230>)
 8003322:	400b      	ands	r3, r1
 8003324:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2220      	movs	r2, #32
 800332a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800333e:	2300      	movs	r3, #0
 8003340:	e000      	b.n	8003344 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003342:	2302      	movs	r3, #2
  }
}
 8003344:	4618      	mov	r0, r3
 8003346:	3718      	adds	r7, #24
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	80002400 	.word	0x80002400
 8003350:	fe00e800 	.word	0xfe00e800

08003354 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b086      	sub	sp, #24
 8003358:	af02      	add	r7, sp, #8
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	4608      	mov	r0, r1
 800335e:	4611      	mov	r1, r2
 8003360:	461a      	mov	r2, r3
 8003362:	4603      	mov	r3, r0
 8003364:	817b      	strh	r3, [r7, #10]
 8003366:	460b      	mov	r3, r1
 8003368:	813b      	strh	r3, [r7, #8]
 800336a:	4613      	mov	r3, r2
 800336c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800336e:	88fb      	ldrh	r3, [r7, #6]
 8003370:	b2da      	uxtb	r2, r3
 8003372:	8979      	ldrh	r1, [r7, #10]
 8003374:	4b20      	ldr	r3, [pc, #128]	@ (80033f8 <I2C_RequestMemoryWrite+0xa4>)
 8003376:	9300      	str	r3, [sp, #0]
 8003378:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800337c:	68f8      	ldr	r0, [r7, #12]
 800337e:	f000 fa79 	bl	8003874 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003382:	69fa      	ldr	r2, [r7, #28]
 8003384:	69b9      	ldr	r1, [r7, #24]
 8003386:	68f8      	ldr	r0, [r7, #12]
 8003388:	f000 f909 	bl	800359e <I2C_WaitOnTXISFlagUntilTimeout>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d001      	beq.n	8003396 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e02c      	b.n	80033f0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003396:	88fb      	ldrh	r3, [r7, #6]
 8003398:	2b01      	cmp	r3, #1
 800339a:	d105      	bne.n	80033a8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800339c:	893b      	ldrh	r3, [r7, #8]
 800339e:	b2da      	uxtb	r2, r3
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	629a      	str	r2, [r3, #40]	@ 0x28
 80033a6:	e015      	b.n	80033d4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80033a8:	893b      	ldrh	r3, [r7, #8]
 80033aa:	0a1b      	lsrs	r3, r3, #8
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	b2da      	uxtb	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033b6:	69fa      	ldr	r2, [r7, #28]
 80033b8:	69b9      	ldr	r1, [r7, #24]
 80033ba:	68f8      	ldr	r0, [r7, #12]
 80033bc:	f000 f8ef 	bl	800359e <I2C_WaitOnTXISFlagUntilTimeout>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e012      	b.n	80033f0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80033ca:	893b      	ldrh	r3, [r7, #8]
 80033cc:	b2da      	uxtb	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	9300      	str	r3, [sp, #0]
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	2200      	movs	r2, #0
 80033dc:	2180      	movs	r1, #128	@ 0x80
 80033de:	68f8      	ldr	r0, [r7, #12]
 80033e0:	f000 f884 	bl	80034ec <I2C_WaitOnFlagUntilTimeout>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e000      	b.n	80033f0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80033ee:	2300      	movs	r3, #0
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3710      	adds	r7, #16
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	80002000 	.word	0x80002000

080033fc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b086      	sub	sp, #24
 8003400:	af02      	add	r7, sp, #8
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	4608      	mov	r0, r1
 8003406:	4611      	mov	r1, r2
 8003408:	461a      	mov	r2, r3
 800340a:	4603      	mov	r3, r0
 800340c:	817b      	strh	r3, [r7, #10]
 800340e:	460b      	mov	r3, r1
 8003410:	813b      	strh	r3, [r7, #8]
 8003412:	4613      	mov	r3, r2
 8003414:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003416:	88fb      	ldrh	r3, [r7, #6]
 8003418:	b2da      	uxtb	r2, r3
 800341a:	8979      	ldrh	r1, [r7, #10]
 800341c:	4b20      	ldr	r3, [pc, #128]	@ (80034a0 <I2C_RequestMemoryRead+0xa4>)
 800341e:	9300      	str	r3, [sp, #0]
 8003420:	2300      	movs	r3, #0
 8003422:	68f8      	ldr	r0, [r7, #12]
 8003424:	f000 fa26 	bl	8003874 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003428:	69fa      	ldr	r2, [r7, #28]
 800342a:	69b9      	ldr	r1, [r7, #24]
 800342c:	68f8      	ldr	r0, [r7, #12]
 800342e:	f000 f8b6 	bl	800359e <I2C_WaitOnTXISFlagUntilTimeout>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d001      	beq.n	800343c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e02c      	b.n	8003496 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800343c:	88fb      	ldrh	r3, [r7, #6]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d105      	bne.n	800344e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003442:	893b      	ldrh	r3, [r7, #8]
 8003444:	b2da      	uxtb	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	629a      	str	r2, [r3, #40]	@ 0x28
 800344c:	e015      	b.n	800347a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800344e:	893b      	ldrh	r3, [r7, #8]
 8003450:	0a1b      	lsrs	r3, r3, #8
 8003452:	b29b      	uxth	r3, r3
 8003454:	b2da      	uxtb	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800345c:	69fa      	ldr	r2, [r7, #28]
 800345e:	69b9      	ldr	r1, [r7, #24]
 8003460:	68f8      	ldr	r0, [r7, #12]
 8003462:	f000 f89c 	bl	800359e <I2C_WaitOnTXISFlagUntilTimeout>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d001      	beq.n	8003470 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e012      	b.n	8003496 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003470:	893b      	ldrh	r3, [r7, #8]
 8003472:	b2da      	uxtb	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	9300      	str	r3, [sp, #0]
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	2200      	movs	r2, #0
 8003482:	2140      	movs	r1, #64	@ 0x40
 8003484:	68f8      	ldr	r0, [r7, #12]
 8003486:	f000 f831 	bl	80034ec <I2C_WaitOnFlagUntilTimeout>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d001      	beq.n	8003494 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e000      	b.n	8003496 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3710      	adds	r7, #16
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	80002000 	.word	0x80002000

080034a4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d103      	bne.n	80034c2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2200      	movs	r2, #0
 80034c0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	f003 0301 	and.w	r3, r3, #1
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d007      	beq.n	80034e0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	699a      	ldr	r2, [r3, #24]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f042 0201 	orr.w	r2, r2, #1
 80034de:	619a      	str	r2, [r3, #24]
  }
}
 80034e0:	bf00      	nop
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	603b      	str	r3, [r7, #0]
 80034f8:	4613      	mov	r3, r2
 80034fa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034fc:	e03b      	b.n	8003576 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80034fe:	69ba      	ldr	r2, [r7, #24]
 8003500:	6839      	ldr	r1, [r7, #0]
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	f000 f8d6 	bl	80036b4 <I2C_IsErrorOccurred>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d001      	beq.n	8003512 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e041      	b.n	8003596 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003518:	d02d      	beq.n	8003576 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800351a:	f7ff f881 	bl	8002620 <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	683a      	ldr	r2, [r7, #0]
 8003526:	429a      	cmp	r2, r3
 8003528:	d302      	bcc.n	8003530 <I2C_WaitOnFlagUntilTimeout+0x44>
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d122      	bne.n	8003576 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	699a      	ldr	r2, [r3, #24]
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	4013      	ands	r3, r2
 800353a:	68ba      	ldr	r2, [r7, #8]
 800353c:	429a      	cmp	r2, r3
 800353e:	bf0c      	ite	eq
 8003540:	2301      	moveq	r3, #1
 8003542:	2300      	movne	r3, #0
 8003544:	b2db      	uxtb	r3, r3
 8003546:	461a      	mov	r2, r3
 8003548:	79fb      	ldrb	r3, [r7, #7]
 800354a:	429a      	cmp	r2, r3
 800354c:	d113      	bne.n	8003576 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003552:	f043 0220 	orr.w	r2, r3, #32
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2220      	movs	r2, #32
 800355e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e00f      	b.n	8003596 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	699a      	ldr	r2, [r3, #24]
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	4013      	ands	r3, r2
 8003580:	68ba      	ldr	r2, [r7, #8]
 8003582:	429a      	cmp	r2, r3
 8003584:	bf0c      	ite	eq
 8003586:	2301      	moveq	r3, #1
 8003588:	2300      	movne	r3, #0
 800358a:	b2db      	uxtb	r3, r3
 800358c:	461a      	mov	r2, r3
 800358e:	79fb      	ldrb	r3, [r7, #7]
 8003590:	429a      	cmp	r2, r3
 8003592:	d0b4      	beq.n	80034fe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3710      	adds	r7, #16
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b084      	sub	sp, #16
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	60f8      	str	r0, [r7, #12]
 80035a6:	60b9      	str	r1, [r7, #8]
 80035a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80035aa:	e033      	b.n	8003614 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	68b9      	ldr	r1, [r7, #8]
 80035b0:	68f8      	ldr	r0, [r7, #12]
 80035b2:	f000 f87f 	bl	80036b4 <I2C_IsErrorOccurred>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d001      	beq.n	80035c0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e031      	b.n	8003624 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80035c6:	d025      	beq.n	8003614 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035c8:	f7ff f82a 	bl	8002620 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	68ba      	ldr	r2, [r7, #8]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d302      	bcc.n	80035de <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d11a      	bne.n	8003614 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	f003 0302 	and.w	r3, r3, #2
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d013      	beq.n	8003614 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035f0:	f043 0220 	orr.w	r2, r3, #32
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2220      	movs	r2, #32
 80035fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2200      	movs	r2, #0
 800360c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e007      	b.n	8003624 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b02      	cmp	r3, #2
 8003620:	d1c4      	bne.n	80035ac <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003622:	2300      	movs	r3, #0
}
 8003624:	4618      	mov	r0, r3
 8003626:	3710      	adds	r7, #16
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003638:	e02f      	b.n	800369a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	68b9      	ldr	r1, [r7, #8]
 800363e:	68f8      	ldr	r0, [r7, #12]
 8003640:	f000 f838 	bl	80036b4 <I2C_IsErrorOccurred>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e02d      	b.n	80036aa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800364e:	f7fe ffe7 	bl	8002620 <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	68ba      	ldr	r2, [r7, #8]
 800365a:	429a      	cmp	r2, r3
 800365c:	d302      	bcc.n	8003664 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d11a      	bne.n	800369a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	f003 0320 	and.w	r3, r3, #32
 800366e:	2b20      	cmp	r3, #32
 8003670:	d013      	beq.n	800369a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003676:	f043 0220 	orr.w	r2, r3, #32
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2220      	movs	r2, #32
 8003682:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e007      	b.n	80036aa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	f003 0320 	and.w	r3, r3, #32
 80036a4:	2b20      	cmp	r3, #32
 80036a6:	d1c8      	bne.n	800363a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3710      	adds	r7, #16
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
	...

080036b4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b08a      	sub	sp, #40	@ 0x28
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036c0:	2300      	movs	r3, #0
 80036c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80036ce:	2300      	movs	r3, #0
 80036d0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	f003 0310 	and.w	r3, r3, #16
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d068      	beq.n	80037b2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2210      	movs	r2, #16
 80036e6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80036e8:	e049      	b.n	800377e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80036f0:	d045      	beq.n	800377e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80036f2:	f7fe ff95 	bl	8002620 <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	68ba      	ldr	r2, [r7, #8]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d302      	bcc.n	8003708 <I2C_IsErrorOccurred+0x54>
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d13a      	bne.n	800377e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003712:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800371a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003726:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800372a:	d121      	bne.n	8003770 <I2C_IsErrorOccurred+0xbc>
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003732:	d01d      	beq.n	8003770 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003734:	7cfb      	ldrb	r3, [r7, #19]
 8003736:	2b20      	cmp	r3, #32
 8003738:	d01a      	beq.n	8003770 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	685a      	ldr	r2, [r3, #4]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003748:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800374a:	f7fe ff69 	bl	8002620 <HAL_GetTick>
 800374e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003750:	e00e      	b.n	8003770 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003752:	f7fe ff65 	bl	8002620 <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	2b19      	cmp	r3, #25
 800375e:	d907      	bls.n	8003770 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003760:	6a3b      	ldr	r3, [r7, #32]
 8003762:	f043 0320 	orr.w	r3, r3, #32
 8003766:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800376e:	e006      	b.n	800377e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	f003 0320 	and.w	r3, r3, #32
 800377a:	2b20      	cmp	r3, #32
 800377c:	d1e9      	bne.n	8003752 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	f003 0320 	and.w	r3, r3, #32
 8003788:	2b20      	cmp	r3, #32
 800378a:	d003      	beq.n	8003794 <I2C_IsErrorOccurred+0xe0>
 800378c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003790:	2b00      	cmp	r3, #0
 8003792:	d0aa      	beq.n	80036ea <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003794:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003798:	2b00      	cmp	r3, #0
 800379a:	d103      	bne.n	80037a4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2220      	movs	r2, #32
 80037a2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80037a4:	6a3b      	ldr	r3, [r7, #32]
 80037a6:	f043 0304 	orr.w	r3, r3, #4
 80037aa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d00b      	beq.n	80037dc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80037c4:	6a3b      	ldr	r3, [r7, #32]
 80037c6:	f043 0301 	orr.w	r3, r3, #1
 80037ca:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80037d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00b      	beq.n	80037fe <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80037e6:	6a3b      	ldr	r3, [r7, #32]
 80037e8:	f043 0308 	orr.w	r3, r3, #8
 80037ec:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80037f6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00b      	beq.n	8003820 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003808:	6a3b      	ldr	r3, [r7, #32]
 800380a:	f043 0302 	orr.w	r3, r3, #2
 800380e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003818:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003820:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003824:	2b00      	cmp	r3, #0
 8003826:	d01c      	beq.n	8003862 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003828:	68f8      	ldr	r0, [r7, #12]
 800382a:	f7ff fe3b 	bl	80034a4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	6859      	ldr	r1, [r3, #4]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	4b0d      	ldr	r3, [pc, #52]	@ (8003870 <I2C_IsErrorOccurred+0x1bc>)
 800383a:	400b      	ands	r3, r1
 800383c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003842:	6a3b      	ldr	r3, [r7, #32]
 8003844:	431a      	orrs	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2220      	movs	r2, #32
 800384e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003862:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003866:	4618      	mov	r0, r3
 8003868:	3728      	adds	r7, #40	@ 0x28
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	fe00e800 	.word	0xfe00e800

08003874 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003874:	b480      	push	{r7}
 8003876:	b087      	sub	sp, #28
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	607b      	str	r3, [r7, #4]
 800387e:	460b      	mov	r3, r1
 8003880:	817b      	strh	r3, [r7, #10]
 8003882:	4613      	mov	r3, r2
 8003884:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003886:	897b      	ldrh	r3, [r7, #10]
 8003888:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800388c:	7a7b      	ldrb	r3, [r7, #9]
 800388e:	041b      	lsls	r3, r3, #16
 8003890:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003894:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800389a:	6a3b      	ldr	r3, [r7, #32]
 800389c:	4313      	orrs	r3, r2
 800389e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80038a2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	685a      	ldr	r2, [r3, #4]
 80038aa:	6a3b      	ldr	r3, [r7, #32]
 80038ac:	0d5b      	lsrs	r3, r3, #21
 80038ae:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80038b2:	4b08      	ldr	r3, [pc, #32]	@ (80038d4 <I2C_TransferConfig+0x60>)
 80038b4:	430b      	orrs	r3, r1
 80038b6:	43db      	mvns	r3, r3
 80038b8:	ea02 0103 	and.w	r1, r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	697a      	ldr	r2, [r7, #20]
 80038c2:	430a      	orrs	r2, r1
 80038c4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80038c6:	bf00      	nop
 80038c8:	371c      	adds	r7, #28
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	03ff63ff 	.word	0x03ff63ff

080038d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	2b20      	cmp	r3, #32
 80038ec:	d138      	bne.n	8003960 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d101      	bne.n	80038fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80038f8:	2302      	movs	r3, #2
 80038fa:	e032      	b.n	8003962 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2224      	movs	r2, #36	@ 0x24
 8003908:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f022 0201 	bic.w	r2, r2, #1
 800391a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800392a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	6819      	ldr	r1, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	683a      	ldr	r2, [r7, #0]
 8003938:	430a      	orrs	r2, r1
 800393a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f042 0201 	orr.w	r2, r2, #1
 800394a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2220      	movs	r2, #32
 8003950:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800395c:	2300      	movs	r3, #0
 800395e:	e000      	b.n	8003962 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003960:	2302      	movs	r3, #2
  }
}
 8003962:	4618      	mov	r0, r3
 8003964:	370c      	adds	r7, #12
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr

0800396e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800396e:	b480      	push	{r7}
 8003970:	b085      	sub	sp, #20
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
 8003976:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800397e:	b2db      	uxtb	r3, r3
 8003980:	2b20      	cmp	r3, #32
 8003982:	d139      	bne.n	80039f8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800398a:	2b01      	cmp	r3, #1
 800398c:	d101      	bne.n	8003992 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800398e:	2302      	movs	r3, #2
 8003990:	e033      	b.n	80039fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2201      	movs	r2, #1
 8003996:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2224      	movs	r2, #36	@ 0x24
 800399e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f022 0201 	bic.w	r2, r2, #1
 80039b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80039c0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	021b      	lsls	r3, r3, #8
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f042 0201 	orr.w	r2, r2, #1
 80039e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2220      	movs	r2, #32
 80039e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80039f4:	2300      	movs	r3, #0
 80039f6:	e000      	b.n	80039fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80039f8:	2302      	movs	r3, #2
  }
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3714      	adds	r7, #20
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
	...

08003a08 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a0c:	4b0d      	ldr	r3, [pc, #52]	@ (8003a44 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003a14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a18:	d102      	bne.n	8003a20 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003a1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003a1e:	e00b      	b.n	8003a38 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003a20:	4b08      	ldr	r3, [pc, #32]	@ (8003a44 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003a22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a2e:	d102      	bne.n	8003a36 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003a30:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003a34:	e000      	b.n	8003a38 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003a36:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
 8003a42:	bf00      	nop
 8003a44:	40007000 	.word	0x40007000

08003a48 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d141      	bne.n	8003ada <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a56:	4b4b      	ldr	r3, [pc, #300]	@ (8003b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003a5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a62:	d131      	bne.n	8003ac8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a64:	4b47      	ldr	r3, [pc, #284]	@ (8003b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a6a:	4a46      	ldr	r2, [pc, #280]	@ (8003b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a70:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a74:	4b43      	ldr	r3, [pc, #268]	@ (8003b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003a7c:	4a41      	ldr	r2, [pc, #260]	@ (8003b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a82:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003a84:	4b40      	ldr	r3, [pc, #256]	@ (8003b88 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2232      	movs	r2, #50	@ 0x32
 8003a8a:	fb02 f303 	mul.w	r3, r2, r3
 8003a8e:	4a3f      	ldr	r2, [pc, #252]	@ (8003b8c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003a90:	fba2 2303 	umull	r2, r3, r2, r3
 8003a94:	0c9b      	lsrs	r3, r3, #18
 8003a96:	3301      	adds	r3, #1
 8003a98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a9a:	e002      	b.n	8003aa2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003aa2:	4b38      	ldr	r3, [pc, #224]	@ (8003b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003aaa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003aae:	d102      	bne.n	8003ab6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1f2      	bne.n	8003a9c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ab6:	4b33      	ldr	r3, [pc, #204]	@ (8003b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003abe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ac2:	d158      	bne.n	8003b76 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e057      	b.n	8003b78 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ac8:	4b2e      	ldr	r3, [pc, #184]	@ (8003b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003aca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ace:	4a2d      	ldr	r2, [pc, #180]	@ (8003b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ad0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ad4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003ad8:	e04d      	b.n	8003b76 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ae0:	d141      	bne.n	8003b66 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ae2:	4b28      	ldr	r3, [pc, #160]	@ (8003b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003aea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003aee:	d131      	bne.n	8003b54 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003af0:	4b24      	ldr	r3, [pc, #144]	@ (8003b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003af2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003af6:	4a23      	ldr	r2, [pc, #140]	@ (8003b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003af8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003afc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b00:	4b20      	ldr	r3, [pc, #128]	@ (8003b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003b08:	4a1e      	ldr	r2, [pc, #120]	@ (8003b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b0e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003b10:	4b1d      	ldr	r3, [pc, #116]	@ (8003b88 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2232      	movs	r2, #50	@ 0x32
 8003b16:	fb02 f303 	mul.w	r3, r2, r3
 8003b1a:	4a1c      	ldr	r2, [pc, #112]	@ (8003b8c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b20:	0c9b      	lsrs	r3, r3, #18
 8003b22:	3301      	adds	r3, #1
 8003b24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b26:	e002      	b.n	8003b2e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b2e:	4b15      	ldr	r3, [pc, #84]	@ (8003b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b30:	695b      	ldr	r3, [r3, #20]
 8003b32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b3a:	d102      	bne.n	8003b42 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1f2      	bne.n	8003b28 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b42:	4b10      	ldr	r3, [pc, #64]	@ (8003b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b44:	695b      	ldr	r3, [r3, #20]
 8003b46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b4e:	d112      	bne.n	8003b76 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	e011      	b.n	8003b78 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b54:	4b0b      	ldr	r3, [pc, #44]	@ (8003b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b5a:	4a0a      	ldr	r2, [pc, #40]	@ (8003b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b60:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003b64:	e007      	b.n	8003b76 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003b66:	4b07      	ldr	r3, [pc, #28]	@ (8003b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003b6e:	4a05      	ldr	r2, [pc, #20]	@ (8003b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b70:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003b74:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3714      	adds	r7, #20
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr
 8003b84:	40007000 	.word	0x40007000
 8003b88:	20000000 	.word	0x20000000
 8003b8c:	431bde83 	.word	0x431bde83

08003b90 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b088      	sub	sp, #32
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d102      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	f000 bc08 	b.w	80043b4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ba4:	4b96      	ldr	r3, [pc, #600]	@ (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	f003 030c 	and.w	r3, r3, #12
 8003bac:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003bae:	4b94      	ldr	r3, [pc, #592]	@ (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	f003 0303 	and.w	r3, r3, #3
 8003bb6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0310 	and.w	r3, r3, #16
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f000 80e4 	beq.w	8003d8e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d007      	beq.n	8003bdc <HAL_RCC_OscConfig+0x4c>
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	2b0c      	cmp	r3, #12
 8003bd0:	f040 808b 	bne.w	8003cea <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	f040 8087 	bne.w	8003cea <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003bdc:	4b88      	ldr	r3, [pc, #544]	@ (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0302 	and.w	r3, r3, #2
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d005      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x64>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	699b      	ldr	r3, [r3, #24]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d101      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e3df      	b.n	80043b4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a1a      	ldr	r2, [r3, #32]
 8003bf8:	4b81      	ldr	r3, [pc, #516]	@ (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0308 	and.w	r3, r3, #8
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d004      	beq.n	8003c0e <HAL_RCC_OscConfig+0x7e>
 8003c04:	4b7e      	ldr	r3, [pc, #504]	@ (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c0c:	e005      	b.n	8003c1a <HAL_RCC_OscConfig+0x8a>
 8003c0e:	4b7c      	ldr	r3, [pc, #496]	@ (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003c10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c14:	091b      	lsrs	r3, r3, #4
 8003c16:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d223      	bcs.n	8003c66 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a1b      	ldr	r3, [r3, #32]
 8003c22:	4618      	mov	r0, r3
 8003c24:	f000 fdfe 	bl	8004824 <RCC_SetFlashLatencyFromMSIRange>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d001      	beq.n	8003c32 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e3c0      	b.n	80043b4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c32:	4b73      	ldr	r3, [pc, #460]	@ (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a72      	ldr	r2, [pc, #456]	@ (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003c38:	f043 0308 	orr.w	r3, r3, #8
 8003c3c:	6013      	str	r3, [r2, #0]
 8003c3e:	4b70      	ldr	r3, [pc, #448]	@ (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a1b      	ldr	r3, [r3, #32]
 8003c4a:	496d      	ldr	r1, [pc, #436]	@ (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c50:	4b6b      	ldr	r3, [pc, #428]	@ (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	69db      	ldr	r3, [r3, #28]
 8003c5c:	021b      	lsls	r3, r3, #8
 8003c5e:	4968      	ldr	r1, [pc, #416]	@ (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	604b      	str	r3, [r1, #4]
 8003c64:	e025      	b.n	8003cb2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c66:	4b66      	ldr	r3, [pc, #408]	@ (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a65      	ldr	r2, [pc, #404]	@ (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003c6c:	f043 0308 	orr.w	r3, r3, #8
 8003c70:	6013      	str	r3, [r2, #0]
 8003c72:	4b63      	ldr	r3, [pc, #396]	@ (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a1b      	ldr	r3, [r3, #32]
 8003c7e:	4960      	ldr	r1, [pc, #384]	@ (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c84:	4b5e      	ldr	r3, [pc, #376]	@ (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	69db      	ldr	r3, [r3, #28]
 8003c90:	021b      	lsls	r3, r3, #8
 8003c92:	495b      	ldr	r1, [pc, #364]	@ (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d109      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f000 fdbe 	bl	8004824 <RCC_SetFlashLatencyFromMSIRange>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d001      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e380      	b.n	80043b4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003cb2:	f000 fcc1 	bl	8004638 <HAL_RCC_GetSysClockFreq>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	4b51      	ldr	r3, [pc, #324]	@ (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	091b      	lsrs	r3, r3, #4
 8003cbe:	f003 030f 	and.w	r3, r3, #15
 8003cc2:	4950      	ldr	r1, [pc, #320]	@ (8003e04 <HAL_RCC_OscConfig+0x274>)
 8003cc4:	5ccb      	ldrb	r3, [r1, r3]
 8003cc6:	f003 031f 	and.w	r3, r3, #31
 8003cca:	fa22 f303 	lsr.w	r3, r2, r3
 8003cce:	4a4e      	ldr	r2, [pc, #312]	@ (8003e08 <HAL_RCC_OscConfig+0x278>)
 8003cd0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003cd2:	4b4e      	ldr	r3, [pc, #312]	@ (8003e0c <HAL_RCC_OscConfig+0x27c>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f7fd ff2a 	bl	8001b30 <HAL_InitTick>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003ce0:	7bfb      	ldrb	r3, [r7, #15]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d052      	beq.n	8003d8c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003ce6:	7bfb      	ldrb	r3, [r7, #15]
 8003ce8:	e364      	b.n	80043b4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	699b      	ldr	r3, [r3, #24]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d032      	beq.n	8003d58 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003cf2:	4b43      	ldr	r3, [pc, #268]	@ (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a42      	ldr	r2, [pc, #264]	@ (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003cf8:	f043 0301 	orr.w	r3, r3, #1
 8003cfc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003cfe:	f7fe fc8f 	bl	8002620 <HAL_GetTick>
 8003d02:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d04:	e008      	b.n	8003d18 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d06:	f7fe fc8b 	bl	8002620 <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d901      	bls.n	8003d18 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e34d      	b.n	80043b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d18:	4b39      	ldr	r3, [pc, #228]	@ (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0302 	and.w	r3, r3, #2
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d0f0      	beq.n	8003d06 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d24:	4b36      	ldr	r3, [pc, #216]	@ (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a35      	ldr	r2, [pc, #212]	@ (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003d2a:	f043 0308 	orr.w	r3, r3, #8
 8003d2e:	6013      	str	r3, [r2, #0]
 8003d30:	4b33      	ldr	r3, [pc, #204]	@ (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a1b      	ldr	r3, [r3, #32]
 8003d3c:	4930      	ldr	r1, [pc, #192]	@ (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d42:	4b2f      	ldr	r3, [pc, #188]	@ (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	69db      	ldr	r3, [r3, #28]
 8003d4e:	021b      	lsls	r3, r3, #8
 8003d50:	492b      	ldr	r1, [pc, #172]	@ (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003d52:	4313      	orrs	r3, r2
 8003d54:	604b      	str	r3, [r1, #4]
 8003d56:	e01a      	b.n	8003d8e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003d58:	4b29      	ldr	r3, [pc, #164]	@ (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a28      	ldr	r2, [pc, #160]	@ (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003d5e:	f023 0301 	bic.w	r3, r3, #1
 8003d62:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d64:	f7fe fc5c 	bl	8002620 <HAL_GetTick>
 8003d68:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003d6a:	e008      	b.n	8003d7e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d6c:	f7fe fc58 	bl	8002620 <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d901      	bls.n	8003d7e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e31a      	b.n	80043b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003d7e:	4b20      	ldr	r3, [pc, #128]	@ (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1f0      	bne.n	8003d6c <HAL_RCC_OscConfig+0x1dc>
 8003d8a:	e000      	b.n	8003d8e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d8c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d073      	beq.n	8003e82 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	2b08      	cmp	r3, #8
 8003d9e:	d005      	beq.n	8003dac <HAL_RCC_OscConfig+0x21c>
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	2b0c      	cmp	r3, #12
 8003da4:	d10e      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	2b03      	cmp	r3, #3
 8003daa:	d10b      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dac:	4b14      	ldr	r3, [pc, #80]	@ (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d063      	beq.n	8003e80 <HAL_RCC_OscConfig+0x2f0>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d15f      	bne.n	8003e80 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e2f7      	b.n	80043b4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dcc:	d106      	bne.n	8003ddc <HAL_RCC_OscConfig+0x24c>
 8003dce:	4b0c      	ldr	r3, [pc, #48]	@ (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a0b      	ldr	r2, [pc, #44]	@ (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003dd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dd8:	6013      	str	r3, [r2, #0]
 8003dda:	e025      	b.n	8003e28 <HAL_RCC_OscConfig+0x298>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003de4:	d114      	bne.n	8003e10 <HAL_RCC_OscConfig+0x280>
 8003de6:	4b06      	ldr	r3, [pc, #24]	@ (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a05      	ldr	r2, [pc, #20]	@ (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003dec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003df0:	6013      	str	r3, [r2, #0]
 8003df2:	4b03      	ldr	r3, [pc, #12]	@ (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a02      	ldr	r2, [pc, #8]	@ (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003df8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dfc:	6013      	str	r3, [r2, #0]
 8003dfe:	e013      	b.n	8003e28 <HAL_RCC_OscConfig+0x298>
 8003e00:	40021000 	.word	0x40021000
 8003e04:	0800aa68 	.word	0x0800aa68
 8003e08:	20000000 	.word	0x20000000
 8003e0c:	20000084 	.word	0x20000084
 8003e10:	4ba0      	ldr	r3, [pc, #640]	@ (8004094 <HAL_RCC_OscConfig+0x504>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a9f      	ldr	r2, [pc, #636]	@ (8004094 <HAL_RCC_OscConfig+0x504>)
 8003e16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e1a:	6013      	str	r3, [r2, #0]
 8003e1c:	4b9d      	ldr	r3, [pc, #628]	@ (8004094 <HAL_RCC_OscConfig+0x504>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a9c      	ldr	r2, [pc, #624]	@ (8004094 <HAL_RCC_OscConfig+0x504>)
 8003e22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d013      	beq.n	8003e58 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e30:	f7fe fbf6 	bl	8002620 <HAL_GetTick>
 8003e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e36:	e008      	b.n	8003e4a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e38:	f7fe fbf2 	bl	8002620 <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	2b64      	cmp	r3, #100	@ 0x64
 8003e44:	d901      	bls.n	8003e4a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e2b4      	b.n	80043b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e4a:	4b92      	ldr	r3, [pc, #584]	@ (8004094 <HAL_RCC_OscConfig+0x504>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d0f0      	beq.n	8003e38 <HAL_RCC_OscConfig+0x2a8>
 8003e56:	e014      	b.n	8003e82 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e58:	f7fe fbe2 	bl	8002620 <HAL_GetTick>
 8003e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e5e:	e008      	b.n	8003e72 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e60:	f7fe fbde 	bl	8002620 <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	2b64      	cmp	r3, #100	@ 0x64
 8003e6c:	d901      	bls.n	8003e72 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e2a0      	b.n	80043b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e72:	4b88      	ldr	r3, [pc, #544]	@ (8004094 <HAL_RCC_OscConfig+0x504>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d1f0      	bne.n	8003e60 <HAL_RCC_OscConfig+0x2d0>
 8003e7e:	e000      	b.n	8003e82 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0302 	and.w	r3, r3, #2
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d060      	beq.n	8003f50 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	2b04      	cmp	r3, #4
 8003e92:	d005      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x310>
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	2b0c      	cmp	r3, #12
 8003e98:	d119      	bne.n	8003ece <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d116      	bne.n	8003ece <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ea0:	4b7c      	ldr	r3, [pc, #496]	@ (8004094 <HAL_RCC_OscConfig+0x504>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d005      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x328>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d101      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e27d      	b.n	80043b4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eb8:	4b76      	ldr	r3, [pc, #472]	@ (8004094 <HAL_RCC_OscConfig+0x504>)
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	061b      	lsls	r3, r3, #24
 8003ec6:	4973      	ldr	r1, [pc, #460]	@ (8004094 <HAL_RCC_OscConfig+0x504>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ecc:	e040      	b.n	8003f50 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d023      	beq.n	8003f1e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ed6:	4b6f      	ldr	r3, [pc, #444]	@ (8004094 <HAL_RCC_OscConfig+0x504>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a6e      	ldr	r2, [pc, #440]	@ (8004094 <HAL_RCC_OscConfig+0x504>)
 8003edc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ee0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee2:	f7fe fb9d 	bl	8002620 <HAL_GetTick>
 8003ee6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ee8:	e008      	b.n	8003efc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003eea:	f7fe fb99 	bl	8002620 <HAL_GetTick>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d901      	bls.n	8003efc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	e25b      	b.n	80043b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003efc:	4b65      	ldr	r3, [pc, #404]	@ (8004094 <HAL_RCC_OscConfig+0x504>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d0f0      	beq.n	8003eea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f08:	4b62      	ldr	r3, [pc, #392]	@ (8004094 <HAL_RCC_OscConfig+0x504>)
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	061b      	lsls	r3, r3, #24
 8003f16:	495f      	ldr	r1, [pc, #380]	@ (8004094 <HAL_RCC_OscConfig+0x504>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	604b      	str	r3, [r1, #4]
 8003f1c:	e018      	b.n	8003f50 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f1e:	4b5d      	ldr	r3, [pc, #372]	@ (8004094 <HAL_RCC_OscConfig+0x504>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a5c      	ldr	r2, [pc, #368]	@ (8004094 <HAL_RCC_OscConfig+0x504>)
 8003f24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f2a:	f7fe fb79 	bl	8002620 <HAL_GetTick>
 8003f2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f30:	e008      	b.n	8003f44 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f32:	f7fe fb75 	bl	8002620 <HAL_GetTick>
 8003f36:	4602      	mov	r2, r0
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d901      	bls.n	8003f44 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e237      	b.n	80043b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f44:	4b53      	ldr	r3, [pc, #332]	@ (8004094 <HAL_RCC_OscConfig+0x504>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d1f0      	bne.n	8003f32 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0308 	and.w	r3, r3, #8
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d03c      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	695b      	ldr	r3, [r3, #20]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d01c      	beq.n	8003f9e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f64:	4b4b      	ldr	r3, [pc, #300]	@ (8004094 <HAL_RCC_OscConfig+0x504>)
 8003f66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f6a:	4a4a      	ldr	r2, [pc, #296]	@ (8004094 <HAL_RCC_OscConfig+0x504>)
 8003f6c:	f043 0301 	orr.w	r3, r3, #1
 8003f70:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f74:	f7fe fb54 	bl	8002620 <HAL_GetTick>
 8003f78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f7a:	e008      	b.n	8003f8e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f7c:	f7fe fb50 	bl	8002620 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e212      	b.n	80043b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f8e:	4b41      	ldr	r3, [pc, #260]	@ (8004094 <HAL_RCC_OscConfig+0x504>)
 8003f90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f94:	f003 0302 	and.w	r3, r3, #2
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d0ef      	beq.n	8003f7c <HAL_RCC_OscConfig+0x3ec>
 8003f9c:	e01b      	b.n	8003fd6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f9e:	4b3d      	ldr	r3, [pc, #244]	@ (8004094 <HAL_RCC_OscConfig+0x504>)
 8003fa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fa4:	4a3b      	ldr	r2, [pc, #236]	@ (8004094 <HAL_RCC_OscConfig+0x504>)
 8003fa6:	f023 0301 	bic.w	r3, r3, #1
 8003faa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fae:	f7fe fb37 	bl	8002620 <HAL_GetTick>
 8003fb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003fb4:	e008      	b.n	8003fc8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fb6:	f7fe fb33 	bl	8002620 <HAL_GetTick>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	d901      	bls.n	8003fc8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	e1f5      	b.n	80043b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003fc8:	4b32      	ldr	r3, [pc, #200]	@ (8004094 <HAL_RCC_OscConfig+0x504>)
 8003fca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d1ef      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0304 	and.w	r3, r3, #4
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	f000 80a6 	beq.w	8004130 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003fe8:	4b2a      	ldr	r3, [pc, #168]	@ (8004094 <HAL_RCC_OscConfig+0x504>)
 8003fea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d10d      	bne.n	8004010 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ff4:	4b27      	ldr	r3, [pc, #156]	@ (8004094 <HAL_RCC_OscConfig+0x504>)
 8003ff6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ff8:	4a26      	ldr	r2, [pc, #152]	@ (8004094 <HAL_RCC_OscConfig+0x504>)
 8003ffa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ffe:	6593      	str	r3, [r2, #88]	@ 0x58
 8004000:	4b24      	ldr	r3, [pc, #144]	@ (8004094 <HAL_RCC_OscConfig+0x504>)
 8004002:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004004:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004008:	60bb      	str	r3, [r7, #8]
 800400a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800400c:	2301      	movs	r3, #1
 800400e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004010:	4b21      	ldr	r3, [pc, #132]	@ (8004098 <HAL_RCC_OscConfig+0x508>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004018:	2b00      	cmp	r3, #0
 800401a:	d118      	bne.n	800404e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800401c:	4b1e      	ldr	r3, [pc, #120]	@ (8004098 <HAL_RCC_OscConfig+0x508>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a1d      	ldr	r2, [pc, #116]	@ (8004098 <HAL_RCC_OscConfig+0x508>)
 8004022:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004026:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004028:	f7fe fafa 	bl	8002620 <HAL_GetTick>
 800402c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800402e:	e008      	b.n	8004042 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004030:	f7fe faf6 	bl	8002620 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b02      	cmp	r3, #2
 800403c:	d901      	bls.n	8004042 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e1b8      	b.n	80043b4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004042:	4b15      	ldr	r3, [pc, #84]	@ (8004098 <HAL_RCC_OscConfig+0x508>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800404a:	2b00      	cmp	r3, #0
 800404c:	d0f0      	beq.n	8004030 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	2b01      	cmp	r3, #1
 8004054:	d108      	bne.n	8004068 <HAL_RCC_OscConfig+0x4d8>
 8004056:	4b0f      	ldr	r3, [pc, #60]	@ (8004094 <HAL_RCC_OscConfig+0x504>)
 8004058:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800405c:	4a0d      	ldr	r2, [pc, #52]	@ (8004094 <HAL_RCC_OscConfig+0x504>)
 800405e:	f043 0301 	orr.w	r3, r3, #1
 8004062:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004066:	e029      	b.n	80040bc <HAL_RCC_OscConfig+0x52c>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	2b05      	cmp	r3, #5
 800406e:	d115      	bne.n	800409c <HAL_RCC_OscConfig+0x50c>
 8004070:	4b08      	ldr	r3, [pc, #32]	@ (8004094 <HAL_RCC_OscConfig+0x504>)
 8004072:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004076:	4a07      	ldr	r2, [pc, #28]	@ (8004094 <HAL_RCC_OscConfig+0x504>)
 8004078:	f043 0304 	orr.w	r3, r3, #4
 800407c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004080:	4b04      	ldr	r3, [pc, #16]	@ (8004094 <HAL_RCC_OscConfig+0x504>)
 8004082:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004086:	4a03      	ldr	r2, [pc, #12]	@ (8004094 <HAL_RCC_OscConfig+0x504>)
 8004088:	f043 0301 	orr.w	r3, r3, #1
 800408c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004090:	e014      	b.n	80040bc <HAL_RCC_OscConfig+0x52c>
 8004092:	bf00      	nop
 8004094:	40021000 	.word	0x40021000
 8004098:	40007000 	.word	0x40007000
 800409c:	4b9d      	ldr	r3, [pc, #628]	@ (8004314 <HAL_RCC_OscConfig+0x784>)
 800409e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040a2:	4a9c      	ldr	r2, [pc, #624]	@ (8004314 <HAL_RCC_OscConfig+0x784>)
 80040a4:	f023 0301 	bic.w	r3, r3, #1
 80040a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80040ac:	4b99      	ldr	r3, [pc, #612]	@ (8004314 <HAL_RCC_OscConfig+0x784>)
 80040ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040b2:	4a98      	ldr	r2, [pc, #608]	@ (8004314 <HAL_RCC_OscConfig+0x784>)
 80040b4:	f023 0304 	bic.w	r3, r3, #4
 80040b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d016      	beq.n	80040f2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040c4:	f7fe faac 	bl	8002620 <HAL_GetTick>
 80040c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040ca:	e00a      	b.n	80040e2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040cc:	f7fe faa8 	bl	8002620 <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040da:	4293      	cmp	r3, r2
 80040dc:	d901      	bls.n	80040e2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e168      	b.n	80043b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040e2:	4b8c      	ldr	r3, [pc, #560]	@ (8004314 <HAL_RCC_OscConfig+0x784>)
 80040e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040e8:	f003 0302 	and.w	r3, r3, #2
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d0ed      	beq.n	80040cc <HAL_RCC_OscConfig+0x53c>
 80040f0:	e015      	b.n	800411e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040f2:	f7fe fa95 	bl	8002620 <HAL_GetTick>
 80040f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040f8:	e00a      	b.n	8004110 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040fa:	f7fe fa91 	bl	8002620 <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004108:	4293      	cmp	r3, r2
 800410a:	d901      	bls.n	8004110 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e151      	b.n	80043b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004110:	4b80      	ldr	r3, [pc, #512]	@ (8004314 <HAL_RCC_OscConfig+0x784>)
 8004112:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004116:	f003 0302 	and.w	r3, r3, #2
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1ed      	bne.n	80040fa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800411e:	7ffb      	ldrb	r3, [r7, #31]
 8004120:	2b01      	cmp	r3, #1
 8004122:	d105      	bne.n	8004130 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004124:	4b7b      	ldr	r3, [pc, #492]	@ (8004314 <HAL_RCC_OscConfig+0x784>)
 8004126:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004128:	4a7a      	ldr	r2, [pc, #488]	@ (8004314 <HAL_RCC_OscConfig+0x784>)
 800412a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800412e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0320 	and.w	r3, r3, #32
 8004138:	2b00      	cmp	r3, #0
 800413a:	d03c      	beq.n	80041b6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004140:	2b00      	cmp	r3, #0
 8004142:	d01c      	beq.n	800417e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004144:	4b73      	ldr	r3, [pc, #460]	@ (8004314 <HAL_RCC_OscConfig+0x784>)
 8004146:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800414a:	4a72      	ldr	r2, [pc, #456]	@ (8004314 <HAL_RCC_OscConfig+0x784>)
 800414c:	f043 0301 	orr.w	r3, r3, #1
 8004150:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004154:	f7fe fa64 	bl	8002620 <HAL_GetTick>
 8004158:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800415a:	e008      	b.n	800416e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800415c:	f7fe fa60 	bl	8002620 <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	2b02      	cmp	r3, #2
 8004168:	d901      	bls.n	800416e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e122      	b.n	80043b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800416e:	4b69      	ldr	r3, [pc, #420]	@ (8004314 <HAL_RCC_OscConfig+0x784>)
 8004170:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004174:	f003 0302 	and.w	r3, r3, #2
 8004178:	2b00      	cmp	r3, #0
 800417a:	d0ef      	beq.n	800415c <HAL_RCC_OscConfig+0x5cc>
 800417c:	e01b      	b.n	80041b6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800417e:	4b65      	ldr	r3, [pc, #404]	@ (8004314 <HAL_RCC_OscConfig+0x784>)
 8004180:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004184:	4a63      	ldr	r2, [pc, #396]	@ (8004314 <HAL_RCC_OscConfig+0x784>)
 8004186:	f023 0301 	bic.w	r3, r3, #1
 800418a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800418e:	f7fe fa47 	bl	8002620 <HAL_GetTick>
 8004192:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004194:	e008      	b.n	80041a8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004196:	f7fe fa43 	bl	8002620 <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d901      	bls.n	80041a8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e105      	b.n	80043b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80041a8:	4b5a      	ldr	r3, [pc, #360]	@ (8004314 <HAL_RCC_OscConfig+0x784>)
 80041aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80041ae:	f003 0302 	and.w	r3, r3, #2
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d1ef      	bne.n	8004196 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	f000 80f9 	beq.w	80043b2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041c4:	2b02      	cmp	r3, #2
 80041c6:	f040 80cf 	bne.w	8004368 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80041ca:	4b52      	ldr	r3, [pc, #328]	@ (8004314 <HAL_RCC_OscConfig+0x784>)
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	f003 0203 	and.w	r2, r3, #3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041da:	429a      	cmp	r2, r3
 80041dc:	d12c      	bne.n	8004238 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041e8:	3b01      	subs	r3, #1
 80041ea:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d123      	bne.n	8004238 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041fa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d11b      	bne.n	8004238 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800420a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800420c:	429a      	cmp	r2, r3
 800420e:	d113      	bne.n	8004238 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800421a:	085b      	lsrs	r3, r3, #1
 800421c:	3b01      	subs	r3, #1
 800421e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004220:	429a      	cmp	r2, r3
 8004222:	d109      	bne.n	8004238 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800422e:	085b      	lsrs	r3, r3, #1
 8004230:	3b01      	subs	r3, #1
 8004232:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004234:	429a      	cmp	r2, r3
 8004236:	d071      	beq.n	800431c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	2b0c      	cmp	r3, #12
 800423c:	d068      	beq.n	8004310 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800423e:	4b35      	ldr	r3, [pc, #212]	@ (8004314 <HAL_RCC_OscConfig+0x784>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d105      	bne.n	8004256 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800424a:	4b32      	ldr	r3, [pc, #200]	@ (8004314 <HAL_RCC_OscConfig+0x784>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d001      	beq.n	800425a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e0ac      	b.n	80043b4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800425a:	4b2e      	ldr	r3, [pc, #184]	@ (8004314 <HAL_RCC_OscConfig+0x784>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a2d      	ldr	r2, [pc, #180]	@ (8004314 <HAL_RCC_OscConfig+0x784>)
 8004260:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004264:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004266:	f7fe f9db 	bl	8002620 <HAL_GetTick>
 800426a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800426c:	e008      	b.n	8004280 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800426e:	f7fe f9d7 	bl	8002620 <HAL_GetTick>
 8004272:	4602      	mov	r2, r0
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	2b02      	cmp	r3, #2
 800427a:	d901      	bls.n	8004280 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	e099      	b.n	80043b4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004280:	4b24      	ldr	r3, [pc, #144]	@ (8004314 <HAL_RCC_OscConfig+0x784>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d1f0      	bne.n	800426e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800428c:	4b21      	ldr	r3, [pc, #132]	@ (8004314 <HAL_RCC_OscConfig+0x784>)
 800428e:	68da      	ldr	r2, [r3, #12]
 8004290:	4b21      	ldr	r3, [pc, #132]	@ (8004318 <HAL_RCC_OscConfig+0x788>)
 8004292:	4013      	ands	r3, r2
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800429c:	3a01      	subs	r2, #1
 800429e:	0112      	lsls	r2, r2, #4
 80042a0:	4311      	orrs	r1, r2
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80042a6:	0212      	lsls	r2, r2, #8
 80042a8:	4311      	orrs	r1, r2
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80042ae:	0852      	lsrs	r2, r2, #1
 80042b0:	3a01      	subs	r2, #1
 80042b2:	0552      	lsls	r2, r2, #21
 80042b4:	4311      	orrs	r1, r2
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80042ba:	0852      	lsrs	r2, r2, #1
 80042bc:	3a01      	subs	r2, #1
 80042be:	0652      	lsls	r2, r2, #25
 80042c0:	4311      	orrs	r1, r2
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80042c6:	06d2      	lsls	r2, r2, #27
 80042c8:	430a      	orrs	r2, r1
 80042ca:	4912      	ldr	r1, [pc, #72]	@ (8004314 <HAL_RCC_OscConfig+0x784>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80042d0:	4b10      	ldr	r3, [pc, #64]	@ (8004314 <HAL_RCC_OscConfig+0x784>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a0f      	ldr	r2, [pc, #60]	@ (8004314 <HAL_RCC_OscConfig+0x784>)
 80042d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80042da:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80042dc:	4b0d      	ldr	r3, [pc, #52]	@ (8004314 <HAL_RCC_OscConfig+0x784>)
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	4a0c      	ldr	r2, [pc, #48]	@ (8004314 <HAL_RCC_OscConfig+0x784>)
 80042e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80042e6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80042e8:	f7fe f99a 	bl	8002620 <HAL_GetTick>
 80042ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042ee:	e008      	b.n	8004302 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042f0:	f7fe f996 	bl	8002620 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d901      	bls.n	8004302 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e058      	b.n	80043b4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004302:	4b04      	ldr	r3, [pc, #16]	@ (8004314 <HAL_RCC_OscConfig+0x784>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d0f0      	beq.n	80042f0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800430e:	e050      	b.n	80043b2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e04f      	b.n	80043b4 <HAL_RCC_OscConfig+0x824>
 8004314:	40021000 	.word	0x40021000
 8004318:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800431c:	4b27      	ldr	r3, [pc, #156]	@ (80043bc <HAL_RCC_OscConfig+0x82c>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d144      	bne.n	80043b2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004328:	4b24      	ldr	r3, [pc, #144]	@ (80043bc <HAL_RCC_OscConfig+0x82c>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a23      	ldr	r2, [pc, #140]	@ (80043bc <HAL_RCC_OscConfig+0x82c>)
 800432e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004332:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004334:	4b21      	ldr	r3, [pc, #132]	@ (80043bc <HAL_RCC_OscConfig+0x82c>)
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	4a20      	ldr	r2, [pc, #128]	@ (80043bc <HAL_RCC_OscConfig+0x82c>)
 800433a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800433e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004340:	f7fe f96e 	bl	8002620 <HAL_GetTick>
 8004344:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004346:	e008      	b.n	800435a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004348:	f7fe f96a 	bl	8002620 <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	2b02      	cmp	r3, #2
 8004354:	d901      	bls.n	800435a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e02c      	b.n	80043b4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800435a:	4b18      	ldr	r3, [pc, #96]	@ (80043bc <HAL_RCC_OscConfig+0x82c>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d0f0      	beq.n	8004348 <HAL_RCC_OscConfig+0x7b8>
 8004366:	e024      	b.n	80043b2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	2b0c      	cmp	r3, #12
 800436c:	d01f      	beq.n	80043ae <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800436e:	4b13      	ldr	r3, [pc, #76]	@ (80043bc <HAL_RCC_OscConfig+0x82c>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a12      	ldr	r2, [pc, #72]	@ (80043bc <HAL_RCC_OscConfig+0x82c>)
 8004374:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004378:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800437a:	f7fe f951 	bl	8002620 <HAL_GetTick>
 800437e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004380:	e008      	b.n	8004394 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004382:	f7fe f94d 	bl	8002620 <HAL_GetTick>
 8004386:	4602      	mov	r2, r0
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	2b02      	cmp	r3, #2
 800438e:	d901      	bls.n	8004394 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e00f      	b.n	80043b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004394:	4b09      	ldr	r3, [pc, #36]	@ (80043bc <HAL_RCC_OscConfig+0x82c>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d1f0      	bne.n	8004382 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80043a0:	4b06      	ldr	r3, [pc, #24]	@ (80043bc <HAL_RCC_OscConfig+0x82c>)
 80043a2:	68da      	ldr	r2, [r3, #12]
 80043a4:	4905      	ldr	r1, [pc, #20]	@ (80043bc <HAL_RCC_OscConfig+0x82c>)
 80043a6:	4b06      	ldr	r3, [pc, #24]	@ (80043c0 <HAL_RCC_OscConfig+0x830>)
 80043a8:	4013      	ands	r3, r2
 80043aa:	60cb      	str	r3, [r1, #12]
 80043ac:	e001      	b.n	80043b2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e000      	b.n	80043b4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3720      	adds	r7, #32
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	40021000 	.word	0x40021000
 80043c0:	feeefffc 	.word	0xfeeefffc

080043c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b086      	sub	sp, #24
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80043ce:	2300      	movs	r3, #0
 80043d0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d101      	bne.n	80043dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e11d      	b.n	8004618 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043dc:	4b90      	ldr	r3, [pc, #576]	@ (8004620 <HAL_RCC_ClockConfig+0x25c>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 030f 	and.w	r3, r3, #15
 80043e4:	683a      	ldr	r2, [r7, #0]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d910      	bls.n	800440c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043ea:	4b8d      	ldr	r3, [pc, #564]	@ (8004620 <HAL_RCC_ClockConfig+0x25c>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f023 020f 	bic.w	r2, r3, #15
 80043f2:	498b      	ldr	r1, [pc, #556]	@ (8004620 <HAL_RCC_ClockConfig+0x25c>)
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043fa:	4b89      	ldr	r3, [pc, #548]	@ (8004620 <HAL_RCC_ClockConfig+0x25c>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 030f 	and.w	r3, r3, #15
 8004402:	683a      	ldr	r2, [r7, #0]
 8004404:	429a      	cmp	r2, r3
 8004406:	d001      	beq.n	800440c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e105      	b.n	8004618 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0302 	and.w	r3, r3, #2
 8004414:	2b00      	cmp	r3, #0
 8004416:	d010      	beq.n	800443a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	689a      	ldr	r2, [r3, #8]
 800441c:	4b81      	ldr	r3, [pc, #516]	@ (8004624 <HAL_RCC_ClockConfig+0x260>)
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004424:	429a      	cmp	r2, r3
 8004426:	d908      	bls.n	800443a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004428:	4b7e      	ldr	r3, [pc, #504]	@ (8004624 <HAL_RCC_ClockConfig+0x260>)
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	497b      	ldr	r1, [pc, #492]	@ (8004624 <HAL_RCC_ClockConfig+0x260>)
 8004436:	4313      	orrs	r3, r2
 8004438:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0301 	and.w	r3, r3, #1
 8004442:	2b00      	cmp	r3, #0
 8004444:	d079      	beq.n	800453a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	2b03      	cmp	r3, #3
 800444c:	d11e      	bne.n	800448c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800444e:	4b75      	ldr	r3, [pc, #468]	@ (8004624 <HAL_RCC_ClockConfig+0x260>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d101      	bne.n	800445e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e0dc      	b.n	8004618 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800445e:	f000 fa3b 	bl	80048d8 <RCC_GetSysClockFreqFromPLLSource>
 8004462:	4603      	mov	r3, r0
 8004464:	4a70      	ldr	r2, [pc, #448]	@ (8004628 <HAL_RCC_ClockConfig+0x264>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d946      	bls.n	80044f8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800446a:	4b6e      	ldr	r3, [pc, #440]	@ (8004624 <HAL_RCC_ClockConfig+0x260>)
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d140      	bne.n	80044f8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004476:	4b6b      	ldr	r3, [pc, #428]	@ (8004624 <HAL_RCC_ClockConfig+0x260>)
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800447e:	4a69      	ldr	r2, [pc, #420]	@ (8004624 <HAL_RCC_ClockConfig+0x260>)
 8004480:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004484:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004486:	2380      	movs	r3, #128	@ 0x80
 8004488:	617b      	str	r3, [r7, #20]
 800448a:	e035      	b.n	80044f8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	2b02      	cmp	r3, #2
 8004492:	d107      	bne.n	80044a4 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004494:	4b63      	ldr	r3, [pc, #396]	@ (8004624 <HAL_RCC_ClockConfig+0x260>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d115      	bne.n	80044cc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e0b9      	b.n	8004618 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d107      	bne.n	80044bc <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044ac:	4b5d      	ldr	r3, [pc, #372]	@ (8004624 <HAL_RCC_ClockConfig+0x260>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0302 	and.w	r3, r3, #2
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d109      	bne.n	80044cc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e0ad      	b.n	8004618 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044bc:	4b59      	ldr	r3, [pc, #356]	@ (8004624 <HAL_RCC_ClockConfig+0x260>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d101      	bne.n	80044cc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e0a5      	b.n	8004618 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80044cc:	f000 f8b4 	bl	8004638 <HAL_RCC_GetSysClockFreq>
 80044d0:	4603      	mov	r3, r0
 80044d2:	4a55      	ldr	r2, [pc, #340]	@ (8004628 <HAL_RCC_ClockConfig+0x264>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d90f      	bls.n	80044f8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80044d8:	4b52      	ldr	r3, [pc, #328]	@ (8004624 <HAL_RCC_ClockConfig+0x260>)
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d109      	bne.n	80044f8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80044e4:	4b4f      	ldr	r3, [pc, #316]	@ (8004624 <HAL_RCC_ClockConfig+0x260>)
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80044ec:	4a4d      	ldr	r2, [pc, #308]	@ (8004624 <HAL_RCC_ClockConfig+0x260>)
 80044ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044f2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80044f4:	2380      	movs	r3, #128	@ 0x80
 80044f6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80044f8:	4b4a      	ldr	r3, [pc, #296]	@ (8004624 <HAL_RCC_ClockConfig+0x260>)
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f023 0203 	bic.w	r2, r3, #3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	4947      	ldr	r1, [pc, #284]	@ (8004624 <HAL_RCC_ClockConfig+0x260>)
 8004506:	4313      	orrs	r3, r2
 8004508:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800450a:	f7fe f889 	bl	8002620 <HAL_GetTick>
 800450e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004510:	e00a      	b.n	8004528 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004512:	f7fe f885 	bl	8002620 <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004520:	4293      	cmp	r3, r2
 8004522:	d901      	bls.n	8004528 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e077      	b.n	8004618 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004528:	4b3e      	ldr	r3, [pc, #248]	@ (8004624 <HAL_RCC_ClockConfig+0x260>)
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	f003 020c 	and.w	r2, r3, #12
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	429a      	cmp	r2, r3
 8004538:	d1eb      	bne.n	8004512 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	2b80      	cmp	r3, #128	@ 0x80
 800453e:	d105      	bne.n	800454c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004540:	4b38      	ldr	r3, [pc, #224]	@ (8004624 <HAL_RCC_ClockConfig+0x260>)
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	4a37      	ldr	r2, [pc, #220]	@ (8004624 <HAL_RCC_ClockConfig+0x260>)
 8004546:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800454a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0302 	and.w	r3, r3, #2
 8004554:	2b00      	cmp	r3, #0
 8004556:	d010      	beq.n	800457a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	689a      	ldr	r2, [r3, #8]
 800455c:	4b31      	ldr	r3, [pc, #196]	@ (8004624 <HAL_RCC_ClockConfig+0x260>)
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004564:	429a      	cmp	r2, r3
 8004566:	d208      	bcs.n	800457a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004568:	4b2e      	ldr	r3, [pc, #184]	@ (8004624 <HAL_RCC_ClockConfig+0x260>)
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	492b      	ldr	r1, [pc, #172]	@ (8004624 <HAL_RCC_ClockConfig+0x260>)
 8004576:	4313      	orrs	r3, r2
 8004578:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800457a:	4b29      	ldr	r3, [pc, #164]	@ (8004620 <HAL_RCC_ClockConfig+0x25c>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 030f 	and.w	r3, r3, #15
 8004582:	683a      	ldr	r2, [r7, #0]
 8004584:	429a      	cmp	r2, r3
 8004586:	d210      	bcs.n	80045aa <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004588:	4b25      	ldr	r3, [pc, #148]	@ (8004620 <HAL_RCC_ClockConfig+0x25c>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f023 020f 	bic.w	r2, r3, #15
 8004590:	4923      	ldr	r1, [pc, #140]	@ (8004620 <HAL_RCC_ClockConfig+0x25c>)
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	4313      	orrs	r3, r2
 8004596:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004598:	4b21      	ldr	r3, [pc, #132]	@ (8004620 <HAL_RCC_ClockConfig+0x25c>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 030f 	and.w	r3, r3, #15
 80045a0:	683a      	ldr	r2, [r7, #0]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d001      	beq.n	80045aa <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e036      	b.n	8004618 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0304 	and.w	r3, r3, #4
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d008      	beq.n	80045c8 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045b6:	4b1b      	ldr	r3, [pc, #108]	@ (8004624 <HAL_RCC_ClockConfig+0x260>)
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	4918      	ldr	r1, [pc, #96]	@ (8004624 <HAL_RCC_ClockConfig+0x260>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0308 	and.w	r3, r3, #8
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d009      	beq.n	80045e8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045d4:	4b13      	ldr	r3, [pc, #76]	@ (8004624 <HAL_RCC_ClockConfig+0x260>)
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	691b      	ldr	r3, [r3, #16]
 80045e0:	00db      	lsls	r3, r3, #3
 80045e2:	4910      	ldr	r1, [pc, #64]	@ (8004624 <HAL_RCC_ClockConfig+0x260>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80045e8:	f000 f826 	bl	8004638 <HAL_RCC_GetSysClockFreq>
 80045ec:	4602      	mov	r2, r0
 80045ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004624 <HAL_RCC_ClockConfig+0x260>)
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	091b      	lsrs	r3, r3, #4
 80045f4:	f003 030f 	and.w	r3, r3, #15
 80045f8:	490c      	ldr	r1, [pc, #48]	@ (800462c <HAL_RCC_ClockConfig+0x268>)
 80045fa:	5ccb      	ldrb	r3, [r1, r3]
 80045fc:	f003 031f 	and.w	r3, r3, #31
 8004600:	fa22 f303 	lsr.w	r3, r2, r3
 8004604:	4a0a      	ldr	r2, [pc, #40]	@ (8004630 <HAL_RCC_ClockConfig+0x26c>)
 8004606:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004608:	4b0a      	ldr	r3, [pc, #40]	@ (8004634 <HAL_RCC_ClockConfig+0x270>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4618      	mov	r0, r3
 800460e:	f7fd fa8f 	bl	8001b30 <HAL_InitTick>
 8004612:	4603      	mov	r3, r0
 8004614:	73fb      	strb	r3, [r7, #15]

  return status;
 8004616:	7bfb      	ldrb	r3, [r7, #15]
}
 8004618:	4618      	mov	r0, r3
 800461a:	3718      	adds	r7, #24
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}
 8004620:	40022000 	.word	0x40022000
 8004624:	40021000 	.word	0x40021000
 8004628:	04c4b400 	.word	0x04c4b400
 800462c:	0800aa68 	.word	0x0800aa68
 8004630:	20000000 	.word	0x20000000
 8004634:	20000084 	.word	0x20000084

08004638 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004638:	b480      	push	{r7}
 800463a:	b089      	sub	sp, #36	@ 0x24
 800463c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800463e:	2300      	movs	r3, #0
 8004640:	61fb      	str	r3, [r7, #28]
 8004642:	2300      	movs	r3, #0
 8004644:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004646:	4b3e      	ldr	r3, [pc, #248]	@ (8004740 <HAL_RCC_GetSysClockFreq+0x108>)
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f003 030c 	and.w	r3, r3, #12
 800464e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004650:	4b3b      	ldr	r3, [pc, #236]	@ (8004740 <HAL_RCC_GetSysClockFreq+0x108>)
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	f003 0303 	and.w	r3, r3, #3
 8004658:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d005      	beq.n	800466c <HAL_RCC_GetSysClockFreq+0x34>
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	2b0c      	cmp	r3, #12
 8004664:	d121      	bne.n	80046aa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2b01      	cmp	r3, #1
 800466a:	d11e      	bne.n	80046aa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800466c:	4b34      	ldr	r3, [pc, #208]	@ (8004740 <HAL_RCC_GetSysClockFreq+0x108>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0308 	and.w	r3, r3, #8
 8004674:	2b00      	cmp	r3, #0
 8004676:	d107      	bne.n	8004688 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004678:	4b31      	ldr	r3, [pc, #196]	@ (8004740 <HAL_RCC_GetSysClockFreq+0x108>)
 800467a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800467e:	0a1b      	lsrs	r3, r3, #8
 8004680:	f003 030f 	and.w	r3, r3, #15
 8004684:	61fb      	str	r3, [r7, #28]
 8004686:	e005      	b.n	8004694 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004688:	4b2d      	ldr	r3, [pc, #180]	@ (8004740 <HAL_RCC_GetSysClockFreq+0x108>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	091b      	lsrs	r3, r3, #4
 800468e:	f003 030f 	and.w	r3, r3, #15
 8004692:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004694:	4a2b      	ldr	r2, [pc, #172]	@ (8004744 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800469c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d10d      	bne.n	80046c0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80046a8:	e00a      	b.n	80046c0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	2b04      	cmp	r3, #4
 80046ae:	d102      	bne.n	80046b6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80046b0:	4b25      	ldr	r3, [pc, #148]	@ (8004748 <HAL_RCC_GetSysClockFreq+0x110>)
 80046b2:	61bb      	str	r3, [r7, #24]
 80046b4:	e004      	b.n	80046c0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	2b08      	cmp	r3, #8
 80046ba:	d101      	bne.n	80046c0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80046bc:	4b23      	ldr	r3, [pc, #140]	@ (800474c <HAL_RCC_GetSysClockFreq+0x114>)
 80046be:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	2b0c      	cmp	r3, #12
 80046c4:	d134      	bne.n	8004730 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80046c6:	4b1e      	ldr	r3, [pc, #120]	@ (8004740 <HAL_RCC_GetSysClockFreq+0x108>)
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	f003 0303 	and.w	r3, r3, #3
 80046ce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d003      	beq.n	80046de <HAL_RCC_GetSysClockFreq+0xa6>
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	2b03      	cmp	r3, #3
 80046da:	d003      	beq.n	80046e4 <HAL_RCC_GetSysClockFreq+0xac>
 80046dc:	e005      	b.n	80046ea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80046de:	4b1a      	ldr	r3, [pc, #104]	@ (8004748 <HAL_RCC_GetSysClockFreq+0x110>)
 80046e0:	617b      	str	r3, [r7, #20]
      break;
 80046e2:	e005      	b.n	80046f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80046e4:	4b19      	ldr	r3, [pc, #100]	@ (800474c <HAL_RCC_GetSysClockFreq+0x114>)
 80046e6:	617b      	str	r3, [r7, #20]
      break;
 80046e8:	e002      	b.n	80046f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	617b      	str	r3, [r7, #20]
      break;
 80046ee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80046f0:	4b13      	ldr	r3, [pc, #76]	@ (8004740 <HAL_RCC_GetSysClockFreq+0x108>)
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	091b      	lsrs	r3, r3, #4
 80046f6:	f003 030f 	and.w	r3, r3, #15
 80046fa:	3301      	adds	r3, #1
 80046fc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80046fe:	4b10      	ldr	r3, [pc, #64]	@ (8004740 <HAL_RCC_GetSysClockFreq+0x108>)
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	0a1b      	lsrs	r3, r3, #8
 8004704:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004708:	697a      	ldr	r2, [r7, #20]
 800470a:	fb03 f202 	mul.w	r2, r3, r2
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	fbb2 f3f3 	udiv	r3, r2, r3
 8004714:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004716:	4b0a      	ldr	r3, [pc, #40]	@ (8004740 <HAL_RCC_GetSysClockFreq+0x108>)
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	0e5b      	lsrs	r3, r3, #25
 800471c:	f003 0303 	and.w	r3, r3, #3
 8004720:	3301      	adds	r3, #1
 8004722:	005b      	lsls	r3, r3, #1
 8004724:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004726:	697a      	ldr	r2, [r7, #20]
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	fbb2 f3f3 	udiv	r3, r2, r3
 800472e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004730:	69bb      	ldr	r3, [r7, #24]
}
 8004732:	4618      	mov	r0, r3
 8004734:	3724      	adds	r7, #36	@ 0x24
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop
 8004740:	40021000 	.word	0x40021000
 8004744:	0800aa80 	.word	0x0800aa80
 8004748:	00f42400 	.word	0x00f42400
 800474c:	007a1200 	.word	0x007a1200

08004750 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004750:	b480      	push	{r7}
 8004752:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004754:	4b03      	ldr	r3, [pc, #12]	@ (8004764 <HAL_RCC_GetHCLKFreq+0x14>)
 8004756:	681b      	ldr	r3, [r3, #0]
}
 8004758:	4618      	mov	r0, r3
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	20000000 	.word	0x20000000

08004768 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800476c:	f7ff fff0 	bl	8004750 <HAL_RCC_GetHCLKFreq>
 8004770:	4602      	mov	r2, r0
 8004772:	4b06      	ldr	r3, [pc, #24]	@ (800478c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	0a1b      	lsrs	r3, r3, #8
 8004778:	f003 0307 	and.w	r3, r3, #7
 800477c:	4904      	ldr	r1, [pc, #16]	@ (8004790 <HAL_RCC_GetPCLK1Freq+0x28>)
 800477e:	5ccb      	ldrb	r3, [r1, r3]
 8004780:	f003 031f 	and.w	r3, r3, #31
 8004784:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004788:	4618      	mov	r0, r3
 800478a:	bd80      	pop	{r7, pc}
 800478c:	40021000 	.word	0x40021000
 8004790:	0800aa78 	.word	0x0800aa78

08004794 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004798:	f7ff ffda 	bl	8004750 <HAL_RCC_GetHCLKFreq>
 800479c:	4602      	mov	r2, r0
 800479e:	4b06      	ldr	r3, [pc, #24]	@ (80047b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	0adb      	lsrs	r3, r3, #11
 80047a4:	f003 0307 	and.w	r3, r3, #7
 80047a8:	4904      	ldr	r1, [pc, #16]	@ (80047bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80047aa:	5ccb      	ldrb	r3, [r1, r3]
 80047ac:	f003 031f 	and.w	r3, r3, #31
 80047b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	40021000 	.word	0x40021000
 80047bc:	0800aa78 	.word	0x0800aa78

080047c0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	220f      	movs	r2, #15
 80047ce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80047d0:	4b12      	ldr	r3, [pc, #72]	@ (800481c <HAL_RCC_GetClockConfig+0x5c>)
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	f003 0203 	and.w	r2, r3, #3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80047dc:	4b0f      	ldr	r3, [pc, #60]	@ (800481c <HAL_RCC_GetClockConfig+0x5c>)
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80047e8:	4b0c      	ldr	r3, [pc, #48]	@ (800481c <HAL_RCC_GetClockConfig+0x5c>)
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80047f4:	4b09      	ldr	r3, [pc, #36]	@ (800481c <HAL_RCC_GetClockConfig+0x5c>)
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	08db      	lsrs	r3, r3, #3
 80047fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004802:	4b07      	ldr	r3, [pc, #28]	@ (8004820 <HAL_RCC_GetClockConfig+0x60>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 020f 	and.w	r2, r3, #15
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	601a      	str	r2, [r3, #0]
}
 800480e:	bf00      	nop
 8004810:	370c      	adds	r7, #12
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	40021000 	.word	0x40021000
 8004820:	40022000 	.word	0x40022000

08004824 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b086      	sub	sp, #24
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800482c:	2300      	movs	r3, #0
 800482e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004830:	4b27      	ldr	r3, [pc, #156]	@ (80048d0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004832:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004834:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004838:	2b00      	cmp	r3, #0
 800483a:	d003      	beq.n	8004844 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800483c:	f7ff f8e4 	bl	8003a08 <HAL_PWREx_GetVoltageRange>
 8004840:	6178      	str	r0, [r7, #20]
 8004842:	e014      	b.n	800486e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004844:	4b22      	ldr	r3, [pc, #136]	@ (80048d0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004846:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004848:	4a21      	ldr	r2, [pc, #132]	@ (80048d0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800484a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800484e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004850:	4b1f      	ldr	r3, [pc, #124]	@ (80048d0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004852:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004854:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004858:	60fb      	str	r3, [r7, #12]
 800485a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800485c:	f7ff f8d4 	bl	8003a08 <HAL_PWREx_GetVoltageRange>
 8004860:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004862:	4b1b      	ldr	r3, [pc, #108]	@ (80048d0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004866:	4a1a      	ldr	r2, [pc, #104]	@ (80048d0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004868:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800486c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004874:	d10b      	bne.n	800488e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2b80      	cmp	r3, #128	@ 0x80
 800487a:	d913      	bls.n	80048a4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2ba0      	cmp	r3, #160	@ 0xa0
 8004880:	d902      	bls.n	8004888 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004882:	2302      	movs	r3, #2
 8004884:	613b      	str	r3, [r7, #16]
 8004886:	e00d      	b.n	80048a4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004888:	2301      	movs	r3, #1
 800488a:	613b      	str	r3, [r7, #16]
 800488c:	e00a      	b.n	80048a4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2b7f      	cmp	r3, #127	@ 0x7f
 8004892:	d902      	bls.n	800489a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004894:	2302      	movs	r3, #2
 8004896:	613b      	str	r3, [r7, #16]
 8004898:	e004      	b.n	80048a4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2b70      	cmp	r3, #112	@ 0x70
 800489e:	d101      	bne.n	80048a4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80048a0:	2301      	movs	r3, #1
 80048a2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80048a4:	4b0b      	ldr	r3, [pc, #44]	@ (80048d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f023 020f 	bic.w	r2, r3, #15
 80048ac:	4909      	ldr	r1, [pc, #36]	@ (80048d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80048b4:	4b07      	ldr	r3, [pc, #28]	@ (80048d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 030f 	and.w	r3, r3, #15
 80048bc:	693a      	ldr	r2, [r7, #16]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d001      	beq.n	80048c6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e000      	b.n	80048c8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80048c6:	2300      	movs	r3, #0
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3718      	adds	r7, #24
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	40021000 	.word	0x40021000
 80048d4:	40022000 	.word	0x40022000

080048d8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80048d8:	b480      	push	{r7}
 80048da:	b087      	sub	sp, #28
 80048dc:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80048de:	4b2d      	ldr	r3, [pc, #180]	@ (8004994 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	f003 0303 	and.w	r3, r3, #3
 80048e6:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2b03      	cmp	r3, #3
 80048ec:	d00b      	beq.n	8004906 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2b03      	cmp	r3, #3
 80048f2:	d825      	bhi.n	8004940 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d008      	beq.n	800490c <RCC_GetSysClockFreqFromPLLSource+0x34>
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d11f      	bne.n	8004940 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004900:	4b25      	ldr	r3, [pc, #148]	@ (8004998 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004902:	613b      	str	r3, [r7, #16]
    break;
 8004904:	e01f      	b.n	8004946 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004906:	4b25      	ldr	r3, [pc, #148]	@ (800499c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004908:	613b      	str	r3, [r7, #16]
    break;
 800490a:	e01c      	b.n	8004946 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800490c:	4b21      	ldr	r3, [pc, #132]	@ (8004994 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 0308 	and.w	r3, r3, #8
 8004914:	2b00      	cmp	r3, #0
 8004916:	d107      	bne.n	8004928 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004918:	4b1e      	ldr	r3, [pc, #120]	@ (8004994 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800491a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800491e:	0a1b      	lsrs	r3, r3, #8
 8004920:	f003 030f 	and.w	r3, r3, #15
 8004924:	617b      	str	r3, [r7, #20]
 8004926:	e005      	b.n	8004934 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004928:	4b1a      	ldr	r3, [pc, #104]	@ (8004994 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	091b      	lsrs	r3, r3, #4
 800492e:	f003 030f 	and.w	r3, r3, #15
 8004932:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004934:	4a1a      	ldr	r2, [pc, #104]	@ (80049a0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800493c:	613b      	str	r3, [r7, #16]
    break;
 800493e:	e002      	b.n	8004946 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004940:	2300      	movs	r3, #0
 8004942:	613b      	str	r3, [r7, #16]
    break;
 8004944:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004946:	4b13      	ldr	r3, [pc, #76]	@ (8004994 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	091b      	lsrs	r3, r3, #4
 800494c:	f003 030f 	and.w	r3, r3, #15
 8004950:	3301      	adds	r3, #1
 8004952:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004954:	4b0f      	ldr	r3, [pc, #60]	@ (8004994 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	0a1b      	lsrs	r3, r3, #8
 800495a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800495e:	693a      	ldr	r2, [r7, #16]
 8004960:	fb03 f202 	mul.w	r2, r3, r2
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	fbb2 f3f3 	udiv	r3, r2, r3
 800496a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800496c:	4b09      	ldr	r3, [pc, #36]	@ (8004994 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	0e5b      	lsrs	r3, r3, #25
 8004972:	f003 0303 	and.w	r3, r3, #3
 8004976:	3301      	adds	r3, #1
 8004978:	005b      	lsls	r3, r3, #1
 800497a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800497c:	693a      	ldr	r2, [r7, #16]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	fbb2 f3f3 	udiv	r3, r2, r3
 8004984:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004986:	683b      	ldr	r3, [r7, #0]
}
 8004988:	4618      	mov	r0, r3
 800498a:	371c      	adds	r7, #28
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr
 8004994:	40021000 	.word	0x40021000
 8004998:	00f42400 	.word	0x00f42400
 800499c:	007a1200 	.word	0x007a1200
 80049a0:	0800aa80 	.word	0x0800aa80

080049a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b086      	sub	sp, #24
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80049ac:	2300      	movs	r3, #0
 80049ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80049b0:	2300      	movs	r3, #0
 80049b2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d040      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049c4:	2b80      	cmp	r3, #128	@ 0x80
 80049c6:	d02a      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80049c8:	2b80      	cmp	r3, #128	@ 0x80
 80049ca:	d825      	bhi.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80049cc:	2b60      	cmp	r3, #96	@ 0x60
 80049ce:	d026      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80049d0:	2b60      	cmp	r3, #96	@ 0x60
 80049d2:	d821      	bhi.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80049d4:	2b40      	cmp	r3, #64	@ 0x40
 80049d6:	d006      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80049d8:	2b40      	cmp	r3, #64	@ 0x40
 80049da:	d81d      	bhi.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d009      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80049e0:	2b20      	cmp	r3, #32
 80049e2:	d010      	beq.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80049e4:	e018      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80049e6:	4b89      	ldr	r3, [pc, #548]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	4a88      	ldr	r2, [pc, #544]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80049ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049f0:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049f2:	e015      	b.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	3304      	adds	r3, #4
 80049f8:	2100      	movs	r1, #0
 80049fa:	4618      	mov	r0, r3
 80049fc:	f000 fb02 	bl	8005004 <RCCEx_PLLSAI1_Config>
 8004a00:	4603      	mov	r3, r0
 8004a02:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a04:	e00c      	b.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	3320      	adds	r3, #32
 8004a0a:	2100      	movs	r1, #0
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f000 fbed 	bl	80051ec <RCCEx_PLLSAI2_Config>
 8004a12:	4603      	mov	r3, r0
 8004a14:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a16:	e003      	b.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	74fb      	strb	r3, [r7, #19]
      break;
 8004a1c:	e000      	b.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004a1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a20:	7cfb      	ldrb	r3, [r7, #19]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d10b      	bne.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a26:	4b79      	ldr	r3, [pc, #484]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a28:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004a2c:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a34:	4975      	ldr	r1, [pc, #468]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8004a3c:	e001      	b.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a3e:	7cfb      	ldrb	r3, [r7, #19]
 8004a40:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d047      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a56:	d030      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004a58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a5c:	d82a      	bhi.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004a5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a62:	d02a      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004a64:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a68:	d824      	bhi.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004a6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a6e:	d008      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004a70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a74:	d81e      	bhi.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d00a      	beq.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004a7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a7e:	d010      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004a80:	e018      	b.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a82:	4b62      	ldr	r3, [pc, #392]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	4a61      	ldr	r2, [pc, #388]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a8c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a8e:	e015      	b.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	3304      	adds	r3, #4
 8004a94:	2100      	movs	r1, #0
 8004a96:	4618      	mov	r0, r3
 8004a98:	f000 fab4 	bl	8005004 <RCCEx_PLLSAI1_Config>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004aa0:	e00c      	b.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	3320      	adds	r3, #32
 8004aa6:	2100      	movs	r1, #0
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f000 fb9f 	bl	80051ec <RCCEx_PLLSAI2_Config>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004ab2:	e003      	b.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	74fb      	strb	r3, [r7, #19]
      break;
 8004ab8:	e000      	b.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004aba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004abc:	7cfb      	ldrb	r3, [r7, #19]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d10b      	bne.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004ac2:	4b52      	ldr	r3, [pc, #328]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ac4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004ac8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ad0:	494e      	ldr	r1, [pc, #312]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8004ad8:	e001      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ada:	7cfb      	ldrb	r3, [r7, #19]
 8004adc:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	f000 809f 	beq.w	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004aec:	2300      	movs	r3, #0
 8004aee:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004af0:	4b46      	ldr	r3, [pc, #280]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004af2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004af4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d101      	bne.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004afc:	2301      	movs	r3, #1
 8004afe:	e000      	b.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004b00:	2300      	movs	r3, #0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d00d      	beq.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b06:	4b41      	ldr	r3, [pc, #260]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b0a:	4a40      	ldr	r2, [pc, #256]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b10:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b12:	4b3e      	ldr	r3, [pc, #248]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b1a:	60bb      	str	r3, [r7, #8]
 8004b1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b22:	4b3b      	ldr	r3, [pc, #236]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a3a      	ldr	r2, [pc, #232]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004b28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b2c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b2e:	f7fd fd77 	bl	8002620 <HAL_GetTick>
 8004b32:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b34:	e009      	b.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b36:	f7fd fd73 	bl	8002620 <HAL_GetTick>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	2b02      	cmp	r3, #2
 8004b42:	d902      	bls.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	74fb      	strb	r3, [r7, #19]
        break;
 8004b48:	e005      	b.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b4a:	4b31      	ldr	r3, [pc, #196]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d0ef      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004b56:	7cfb      	ldrb	r3, [r7, #19]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d15b      	bne.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b5c:	4b2b      	ldr	r3, [pc, #172]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b66:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d01f      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b74:	697a      	ldr	r2, [r7, #20]
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d019      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b7a:	4b24      	ldr	r3, [pc, #144]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b84:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b86:	4b21      	ldr	r3, [pc, #132]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b8c:	4a1f      	ldr	r2, [pc, #124]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b92:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b96:	4b1d      	ldr	r3, [pc, #116]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b9c:	4a1b      	ldr	r2, [pc, #108]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ba2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004ba6:	4a19      	ldr	r2, [pc, #100]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	f003 0301 	and.w	r3, r3, #1
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d016      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bb8:	f7fd fd32 	bl	8002620 <HAL_GetTick>
 8004bbc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bbe:	e00b      	b.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bc0:	f7fd fd2e 	bl	8002620 <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d902      	bls.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	74fb      	strb	r3, [r7, #19]
            break;
 8004bd6:	e006      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bd8:	4b0c      	ldr	r3, [pc, #48]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bde:	f003 0302 	and.w	r3, r3, #2
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d0ec      	beq.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004be6:	7cfb      	ldrb	r3, [r7, #19]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d10c      	bne.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bec:	4b07      	ldr	r3, [pc, #28]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bf2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bfc:	4903      	ldr	r1, [pc, #12]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004c04:	e008      	b.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c06:	7cfb      	ldrb	r3, [r7, #19]
 8004c08:	74bb      	strb	r3, [r7, #18]
 8004c0a:	e005      	b.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004c0c:	40021000 	.word	0x40021000
 8004c10:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c14:	7cfb      	ldrb	r3, [r7, #19]
 8004c16:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c18:	7c7b      	ldrb	r3, [r7, #17]
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d105      	bne.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c1e:	4ba0      	ldr	r3, [pc, #640]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c22:	4a9f      	ldr	r2, [pc, #636]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c28:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0301 	and.w	r3, r3, #1
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d00a      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c36:	4b9a      	ldr	r3, [pc, #616]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c3c:	f023 0203 	bic.w	r2, r3, #3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c44:	4996      	ldr	r1, [pc, #600]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c46:	4313      	orrs	r3, r2
 8004c48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0302 	and.w	r3, r3, #2
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d00a      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c58:	4b91      	ldr	r3, [pc, #580]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c5e:	f023 020c 	bic.w	r2, r3, #12
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c66:	498e      	ldr	r1, [pc, #568]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0304 	and.w	r3, r3, #4
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d00a      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c7a:	4b89      	ldr	r3, [pc, #548]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c80:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c88:	4985      	ldr	r1, [pc, #532]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0308 	and.w	r3, r3, #8
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d00a      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c9c:	4b80      	ldr	r3, [pc, #512]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ca2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004caa:	497d      	ldr	r1, [pc, #500]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0310 	and.w	r3, r3, #16
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d00a      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004cbe:	4b78      	ldr	r3, [pc, #480]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cc4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ccc:	4974      	ldr	r1, [pc, #464]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0320 	and.w	r3, r3, #32
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d00a      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ce0:	4b6f      	ldr	r3, [pc, #444]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ce6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cee:	496c      	ldr	r1, [pc, #432]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d00a      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d02:	4b67      	ldr	r3, [pc, #412]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d08:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d10:	4963      	ldr	r1, [pc, #396]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d00a      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d24:	4b5e      	ldr	r3, [pc, #376]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d2a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d32:	495b      	ldr	r1, [pc, #364]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d34:	4313      	orrs	r3, r2
 8004d36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d00a      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d46:	4b56      	ldr	r3, [pc, #344]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d4c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d54:	4952      	ldr	r1, [pc, #328]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d56:	4313      	orrs	r3, r2
 8004d58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d00a      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d68:	4b4d      	ldr	r3, [pc, #308]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d6e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d76:	494a      	ldr	r1, [pc, #296]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00a      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d8a:	4b45      	ldr	r3, [pc, #276]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d90:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d98:	4941      	ldr	r1, [pc, #260]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d00a      	beq.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004dac:	4b3c      	ldr	r3, [pc, #240]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004db2:	f023 0203 	bic.w	r2, r3, #3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dba:	4939      	ldr	r1, [pc, #228]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d028      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004dce:	4b34      	ldr	r3, [pc, #208]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dd4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ddc:	4930      	ldr	r1, [pc, #192]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dde:	4313      	orrs	r3, r2
 8004de0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004de8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004dec:	d106      	bne.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004dee:	4b2c      	ldr	r3, [pc, #176]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	4a2b      	ldr	r2, [pc, #172]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004df4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004df8:	60d3      	str	r3, [r2, #12]
 8004dfa:	e011      	b.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e00:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004e04:	d10c      	bne.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	3304      	adds	r3, #4
 8004e0a:	2101      	movs	r1, #1
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f000 f8f9 	bl	8005004 <RCCEx_PLLSAI1_Config>
 8004e12:	4603      	mov	r3, r0
 8004e14:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004e16:	7cfb      	ldrb	r3, [r7, #19]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d001      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004e1c:	7cfb      	ldrb	r3, [r7, #19]
 8004e1e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d04d      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e30:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e34:	d108      	bne.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004e36:	4b1a      	ldr	r3, [pc, #104]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e38:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004e3c:	4a18      	ldr	r2, [pc, #96]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e3e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004e42:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004e46:	e012      	b.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004e48:	4b15      	ldr	r3, [pc, #84]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004e4e:	4a14      	ldr	r2, [pc, #80]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e50:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e54:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004e58:	4b11      	ldr	r3, [pc, #68]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e5e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e66:	490e      	ldr	r1, [pc, #56]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e72:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e76:	d106      	bne.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e78:	4b09      	ldr	r3, [pc, #36]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	4a08      	ldr	r2, [pc, #32]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e82:	60d3      	str	r3, [r2, #12]
 8004e84:	e020      	b.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e8a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e8e:	d109      	bne.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004e90:	4b03      	ldr	r3, [pc, #12]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	4a02      	ldr	r2, [pc, #8]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e9a:	60d3      	str	r3, [r2, #12]
 8004e9c:	e014      	b.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004e9e:	bf00      	nop
 8004ea0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ea8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004eac:	d10c      	bne.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	3304      	adds	r3, #4
 8004eb2:	2101      	movs	r1, #1
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f000 f8a5 	bl	8005004 <RCCEx_PLLSAI1_Config>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ebe:	7cfb      	ldrb	r3, [r7, #19]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d001      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004ec4:	7cfb      	ldrb	r3, [r7, #19]
 8004ec6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d028      	beq.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ed4:	4b4a      	ldr	r3, [pc, #296]	@ (8005000 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eda:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ee2:	4947      	ldr	r1, [pc, #284]	@ (8005000 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004eee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ef2:	d106      	bne.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ef4:	4b42      	ldr	r3, [pc, #264]	@ (8005000 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	4a41      	ldr	r2, [pc, #260]	@ (8005000 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004efa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004efe:	60d3      	str	r3, [r2, #12]
 8004f00:	e011      	b.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f06:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004f0a:	d10c      	bne.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	3304      	adds	r3, #4
 8004f10:	2101      	movs	r1, #1
 8004f12:	4618      	mov	r0, r3
 8004f14:	f000 f876 	bl	8005004 <RCCEx_PLLSAI1_Config>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f1c:	7cfb      	ldrb	r3, [r7, #19]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d001      	beq.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004f22:	7cfb      	ldrb	r3, [r7, #19]
 8004f24:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d01e      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f32:	4b33      	ldr	r3, [pc, #204]	@ (8005000 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f38:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f42:	492f      	ldr	r1, [pc, #188]	@ (8005000 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f44:	4313      	orrs	r3, r2
 8004f46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004f54:	d10c      	bne.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	3304      	adds	r3, #4
 8004f5a:	2102      	movs	r1, #2
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f000 f851 	bl	8005004 <RCCEx_PLLSAI1_Config>
 8004f62:	4603      	mov	r3, r0
 8004f64:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f66:	7cfb      	ldrb	r3, [r7, #19]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d001      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004f6c:	7cfb      	ldrb	r3, [r7, #19]
 8004f6e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d00b      	beq.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f7c:	4b20      	ldr	r3, [pc, #128]	@ (8005000 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004f82:	f023 0204 	bic.w	r2, r3, #4
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f8c:	491c      	ldr	r1, [pc, #112]	@ (8005000 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d00b      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004fa0:	4b17      	ldr	r3, [pc, #92]	@ (8005000 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fa2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004fa6:	f023 0218 	bic.w	r2, r3, #24
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fb0:	4913      	ldr	r1, [pc, #76]	@ (8005000 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d017      	beq.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004fc4:	4b0e      	ldr	r3, [pc, #56]	@ (8005000 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004fca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004fd4:	490a      	ldr	r1, [pc, #40]	@ (8005000 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004fe2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004fe6:	d105      	bne.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fe8:	4b05      	ldr	r3, [pc, #20]	@ (8005000 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	4a04      	ldr	r2, [pc, #16]	@ (8005000 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ff2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004ff4:	7cbb      	ldrb	r3, [r7, #18]
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3718      	adds	r7, #24
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	40021000 	.word	0x40021000

08005004 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800500e:	2300      	movs	r3, #0
 8005010:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005012:	4b72      	ldr	r3, [pc, #456]	@ (80051dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	f003 0303 	and.w	r3, r3, #3
 800501a:	2b00      	cmp	r3, #0
 800501c:	d00e      	beq.n	800503c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800501e:	4b6f      	ldr	r3, [pc, #444]	@ (80051dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	f003 0203 	and.w	r2, r3, #3
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	429a      	cmp	r2, r3
 800502c:	d103      	bne.n	8005036 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
       ||
 8005032:	2b00      	cmp	r3, #0
 8005034:	d142      	bne.n	80050bc <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	73fb      	strb	r3, [r7, #15]
 800503a:	e03f      	b.n	80050bc <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2b03      	cmp	r3, #3
 8005042:	d018      	beq.n	8005076 <RCCEx_PLLSAI1_Config+0x72>
 8005044:	2b03      	cmp	r3, #3
 8005046:	d825      	bhi.n	8005094 <RCCEx_PLLSAI1_Config+0x90>
 8005048:	2b01      	cmp	r3, #1
 800504a:	d002      	beq.n	8005052 <RCCEx_PLLSAI1_Config+0x4e>
 800504c:	2b02      	cmp	r3, #2
 800504e:	d009      	beq.n	8005064 <RCCEx_PLLSAI1_Config+0x60>
 8005050:	e020      	b.n	8005094 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005052:	4b62      	ldr	r3, [pc, #392]	@ (80051dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 0302 	and.w	r3, r3, #2
 800505a:	2b00      	cmp	r3, #0
 800505c:	d11d      	bne.n	800509a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005062:	e01a      	b.n	800509a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005064:	4b5d      	ldr	r3, [pc, #372]	@ (80051dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800506c:	2b00      	cmp	r3, #0
 800506e:	d116      	bne.n	800509e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005074:	e013      	b.n	800509e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005076:	4b59      	ldr	r3, [pc, #356]	@ (80051dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d10f      	bne.n	80050a2 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005082:	4b56      	ldr	r3, [pc, #344]	@ (80051dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d109      	bne.n	80050a2 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005092:	e006      	b.n	80050a2 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	73fb      	strb	r3, [r7, #15]
      break;
 8005098:	e004      	b.n	80050a4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800509a:	bf00      	nop
 800509c:	e002      	b.n	80050a4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800509e:	bf00      	nop
 80050a0:	e000      	b.n	80050a4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80050a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80050a4:	7bfb      	ldrb	r3, [r7, #15]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d108      	bne.n	80050bc <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80050aa:	4b4c      	ldr	r3, [pc, #304]	@ (80051dc <RCCEx_PLLSAI1_Config+0x1d8>)
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	f023 0203 	bic.w	r2, r3, #3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4949      	ldr	r1, [pc, #292]	@ (80051dc <RCCEx_PLLSAI1_Config+0x1d8>)
 80050b8:	4313      	orrs	r3, r2
 80050ba:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80050bc:	7bfb      	ldrb	r3, [r7, #15]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	f040 8086 	bne.w	80051d0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80050c4:	4b45      	ldr	r3, [pc, #276]	@ (80051dc <RCCEx_PLLSAI1_Config+0x1d8>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a44      	ldr	r2, [pc, #272]	@ (80051dc <RCCEx_PLLSAI1_Config+0x1d8>)
 80050ca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80050ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050d0:	f7fd faa6 	bl	8002620 <HAL_GetTick>
 80050d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80050d6:	e009      	b.n	80050ec <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80050d8:	f7fd faa2 	bl	8002620 <HAL_GetTick>
 80050dc:	4602      	mov	r2, r0
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	2b02      	cmp	r3, #2
 80050e4:	d902      	bls.n	80050ec <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	73fb      	strb	r3, [r7, #15]
        break;
 80050ea:	e005      	b.n	80050f8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80050ec:	4b3b      	ldr	r3, [pc, #236]	@ (80051dc <RCCEx_PLLSAI1_Config+0x1d8>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d1ef      	bne.n	80050d8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80050f8:	7bfb      	ldrb	r3, [r7, #15]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d168      	bne.n	80051d0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d113      	bne.n	800512c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005104:	4b35      	ldr	r3, [pc, #212]	@ (80051dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005106:	691a      	ldr	r2, [r3, #16]
 8005108:	4b35      	ldr	r3, [pc, #212]	@ (80051e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800510a:	4013      	ands	r3, r2
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	6892      	ldr	r2, [r2, #8]
 8005110:	0211      	lsls	r1, r2, #8
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	68d2      	ldr	r2, [r2, #12]
 8005116:	06d2      	lsls	r2, r2, #27
 8005118:	4311      	orrs	r1, r2
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	6852      	ldr	r2, [r2, #4]
 800511e:	3a01      	subs	r2, #1
 8005120:	0112      	lsls	r2, r2, #4
 8005122:	430a      	orrs	r2, r1
 8005124:	492d      	ldr	r1, [pc, #180]	@ (80051dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005126:	4313      	orrs	r3, r2
 8005128:	610b      	str	r3, [r1, #16]
 800512a:	e02d      	b.n	8005188 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	2b01      	cmp	r3, #1
 8005130:	d115      	bne.n	800515e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005132:	4b2a      	ldr	r3, [pc, #168]	@ (80051dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005134:	691a      	ldr	r2, [r3, #16]
 8005136:	4b2b      	ldr	r3, [pc, #172]	@ (80051e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005138:	4013      	ands	r3, r2
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	6892      	ldr	r2, [r2, #8]
 800513e:	0211      	lsls	r1, r2, #8
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	6912      	ldr	r2, [r2, #16]
 8005144:	0852      	lsrs	r2, r2, #1
 8005146:	3a01      	subs	r2, #1
 8005148:	0552      	lsls	r2, r2, #21
 800514a:	4311      	orrs	r1, r2
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	6852      	ldr	r2, [r2, #4]
 8005150:	3a01      	subs	r2, #1
 8005152:	0112      	lsls	r2, r2, #4
 8005154:	430a      	orrs	r2, r1
 8005156:	4921      	ldr	r1, [pc, #132]	@ (80051dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005158:	4313      	orrs	r3, r2
 800515a:	610b      	str	r3, [r1, #16]
 800515c:	e014      	b.n	8005188 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800515e:	4b1f      	ldr	r3, [pc, #124]	@ (80051dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005160:	691a      	ldr	r2, [r3, #16]
 8005162:	4b21      	ldr	r3, [pc, #132]	@ (80051e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005164:	4013      	ands	r3, r2
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	6892      	ldr	r2, [r2, #8]
 800516a:	0211      	lsls	r1, r2, #8
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	6952      	ldr	r2, [r2, #20]
 8005170:	0852      	lsrs	r2, r2, #1
 8005172:	3a01      	subs	r2, #1
 8005174:	0652      	lsls	r2, r2, #25
 8005176:	4311      	orrs	r1, r2
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	6852      	ldr	r2, [r2, #4]
 800517c:	3a01      	subs	r2, #1
 800517e:	0112      	lsls	r2, r2, #4
 8005180:	430a      	orrs	r2, r1
 8005182:	4916      	ldr	r1, [pc, #88]	@ (80051dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005184:	4313      	orrs	r3, r2
 8005186:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005188:	4b14      	ldr	r3, [pc, #80]	@ (80051dc <RCCEx_PLLSAI1_Config+0x1d8>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a13      	ldr	r2, [pc, #76]	@ (80051dc <RCCEx_PLLSAI1_Config+0x1d8>)
 800518e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005192:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005194:	f7fd fa44 	bl	8002620 <HAL_GetTick>
 8005198:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800519a:	e009      	b.n	80051b0 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800519c:	f7fd fa40 	bl	8002620 <HAL_GetTick>
 80051a0:	4602      	mov	r2, r0
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d902      	bls.n	80051b0 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80051aa:	2303      	movs	r3, #3
 80051ac:	73fb      	strb	r3, [r7, #15]
          break;
 80051ae:	e005      	b.n	80051bc <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80051b0:	4b0a      	ldr	r3, [pc, #40]	@ (80051dc <RCCEx_PLLSAI1_Config+0x1d8>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d0ef      	beq.n	800519c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80051bc:	7bfb      	ldrb	r3, [r7, #15]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d106      	bne.n	80051d0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80051c2:	4b06      	ldr	r3, [pc, #24]	@ (80051dc <RCCEx_PLLSAI1_Config+0x1d8>)
 80051c4:	691a      	ldr	r2, [r3, #16]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	699b      	ldr	r3, [r3, #24]
 80051ca:	4904      	ldr	r1, [pc, #16]	@ (80051dc <RCCEx_PLLSAI1_Config+0x1d8>)
 80051cc:	4313      	orrs	r3, r2
 80051ce:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80051d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3710      	adds	r7, #16
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	bf00      	nop
 80051dc:	40021000 	.word	0x40021000
 80051e0:	07ff800f 	.word	0x07ff800f
 80051e4:	ff9f800f 	.word	0xff9f800f
 80051e8:	f9ff800f 	.word	0xf9ff800f

080051ec <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80051f6:	2300      	movs	r3, #0
 80051f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80051fa:	4b72      	ldr	r3, [pc, #456]	@ (80053c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	f003 0303 	and.w	r3, r3, #3
 8005202:	2b00      	cmp	r3, #0
 8005204:	d00e      	beq.n	8005224 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005206:	4b6f      	ldr	r3, [pc, #444]	@ (80053c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	f003 0203 	and.w	r2, r3, #3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	429a      	cmp	r2, r3
 8005214:	d103      	bne.n	800521e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
       ||
 800521a:	2b00      	cmp	r3, #0
 800521c:	d142      	bne.n	80052a4 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	73fb      	strb	r3, [r7, #15]
 8005222:	e03f      	b.n	80052a4 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2b03      	cmp	r3, #3
 800522a:	d018      	beq.n	800525e <RCCEx_PLLSAI2_Config+0x72>
 800522c:	2b03      	cmp	r3, #3
 800522e:	d825      	bhi.n	800527c <RCCEx_PLLSAI2_Config+0x90>
 8005230:	2b01      	cmp	r3, #1
 8005232:	d002      	beq.n	800523a <RCCEx_PLLSAI2_Config+0x4e>
 8005234:	2b02      	cmp	r3, #2
 8005236:	d009      	beq.n	800524c <RCCEx_PLLSAI2_Config+0x60>
 8005238:	e020      	b.n	800527c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800523a:	4b62      	ldr	r3, [pc, #392]	@ (80053c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 0302 	and.w	r3, r3, #2
 8005242:	2b00      	cmp	r3, #0
 8005244:	d11d      	bne.n	8005282 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800524a:	e01a      	b.n	8005282 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800524c:	4b5d      	ldr	r3, [pc, #372]	@ (80053c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005254:	2b00      	cmp	r3, #0
 8005256:	d116      	bne.n	8005286 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800525c:	e013      	b.n	8005286 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800525e:	4b59      	ldr	r3, [pc, #356]	@ (80053c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005266:	2b00      	cmp	r3, #0
 8005268:	d10f      	bne.n	800528a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800526a:	4b56      	ldr	r3, [pc, #344]	@ (80053c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005272:	2b00      	cmp	r3, #0
 8005274:	d109      	bne.n	800528a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800527a:	e006      	b.n	800528a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	73fb      	strb	r3, [r7, #15]
      break;
 8005280:	e004      	b.n	800528c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005282:	bf00      	nop
 8005284:	e002      	b.n	800528c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005286:	bf00      	nop
 8005288:	e000      	b.n	800528c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800528a:	bf00      	nop
    }

    if(status == HAL_OK)
 800528c:	7bfb      	ldrb	r3, [r7, #15]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d108      	bne.n	80052a4 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8005292:	4b4c      	ldr	r3, [pc, #304]	@ (80053c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	f023 0203 	bic.w	r2, r3, #3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4949      	ldr	r1, [pc, #292]	@ (80053c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80052a0:	4313      	orrs	r3, r2
 80052a2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80052a4:	7bfb      	ldrb	r3, [r7, #15]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	f040 8086 	bne.w	80053b8 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80052ac:	4b45      	ldr	r3, [pc, #276]	@ (80053c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a44      	ldr	r2, [pc, #272]	@ (80053c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80052b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052b8:	f7fd f9b2 	bl	8002620 <HAL_GetTick>
 80052bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80052be:	e009      	b.n	80052d4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80052c0:	f7fd f9ae 	bl	8002620 <HAL_GetTick>
 80052c4:	4602      	mov	r2, r0
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	2b02      	cmp	r3, #2
 80052cc:	d902      	bls.n	80052d4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	73fb      	strb	r3, [r7, #15]
        break;
 80052d2:	e005      	b.n	80052e0 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80052d4:	4b3b      	ldr	r3, [pc, #236]	@ (80053c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d1ef      	bne.n	80052c0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80052e0:	7bfb      	ldrb	r3, [r7, #15]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d168      	bne.n	80053b8 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d113      	bne.n	8005314 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80052ec:	4b35      	ldr	r3, [pc, #212]	@ (80053c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80052ee:	695a      	ldr	r2, [r3, #20]
 80052f0:	4b35      	ldr	r3, [pc, #212]	@ (80053c8 <RCCEx_PLLSAI2_Config+0x1dc>)
 80052f2:	4013      	ands	r3, r2
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	6892      	ldr	r2, [r2, #8]
 80052f8:	0211      	lsls	r1, r2, #8
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	68d2      	ldr	r2, [r2, #12]
 80052fe:	06d2      	lsls	r2, r2, #27
 8005300:	4311      	orrs	r1, r2
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	6852      	ldr	r2, [r2, #4]
 8005306:	3a01      	subs	r2, #1
 8005308:	0112      	lsls	r2, r2, #4
 800530a:	430a      	orrs	r2, r1
 800530c:	492d      	ldr	r1, [pc, #180]	@ (80053c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800530e:	4313      	orrs	r3, r2
 8005310:	614b      	str	r3, [r1, #20]
 8005312:	e02d      	b.n	8005370 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	2b01      	cmp	r3, #1
 8005318:	d115      	bne.n	8005346 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800531a:	4b2a      	ldr	r3, [pc, #168]	@ (80053c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800531c:	695a      	ldr	r2, [r3, #20]
 800531e:	4b2b      	ldr	r3, [pc, #172]	@ (80053cc <RCCEx_PLLSAI2_Config+0x1e0>)
 8005320:	4013      	ands	r3, r2
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	6892      	ldr	r2, [r2, #8]
 8005326:	0211      	lsls	r1, r2, #8
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	6912      	ldr	r2, [r2, #16]
 800532c:	0852      	lsrs	r2, r2, #1
 800532e:	3a01      	subs	r2, #1
 8005330:	0552      	lsls	r2, r2, #21
 8005332:	4311      	orrs	r1, r2
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	6852      	ldr	r2, [r2, #4]
 8005338:	3a01      	subs	r2, #1
 800533a:	0112      	lsls	r2, r2, #4
 800533c:	430a      	orrs	r2, r1
 800533e:	4921      	ldr	r1, [pc, #132]	@ (80053c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005340:	4313      	orrs	r3, r2
 8005342:	614b      	str	r3, [r1, #20]
 8005344:	e014      	b.n	8005370 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005346:	4b1f      	ldr	r3, [pc, #124]	@ (80053c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005348:	695a      	ldr	r2, [r3, #20]
 800534a:	4b21      	ldr	r3, [pc, #132]	@ (80053d0 <RCCEx_PLLSAI2_Config+0x1e4>)
 800534c:	4013      	ands	r3, r2
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	6892      	ldr	r2, [r2, #8]
 8005352:	0211      	lsls	r1, r2, #8
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	6952      	ldr	r2, [r2, #20]
 8005358:	0852      	lsrs	r2, r2, #1
 800535a:	3a01      	subs	r2, #1
 800535c:	0652      	lsls	r2, r2, #25
 800535e:	4311      	orrs	r1, r2
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	6852      	ldr	r2, [r2, #4]
 8005364:	3a01      	subs	r2, #1
 8005366:	0112      	lsls	r2, r2, #4
 8005368:	430a      	orrs	r2, r1
 800536a:	4916      	ldr	r1, [pc, #88]	@ (80053c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800536c:	4313      	orrs	r3, r2
 800536e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005370:	4b14      	ldr	r3, [pc, #80]	@ (80053c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a13      	ldr	r2, [pc, #76]	@ (80053c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005376:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800537a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800537c:	f7fd f950 	bl	8002620 <HAL_GetTick>
 8005380:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005382:	e009      	b.n	8005398 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005384:	f7fd f94c 	bl	8002620 <HAL_GetTick>
 8005388:	4602      	mov	r2, r0
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	2b02      	cmp	r3, #2
 8005390:	d902      	bls.n	8005398 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	73fb      	strb	r3, [r7, #15]
          break;
 8005396:	e005      	b.n	80053a4 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005398:	4b0a      	ldr	r3, [pc, #40]	@ (80053c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d0ef      	beq.n	8005384 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80053a4:	7bfb      	ldrb	r3, [r7, #15]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d106      	bne.n	80053b8 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80053aa:	4b06      	ldr	r3, [pc, #24]	@ (80053c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80053ac:	695a      	ldr	r2, [r3, #20]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	699b      	ldr	r3, [r3, #24]
 80053b2:	4904      	ldr	r1, [pc, #16]	@ (80053c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80053b4:	4313      	orrs	r3, r2
 80053b6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80053b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3710      	adds	r7, #16
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	40021000 	.word	0x40021000
 80053c8:	07ff800f 	.word	0x07ff800f
 80053cc:	ff9f800f 	.word	0xff9f800f
 80053d0:	f9ff800f 	.word	0xf9ff800f

080053d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d101      	bne.n	80053e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e049      	b.n	800547a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d106      	bne.n	8005400 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f000 f841 	bl	8005482 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2202      	movs	r2, #2
 8005404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	3304      	adds	r3, #4
 8005410:	4619      	mov	r1, r3
 8005412:	4610      	mov	r0, r2
 8005414:	f000 f9e0 	bl	80057d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3708      	adds	r7, #8
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}

08005482 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005482:	b480      	push	{r7}
 8005484:	b083      	sub	sp, #12
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800548a:	bf00      	nop
 800548c:	370c      	adds	r7, #12
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr
	...

08005498 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005498:	b480      	push	{r7}
 800549a:	b085      	sub	sp, #20
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d001      	beq.n	80054b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e04f      	b.n	8005550 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2202      	movs	r2, #2
 80054b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68da      	ldr	r2, [r3, #12]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f042 0201 	orr.w	r2, r2, #1
 80054c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a23      	ldr	r2, [pc, #140]	@ (800555c <HAL_TIM_Base_Start_IT+0xc4>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d01d      	beq.n	800550e <HAL_TIM_Base_Start_IT+0x76>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054da:	d018      	beq.n	800550e <HAL_TIM_Base_Start_IT+0x76>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a1f      	ldr	r2, [pc, #124]	@ (8005560 <HAL_TIM_Base_Start_IT+0xc8>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d013      	beq.n	800550e <HAL_TIM_Base_Start_IT+0x76>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a1e      	ldr	r2, [pc, #120]	@ (8005564 <HAL_TIM_Base_Start_IT+0xcc>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d00e      	beq.n	800550e <HAL_TIM_Base_Start_IT+0x76>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a1c      	ldr	r2, [pc, #112]	@ (8005568 <HAL_TIM_Base_Start_IT+0xd0>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d009      	beq.n	800550e <HAL_TIM_Base_Start_IT+0x76>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a1b      	ldr	r2, [pc, #108]	@ (800556c <HAL_TIM_Base_Start_IT+0xd4>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d004      	beq.n	800550e <HAL_TIM_Base_Start_IT+0x76>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a19      	ldr	r2, [pc, #100]	@ (8005570 <HAL_TIM_Base_Start_IT+0xd8>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d115      	bne.n	800553a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	689a      	ldr	r2, [r3, #8]
 8005514:	4b17      	ldr	r3, [pc, #92]	@ (8005574 <HAL_TIM_Base_Start_IT+0xdc>)
 8005516:	4013      	ands	r3, r2
 8005518:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2b06      	cmp	r3, #6
 800551e:	d015      	beq.n	800554c <HAL_TIM_Base_Start_IT+0xb4>
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005526:	d011      	beq.n	800554c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f042 0201 	orr.w	r2, r2, #1
 8005536:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005538:	e008      	b.n	800554c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f042 0201 	orr.w	r2, r2, #1
 8005548:	601a      	str	r2, [r3, #0]
 800554a:	e000      	b.n	800554e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800554c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800554e:	2300      	movs	r3, #0
}
 8005550:	4618      	mov	r0, r3
 8005552:	3714      	adds	r7, #20
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr
 800555c:	40012c00 	.word	0x40012c00
 8005560:	40000400 	.word	0x40000400
 8005564:	40000800 	.word	0x40000800
 8005568:	40000c00 	.word	0x40000c00
 800556c:	40013400 	.word	0x40013400
 8005570:	40014000 	.word	0x40014000
 8005574:	00010007 	.word	0x00010007

08005578 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	f003 0302 	and.w	r3, r3, #2
 8005596:	2b00      	cmp	r3, #0
 8005598:	d020      	beq.n	80055dc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f003 0302 	and.w	r3, r3, #2
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d01b      	beq.n	80055dc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f06f 0202 	mvn.w	r2, #2
 80055ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2201      	movs	r2, #1
 80055b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	699b      	ldr	r3, [r3, #24]
 80055ba:	f003 0303 	and.w	r3, r3, #3
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d003      	beq.n	80055ca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 f8e9 	bl	800579a <HAL_TIM_IC_CaptureCallback>
 80055c8:	e005      	b.n	80055d6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 f8db 	bl	8005786 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f000 f8ec 	bl	80057ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	f003 0304 	and.w	r3, r3, #4
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d020      	beq.n	8005628 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f003 0304 	and.w	r3, r3, #4
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d01b      	beq.n	8005628 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f06f 0204 	mvn.w	r2, #4
 80055f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2202      	movs	r2, #2
 80055fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	699b      	ldr	r3, [r3, #24]
 8005606:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800560a:	2b00      	cmp	r3, #0
 800560c:	d003      	beq.n	8005616 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 f8c3 	bl	800579a <HAL_TIM_IC_CaptureCallback>
 8005614:	e005      	b.n	8005622 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 f8b5 	bl	8005786 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f000 f8c6 	bl	80057ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	f003 0308 	and.w	r3, r3, #8
 800562e:	2b00      	cmp	r3, #0
 8005630:	d020      	beq.n	8005674 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f003 0308 	and.w	r3, r3, #8
 8005638:	2b00      	cmp	r3, #0
 800563a:	d01b      	beq.n	8005674 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f06f 0208 	mvn.w	r2, #8
 8005644:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2204      	movs	r2, #4
 800564a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	69db      	ldr	r3, [r3, #28]
 8005652:	f003 0303 	and.w	r3, r3, #3
 8005656:	2b00      	cmp	r3, #0
 8005658:	d003      	beq.n	8005662 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f000 f89d 	bl	800579a <HAL_TIM_IC_CaptureCallback>
 8005660:	e005      	b.n	800566e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 f88f 	bl	8005786 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f000 f8a0 	bl	80057ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	f003 0310 	and.w	r3, r3, #16
 800567a:	2b00      	cmp	r3, #0
 800567c:	d020      	beq.n	80056c0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f003 0310 	and.w	r3, r3, #16
 8005684:	2b00      	cmp	r3, #0
 8005686:	d01b      	beq.n	80056c0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f06f 0210 	mvn.w	r2, #16
 8005690:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2208      	movs	r2, #8
 8005696:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	69db      	ldr	r3, [r3, #28]
 800569e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d003      	beq.n	80056ae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 f877 	bl	800579a <HAL_TIM_IC_CaptureCallback>
 80056ac:	e005      	b.n	80056ba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f000 f869 	bl	8005786 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f000 f87a 	bl	80057ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	f003 0301 	and.w	r3, r3, #1
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d00c      	beq.n	80056e4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f003 0301 	and.w	r3, r3, #1
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d007      	beq.n	80056e4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f06f 0201 	mvn.w	r2, #1
 80056dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f7fb fec0 	bl	8001464 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d104      	bne.n	80056f8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d00c      	beq.n	8005712 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d007      	beq.n	8005712 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800570a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f000 f913 	bl	8005938 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005718:	2b00      	cmp	r3, #0
 800571a:	d00c      	beq.n	8005736 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005722:	2b00      	cmp	r3, #0
 8005724:	d007      	beq.n	8005736 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800572e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f000 f90b 	bl	800594c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800573c:	2b00      	cmp	r3, #0
 800573e:	d00c      	beq.n	800575a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005746:	2b00      	cmp	r3, #0
 8005748:	d007      	beq.n	800575a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005752:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f000 f834 	bl	80057c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	f003 0320 	and.w	r3, r3, #32
 8005760:	2b00      	cmp	r3, #0
 8005762:	d00c      	beq.n	800577e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f003 0320 	and.w	r3, r3, #32
 800576a:	2b00      	cmp	r3, #0
 800576c:	d007      	beq.n	800577e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f06f 0220 	mvn.w	r2, #32
 8005776:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f000 f8d3 	bl	8005924 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800577e:	bf00      	nop
 8005780:	3710      	adds	r7, #16
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}

08005786 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005786:	b480      	push	{r7}
 8005788:	b083      	sub	sp, #12
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800578e:	bf00      	nop
 8005790:	370c      	adds	r7, #12
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr

0800579a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800579a:	b480      	push	{r7}
 800579c:	b083      	sub	sp, #12
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057a2:	bf00      	nop
 80057a4:	370c      	adds	r7, #12
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr

080057ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057ae:	b480      	push	{r7}
 80057b0:	b083      	sub	sp, #12
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057b6:	bf00      	nop
 80057b8:	370c      	adds	r7, #12
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr

080057c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057c2:	b480      	push	{r7}
 80057c4:	b083      	sub	sp, #12
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057ca:	bf00      	nop
 80057cc:	370c      	adds	r7, #12
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr
	...

080057d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80057d8:	b480      	push	{r7}
 80057da:	b085      	sub	sp, #20
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4a46      	ldr	r2, [pc, #280]	@ (8005904 <TIM_Base_SetConfig+0x12c>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d013      	beq.n	8005818 <TIM_Base_SetConfig+0x40>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057f6:	d00f      	beq.n	8005818 <TIM_Base_SetConfig+0x40>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	4a43      	ldr	r2, [pc, #268]	@ (8005908 <TIM_Base_SetConfig+0x130>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d00b      	beq.n	8005818 <TIM_Base_SetConfig+0x40>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	4a42      	ldr	r2, [pc, #264]	@ (800590c <TIM_Base_SetConfig+0x134>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d007      	beq.n	8005818 <TIM_Base_SetConfig+0x40>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4a41      	ldr	r2, [pc, #260]	@ (8005910 <TIM_Base_SetConfig+0x138>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d003      	beq.n	8005818 <TIM_Base_SetConfig+0x40>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4a40      	ldr	r2, [pc, #256]	@ (8005914 <TIM_Base_SetConfig+0x13c>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d108      	bne.n	800582a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800581e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	68fa      	ldr	r2, [r7, #12]
 8005826:	4313      	orrs	r3, r2
 8005828:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a35      	ldr	r2, [pc, #212]	@ (8005904 <TIM_Base_SetConfig+0x12c>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d01f      	beq.n	8005872 <TIM_Base_SetConfig+0x9a>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005838:	d01b      	beq.n	8005872 <TIM_Base_SetConfig+0x9a>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a32      	ldr	r2, [pc, #200]	@ (8005908 <TIM_Base_SetConfig+0x130>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d017      	beq.n	8005872 <TIM_Base_SetConfig+0x9a>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a31      	ldr	r2, [pc, #196]	@ (800590c <TIM_Base_SetConfig+0x134>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d013      	beq.n	8005872 <TIM_Base_SetConfig+0x9a>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a30      	ldr	r2, [pc, #192]	@ (8005910 <TIM_Base_SetConfig+0x138>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d00f      	beq.n	8005872 <TIM_Base_SetConfig+0x9a>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4a2f      	ldr	r2, [pc, #188]	@ (8005914 <TIM_Base_SetConfig+0x13c>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d00b      	beq.n	8005872 <TIM_Base_SetConfig+0x9a>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a2e      	ldr	r2, [pc, #184]	@ (8005918 <TIM_Base_SetConfig+0x140>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d007      	beq.n	8005872 <TIM_Base_SetConfig+0x9a>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4a2d      	ldr	r2, [pc, #180]	@ (800591c <TIM_Base_SetConfig+0x144>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d003      	beq.n	8005872 <TIM_Base_SetConfig+0x9a>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a2c      	ldr	r2, [pc, #176]	@ (8005920 <TIM_Base_SetConfig+0x148>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d108      	bne.n	8005884 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005878:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	68db      	ldr	r3, [r3, #12]
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	4313      	orrs	r3, r2
 8005882:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	695b      	ldr	r3, [r3, #20]
 800588e:	4313      	orrs	r3, r2
 8005890:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	68fa      	ldr	r2, [r7, #12]
 8005896:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	689a      	ldr	r2, [r3, #8]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	4a16      	ldr	r2, [pc, #88]	@ (8005904 <TIM_Base_SetConfig+0x12c>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d00f      	beq.n	80058d0 <TIM_Base_SetConfig+0xf8>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4a18      	ldr	r2, [pc, #96]	@ (8005914 <TIM_Base_SetConfig+0x13c>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d00b      	beq.n	80058d0 <TIM_Base_SetConfig+0xf8>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4a17      	ldr	r2, [pc, #92]	@ (8005918 <TIM_Base_SetConfig+0x140>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d007      	beq.n	80058d0 <TIM_Base_SetConfig+0xf8>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a16      	ldr	r2, [pc, #88]	@ (800591c <TIM_Base_SetConfig+0x144>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d003      	beq.n	80058d0 <TIM_Base_SetConfig+0xf8>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a15      	ldr	r2, [pc, #84]	@ (8005920 <TIM_Base_SetConfig+0x148>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d103      	bne.n	80058d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	691a      	ldr	r2, [r3, #16]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	f003 0301 	and.w	r3, r3, #1
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d105      	bne.n	80058f6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	f023 0201 	bic.w	r2, r3, #1
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	611a      	str	r2, [r3, #16]
  }
}
 80058f6:	bf00      	nop
 80058f8:	3714      	adds	r7, #20
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr
 8005902:	bf00      	nop
 8005904:	40012c00 	.word	0x40012c00
 8005908:	40000400 	.word	0x40000400
 800590c:	40000800 	.word	0x40000800
 8005910:	40000c00 	.word	0x40000c00
 8005914:	40013400 	.word	0x40013400
 8005918:	40014000 	.word	0x40014000
 800591c:	40014400 	.word	0x40014400
 8005920:	40014800 	.word	0x40014800

08005924 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005924:	b480      	push	{r7}
 8005926:	b083      	sub	sp, #12
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800592c:	bf00      	nop
 800592e:	370c      	adds	r7, #12
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005938:	b480      	push	{r7}
 800593a:	b083      	sub	sp, #12
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005940:	bf00      	nop
 8005942:	370c      	adds	r7, #12
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr

0800594c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800594c:	b480      	push	{r7}
 800594e:	b083      	sub	sp, #12
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005954:	bf00      	nop
 8005956:	370c      	adds	r7, #12
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b082      	sub	sp, #8
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d101      	bne.n	8005972 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	e042      	b.n	80059f8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005978:	2b00      	cmp	r3, #0
 800597a:	d106      	bne.n	800598a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f7fc f875 	bl	8001a74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2224      	movs	r2, #36	@ 0x24
 800598e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f022 0201 	bic.w	r2, r2, #1
 80059a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d002      	beq.n	80059b0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 fbb2 	bl	8006114 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f000 f8b3 	bl	8005b1c <UART_SetConfig>
 80059b6:	4603      	mov	r3, r0
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d101      	bne.n	80059c0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	e01b      	b.n	80059f8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	685a      	ldr	r2, [r3, #4]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80059ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	689a      	ldr	r2, [r3, #8]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80059de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f042 0201 	orr.w	r2, r2, #1
 80059ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 fc31 	bl	8006258 <UART_CheckIdleState>
 80059f6:	4603      	mov	r3, r0
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3708      	adds	r7, #8
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b08a      	sub	sp, #40	@ 0x28
 8005a04:	af02      	add	r7, sp, #8
 8005a06:	60f8      	str	r0, [r7, #12]
 8005a08:	60b9      	str	r1, [r7, #8]
 8005a0a:	603b      	str	r3, [r7, #0]
 8005a0c:	4613      	mov	r3, r2
 8005a0e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a16:	2b20      	cmp	r3, #32
 8005a18:	d17b      	bne.n	8005b12 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d002      	beq.n	8005a26 <HAL_UART_Transmit+0x26>
 8005a20:	88fb      	ldrh	r3, [r7, #6]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d101      	bne.n	8005a2a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e074      	b.n	8005b14 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2221      	movs	r2, #33	@ 0x21
 8005a36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a3a:	f7fc fdf1 	bl	8002620 <HAL_GetTick>
 8005a3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	88fa      	ldrh	r2, [r7, #6]
 8005a44:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	88fa      	ldrh	r2, [r7, #6]
 8005a4c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a58:	d108      	bne.n	8005a6c <HAL_UART_Transmit+0x6c>
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	691b      	ldr	r3, [r3, #16]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d104      	bne.n	8005a6c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005a62:	2300      	movs	r3, #0
 8005a64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	61bb      	str	r3, [r7, #24]
 8005a6a:	e003      	b.n	8005a74 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a70:	2300      	movs	r3, #0
 8005a72:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005a74:	e030      	b.n	8005ad8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	9300      	str	r3, [sp, #0]
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	2180      	movs	r1, #128	@ 0x80
 8005a80:	68f8      	ldr	r0, [r7, #12]
 8005a82:	f000 fc93 	bl	80063ac <UART_WaitOnFlagUntilTimeout>
 8005a86:	4603      	mov	r3, r0
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d005      	beq.n	8005a98 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2220      	movs	r2, #32
 8005a90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005a94:	2303      	movs	r3, #3
 8005a96:	e03d      	b.n	8005b14 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d10b      	bne.n	8005ab6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a9e:	69bb      	ldr	r3, [r7, #24]
 8005aa0:	881a      	ldrh	r2, [r3, #0]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005aaa:	b292      	uxth	r2, r2
 8005aac:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005aae:	69bb      	ldr	r3, [r7, #24]
 8005ab0:	3302      	adds	r3, #2
 8005ab2:	61bb      	str	r3, [r7, #24]
 8005ab4:	e007      	b.n	8005ac6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	781a      	ldrb	r2, [r3, #0]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005ac0:	69fb      	ldr	r3, [r7, #28]
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	3b01      	subs	r3, #1
 8005ad0:	b29a      	uxth	r2, r3
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d1c8      	bne.n	8005a76 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	9300      	str	r3, [sp, #0]
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	2200      	movs	r2, #0
 8005aec:	2140      	movs	r1, #64	@ 0x40
 8005aee:	68f8      	ldr	r0, [r7, #12]
 8005af0:	f000 fc5c 	bl	80063ac <UART_WaitOnFlagUntilTimeout>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d005      	beq.n	8005b06 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2220      	movs	r2, #32
 8005afe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005b02:	2303      	movs	r3, #3
 8005b04:	e006      	b.n	8005b14 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2220      	movs	r2, #32
 8005b0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	e000      	b.n	8005b14 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005b12:	2302      	movs	r3, #2
  }
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3720      	adds	r7, #32
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b20:	b08c      	sub	sp, #48	@ 0x30
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b26:	2300      	movs	r3, #0
 8005b28:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	689a      	ldr	r2, [r3, #8]
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	691b      	ldr	r3, [r3, #16]
 8005b34:	431a      	orrs	r2, r3
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	695b      	ldr	r3, [r3, #20]
 8005b3a:	431a      	orrs	r2, r3
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	69db      	ldr	r3, [r3, #28]
 8005b40:	4313      	orrs	r3, r2
 8005b42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	4baa      	ldr	r3, [pc, #680]	@ (8005df4 <UART_SetConfig+0x2d8>)
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	697a      	ldr	r2, [r7, #20]
 8005b50:	6812      	ldr	r2, [r2, #0]
 8005b52:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b54:	430b      	orrs	r3, r1
 8005b56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	68da      	ldr	r2, [r3, #12]
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	430a      	orrs	r2, r1
 8005b6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	699b      	ldr	r3, [r3, #24]
 8005b72:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a9f      	ldr	r2, [pc, #636]	@ (8005df8 <UART_SetConfig+0x2dc>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d004      	beq.n	8005b88 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	6a1b      	ldr	r3, [r3, #32]
 8005b82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b84:	4313      	orrs	r3, r2
 8005b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005b92:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005b96:	697a      	ldr	r2, [r7, #20]
 8005b98:	6812      	ldr	r2, [r2, #0]
 8005b9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b9c:	430b      	orrs	r3, r1
 8005b9e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ba6:	f023 010f 	bic.w	r1, r3, #15
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	430a      	orrs	r2, r1
 8005bb4:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a90      	ldr	r2, [pc, #576]	@ (8005dfc <UART_SetConfig+0x2e0>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d125      	bne.n	8005c0c <UART_SetConfig+0xf0>
 8005bc0:	4b8f      	ldr	r3, [pc, #572]	@ (8005e00 <UART_SetConfig+0x2e4>)
 8005bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bc6:	f003 0303 	and.w	r3, r3, #3
 8005bca:	2b03      	cmp	r3, #3
 8005bcc:	d81a      	bhi.n	8005c04 <UART_SetConfig+0xe8>
 8005bce:	a201      	add	r2, pc, #4	@ (adr r2, 8005bd4 <UART_SetConfig+0xb8>)
 8005bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd4:	08005be5 	.word	0x08005be5
 8005bd8:	08005bf5 	.word	0x08005bf5
 8005bdc:	08005bed 	.word	0x08005bed
 8005be0:	08005bfd 	.word	0x08005bfd
 8005be4:	2301      	movs	r3, #1
 8005be6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bea:	e116      	b.n	8005e1a <UART_SetConfig+0x2fe>
 8005bec:	2302      	movs	r3, #2
 8005bee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bf2:	e112      	b.n	8005e1a <UART_SetConfig+0x2fe>
 8005bf4:	2304      	movs	r3, #4
 8005bf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bfa:	e10e      	b.n	8005e1a <UART_SetConfig+0x2fe>
 8005bfc:	2308      	movs	r3, #8
 8005bfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c02:	e10a      	b.n	8005e1a <UART_SetConfig+0x2fe>
 8005c04:	2310      	movs	r3, #16
 8005c06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c0a:	e106      	b.n	8005e1a <UART_SetConfig+0x2fe>
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a7c      	ldr	r2, [pc, #496]	@ (8005e04 <UART_SetConfig+0x2e8>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d138      	bne.n	8005c88 <UART_SetConfig+0x16c>
 8005c16:	4b7a      	ldr	r3, [pc, #488]	@ (8005e00 <UART_SetConfig+0x2e4>)
 8005c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c1c:	f003 030c 	and.w	r3, r3, #12
 8005c20:	2b0c      	cmp	r3, #12
 8005c22:	d82d      	bhi.n	8005c80 <UART_SetConfig+0x164>
 8005c24:	a201      	add	r2, pc, #4	@ (adr r2, 8005c2c <UART_SetConfig+0x110>)
 8005c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c2a:	bf00      	nop
 8005c2c:	08005c61 	.word	0x08005c61
 8005c30:	08005c81 	.word	0x08005c81
 8005c34:	08005c81 	.word	0x08005c81
 8005c38:	08005c81 	.word	0x08005c81
 8005c3c:	08005c71 	.word	0x08005c71
 8005c40:	08005c81 	.word	0x08005c81
 8005c44:	08005c81 	.word	0x08005c81
 8005c48:	08005c81 	.word	0x08005c81
 8005c4c:	08005c69 	.word	0x08005c69
 8005c50:	08005c81 	.word	0x08005c81
 8005c54:	08005c81 	.word	0x08005c81
 8005c58:	08005c81 	.word	0x08005c81
 8005c5c:	08005c79 	.word	0x08005c79
 8005c60:	2300      	movs	r3, #0
 8005c62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c66:	e0d8      	b.n	8005e1a <UART_SetConfig+0x2fe>
 8005c68:	2302      	movs	r3, #2
 8005c6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c6e:	e0d4      	b.n	8005e1a <UART_SetConfig+0x2fe>
 8005c70:	2304      	movs	r3, #4
 8005c72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c76:	e0d0      	b.n	8005e1a <UART_SetConfig+0x2fe>
 8005c78:	2308      	movs	r3, #8
 8005c7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c7e:	e0cc      	b.n	8005e1a <UART_SetConfig+0x2fe>
 8005c80:	2310      	movs	r3, #16
 8005c82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c86:	e0c8      	b.n	8005e1a <UART_SetConfig+0x2fe>
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a5e      	ldr	r2, [pc, #376]	@ (8005e08 <UART_SetConfig+0x2ec>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d125      	bne.n	8005cde <UART_SetConfig+0x1c2>
 8005c92:	4b5b      	ldr	r3, [pc, #364]	@ (8005e00 <UART_SetConfig+0x2e4>)
 8005c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c98:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005c9c:	2b30      	cmp	r3, #48	@ 0x30
 8005c9e:	d016      	beq.n	8005cce <UART_SetConfig+0x1b2>
 8005ca0:	2b30      	cmp	r3, #48	@ 0x30
 8005ca2:	d818      	bhi.n	8005cd6 <UART_SetConfig+0x1ba>
 8005ca4:	2b20      	cmp	r3, #32
 8005ca6:	d00a      	beq.n	8005cbe <UART_SetConfig+0x1a2>
 8005ca8:	2b20      	cmp	r3, #32
 8005caa:	d814      	bhi.n	8005cd6 <UART_SetConfig+0x1ba>
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d002      	beq.n	8005cb6 <UART_SetConfig+0x19a>
 8005cb0:	2b10      	cmp	r3, #16
 8005cb2:	d008      	beq.n	8005cc6 <UART_SetConfig+0x1aa>
 8005cb4:	e00f      	b.n	8005cd6 <UART_SetConfig+0x1ba>
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cbc:	e0ad      	b.n	8005e1a <UART_SetConfig+0x2fe>
 8005cbe:	2302      	movs	r3, #2
 8005cc0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cc4:	e0a9      	b.n	8005e1a <UART_SetConfig+0x2fe>
 8005cc6:	2304      	movs	r3, #4
 8005cc8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ccc:	e0a5      	b.n	8005e1a <UART_SetConfig+0x2fe>
 8005cce:	2308      	movs	r3, #8
 8005cd0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cd4:	e0a1      	b.n	8005e1a <UART_SetConfig+0x2fe>
 8005cd6:	2310      	movs	r3, #16
 8005cd8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cdc:	e09d      	b.n	8005e1a <UART_SetConfig+0x2fe>
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a4a      	ldr	r2, [pc, #296]	@ (8005e0c <UART_SetConfig+0x2f0>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d125      	bne.n	8005d34 <UART_SetConfig+0x218>
 8005ce8:	4b45      	ldr	r3, [pc, #276]	@ (8005e00 <UART_SetConfig+0x2e4>)
 8005cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cee:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005cf2:	2bc0      	cmp	r3, #192	@ 0xc0
 8005cf4:	d016      	beq.n	8005d24 <UART_SetConfig+0x208>
 8005cf6:	2bc0      	cmp	r3, #192	@ 0xc0
 8005cf8:	d818      	bhi.n	8005d2c <UART_SetConfig+0x210>
 8005cfa:	2b80      	cmp	r3, #128	@ 0x80
 8005cfc:	d00a      	beq.n	8005d14 <UART_SetConfig+0x1f8>
 8005cfe:	2b80      	cmp	r3, #128	@ 0x80
 8005d00:	d814      	bhi.n	8005d2c <UART_SetConfig+0x210>
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d002      	beq.n	8005d0c <UART_SetConfig+0x1f0>
 8005d06:	2b40      	cmp	r3, #64	@ 0x40
 8005d08:	d008      	beq.n	8005d1c <UART_SetConfig+0x200>
 8005d0a:	e00f      	b.n	8005d2c <UART_SetConfig+0x210>
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d12:	e082      	b.n	8005e1a <UART_SetConfig+0x2fe>
 8005d14:	2302      	movs	r3, #2
 8005d16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d1a:	e07e      	b.n	8005e1a <UART_SetConfig+0x2fe>
 8005d1c:	2304      	movs	r3, #4
 8005d1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d22:	e07a      	b.n	8005e1a <UART_SetConfig+0x2fe>
 8005d24:	2308      	movs	r3, #8
 8005d26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d2a:	e076      	b.n	8005e1a <UART_SetConfig+0x2fe>
 8005d2c:	2310      	movs	r3, #16
 8005d2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d32:	e072      	b.n	8005e1a <UART_SetConfig+0x2fe>
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a35      	ldr	r2, [pc, #212]	@ (8005e10 <UART_SetConfig+0x2f4>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d12a      	bne.n	8005d94 <UART_SetConfig+0x278>
 8005d3e:	4b30      	ldr	r3, [pc, #192]	@ (8005e00 <UART_SetConfig+0x2e4>)
 8005d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d44:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d48:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d4c:	d01a      	beq.n	8005d84 <UART_SetConfig+0x268>
 8005d4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d52:	d81b      	bhi.n	8005d8c <UART_SetConfig+0x270>
 8005d54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d58:	d00c      	beq.n	8005d74 <UART_SetConfig+0x258>
 8005d5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d5e:	d815      	bhi.n	8005d8c <UART_SetConfig+0x270>
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d003      	beq.n	8005d6c <UART_SetConfig+0x250>
 8005d64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d68:	d008      	beq.n	8005d7c <UART_SetConfig+0x260>
 8005d6a:	e00f      	b.n	8005d8c <UART_SetConfig+0x270>
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d72:	e052      	b.n	8005e1a <UART_SetConfig+0x2fe>
 8005d74:	2302      	movs	r3, #2
 8005d76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d7a:	e04e      	b.n	8005e1a <UART_SetConfig+0x2fe>
 8005d7c:	2304      	movs	r3, #4
 8005d7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d82:	e04a      	b.n	8005e1a <UART_SetConfig+0x2fe>
 8005d84:	2308      	movs	r3, #8
 8005d86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d8a:	e046      	b.n	8005e1a <UART_SetConfig+0x2fe>
 8005d8c:	2310      	movs	r3, #16
 8005d8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d92:	e042      	b.n	8005e1a <UART_SetConfig+0x2fe>
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a17      	ldr	r2, [pc, #92]	@ (8005df8 <UART_SetConfig+0x2dc>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d13a      	bne.n	8005e14 <UART_SetConfig+0x2f8>
 8005d9e:	4b18      	ldr	r3, [pc, #96]	@ (8005e00 <UART_SetConfig+0x2e4>)
 8005da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005da4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005da8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005dac:	d01a      	beq.n	8005de4 <UART_SetConfig+0x2c8>
 8005dae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005db2:	d81b      	bhi.n	8005dec <UART_SetConfig+0x2d0>
 8005db4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005db8:	d00c      	beq.n	8005dd4 <UART_SetConfig+0x2b8>
 8005dba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005dbe:	d815      	bhi.n	8005dec <UART_SetConfig+0x2d0>
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d003      	beq.n	8005dcc <UART_SetConfig+0x2b0>
 8005dc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005dc8:	d008      	beq.n	8005ddc <UART_SetConfig+0x2c0>
 8005dca:	e00f      	b.n	8005dec <UART_SetConfig+0x2d0>
 8005dcc:	2300      	movs	r3, #0
 8005dce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005dd2:	e022      	b.n	8005e1a <UART_SetConfig+0x2fe>
 8005dd4:	2302      	movs	r3, #2
 8005dd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005dda:	e01e      	b.n	8005e1a <UART_SetConfig+0x2fe>
 8005ddc:	2304      	movs	r3, #4
 8005dde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005de2:	e01a      	b.n	8005e1a <UART_SetConfig+0x2fe>
 8005de4:	2308      	movs	r3, #8
 8005de6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005dea:	e016      	b.n	8005e1a <UART_SetConfig+0x2fe>
 8005dec:	2310      	movs	r3, #16
 8005dee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005df2:	e012      	b.n	8005e1a <UART_SetConfig+0x2fe>
 8005df4:	cfff69f3 	.word	0xcfff69f3
 8005df8:	40008000 	.word	0x40008000
 8005dfc:	40013800 	.word	0x40013800
 8005e00:	40021000 	.word	0x40021000
 8005e04:	40004400 	.word	0x40004400
 8005e08:	40004800 	.word	0x40004800
 8005e0c:	40004c00 	.word	0x40004c00
 8005e10:	40005000 	.word	0x40005000
 8005e14:	2310      	movs	r3, #16
 8005e16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4aae      	ldr	r2, [pc, #696]	@ (80060d8 <UART_SetConfig+0x5bc>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	f040 8097 	bne.w	8005f54 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005e26:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005e2a:	2b08      	cmp	r3, #8
 8005e2c:	d823      	bhi.n	8005e76 <UART_SetConfig+0x35a>
 8005e2e:	a201      	add	r2, pc, #4	@ (adr r2, 8005e34 <UART_SetConfig+0x318>)
 8005e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e34:	08005e59 	.word	0x08005e59
 8005e38:	08005e77 	.word	0x08005e77
 8005e3c:	08005e61 	.word	0x08005e61
 8005e40:	08005e77 	.word	0x08005e77
 8005e44:	08005e67 	.word	0x08005e67
 8005e48:	08005e77 	.word	0x08005e77
 8005e4c:	08005e77 	.word	0x08005e77
 8005e50:	08005e77 	.word	0x08005e77
 8005e54:	08005e6f 	.word	0x08005e6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e58:	f7fe fc86 	bl	8004768 <HAL_RCC_GetPCLK1Freq>
 8005e5c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005e5e:	e010      	b.n	8005e82 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e60:	4b9e      	ldr	r3, [pc, #632]	@ (80060dc <UART_SetConfig+0x5c0>)
 8005e62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005e64:	e00d      	b.n	8005e82 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e66:	f7fe fbe7 	bl	8004638 <HAL_RCC_GetSysClockFreq>
 8005e6a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005e6c:	e009      	b.n	8005e82 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e72:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005e74:	e005      	b.n	8005e82 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005e76:	2300      	movs	r3, #0
 8005e78:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005e80:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	f000 8130 	beq.w	80060ea <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e8e:	4a94      	ldr	r2, [pc, #592]	@ (80060e0 <UART_SetConfig+0x5c4>)
 8005e90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e94:	461a      	mov	r2, r3
 8005e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e98:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e9c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	685a      	ldr	r2, [r3, #4]
 8005ea2:	4613      	mov	r3, r2
 8005ea4:	005b      	lsls	r3, r3, #1
 8005ea6:	4413      	add	r3, r2
 8005ea8:	69ba      	ldr	r2, [r7, #24]
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d305      	bcc.n	8005eba <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005eb4:	69ba      	ldr	r2, [r7, #24]
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d903      	bls.n	8005ec2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005ec0:	e113      	b.n	80060ea <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	60bb      	str	r3, [r7, #8]
 8005ec8:	60fa      	str	r2, [r7, #12]
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ece:	4a84      	ldr	r2, [pc, #528]	@ (80060e0 <UART_SetConfig+0x5c4>)
 8005ed0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	603b      	str	r3, [r7, #0]
 8005eda:	607a      	str	r2, [r7, #4]
 8005edc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ee0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005ee4:	f7fa fe78 	bl	8000bd8 <__aeabi_uldivmod>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	460b      	mov	r3, r1
 8005eec:	4610      	mov	r0, r2
 8005eee:	4619      	mov	r1, r3
 8005ef0:	f04f 0200 	mov.w	r2, #0
 8005ef4:	f04f 0300 	mov.w	r3, #0
 8005ef8:	020b      	lsls	r3, r1, #8
 8005efa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005efe:	0202      	lsls	r2, r0, #8
 8005f00:	6979      	ldr	r1, [r7, #20]
 8005f02:	6849      	ldr	r1, [r1, #4]
 8005f04:	0849      	lsrs	r1, r1, #1
 8005f06:	2000      	movs	r0, #0
 8005f08:	460c      	mov	r4, r1
 8005f0a:	4605      	mov	r5, r0
 8005f0c:	eb12 0804 	adds.w	r8, r2, r4
 8005f10:	eb43 0905 	adc.w	r9, r3, r5
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	469a      	mov	sl, r3
 8005f1c:	4693      	mov	fp, r2
 8005f1e:	4652      	mov	r2, sl
 8005f20:	465b      	mov	r3, fp
 8005f22:	4640      	mov	r0, r8
 8005f24:	4649      	mov	r1, r9
 8005f26:	f7fa fe57 	bl	8000bd8 <__aeabi_uldivmod>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	460b      	mov	r3, r1
 8005f2e:	4613      	mov	r3, r2
 8005f30:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005f32:	6a3b      	ldr	r3, [r7, #32]
 8005f34:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f38:	d308      	bcc.n	8005f4c <UART_SetConfig+0x430>
 8005f3a:	6a3b      	ldr	r3, [r7, #32]
 8005f3c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f40:	d204      	bcs.n	8005f4c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	6a3a      	ldr	r2, [r7, #32]
 8005f48:	60da      	str	r2, [r3, #12]
 8005f4a:	e0ce      	b.n	80060ea <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005f52:	e0ca      	b.n	80060ea <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	69db      	ldr	r3, [r3, #28]
 8005f58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f5c:	d166      	bne.n	800602c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005f5e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005f62:	2b08      	cmp	r3, #8
 8005f64:	d827      	bhi.n	8005fb6 <UART_SetConfig+0x49a>
 8005f66:	a201      	add	r2, pc, #4	@ (adr r2, 8005f6c <UART_SetConfig+0x450>)
 8005f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f6c:	08005f91 	.word	0x08005f91
 8005f70:	08005f99 	.word	0x08005f99
 8005f74:	08005fa1 	.word	0x08005fa1
 8005f78:	08005fb7 	.word	0x08005fb7
 8005f7c:	08005fa7 	.word	0x08005fa7
 8005f80:	08005fb7 	.word	0x08005fb7
 8005f84:	08005fb7 	.word	0x08005fb7
 8005f88:	08005fb7 	.word	0x08005fb7
 8005f8c:	08005faf 	.word	0x08005faf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f90:	f7fe fbea 	bl	8004768 <HAL_RCC_GetPCLK1Freq>
 8005f94:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005f96:	e014      	b.n	8005fc2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f98:	f7fe fbfc 	bl	8004794 <HAL_RCC_GetPCLK2Freq>
 8005f9c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005f9e:	e010      	b.n	8005fc2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fa0:	4b4e      	ldr	r3, [pc, #312]	@ (80060dc <UART_SetConfig+0x5c0>)
 8005fa2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005fa4:	e00d      	b.n	8005fc2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fa6:	f7fe fb47 	bl	8004638 <HAL_RCC_GetSysClockFreq>
 8005faa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005fac:	e009      	b.n	8005fc2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005fb2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005fb4:	e005      	b.n	8005fc2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005fc0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	f000 8090 	beq.w	80060ea <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fce:	4a44      	ldr	r2, [pc, #272]	@ (80060e0 <UART_SetConfig+0x5c4>)
 8005fd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fd8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005fdc:	005a      	lsls	r2, r3, #1
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	085b      	lsrs	r3, r3, #1
 8005fe4:	441a      	add	r2, r3
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fee:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ff0:	6a3b      	ldr	r3, [r7, #32]
 8005ff2:	2b0f      	cmp	r3, #15
 8005ff4:	d916      	bls.n	8006024 <UART_SetConfig+0x508>
 8005ff6:	6a3b      	ldr	r3, [r7, #32]
 8005ff8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ffc:	d212      	bcs.n	8006024 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ffe:	6a3b      	ldr	r3, [r7, #32]
 8006000:	b29b      	uxth	r3, r3
 8006002:	f023 030f 	bic.w	r3, r3, #15
 8006006:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006008:	6a3b      	ldr	r3, [r7, #32]
 800600a:	085b      	lsrs	r3, r3, #1
 800600c:	b29b      	uxth	r3, r3
 800600e:	f003 0307 	and.w	r3, r3, #7
 8006012:	b29a      	uxth	r2, r3
 8006014:	8bfb      	ldrh	r3, [r7, #30]
 8006016:	4313      	orrs	r3, r2
 8006018:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	8bfa      	ldrh	r2, [r7, #30]
 8006020:	60da      	str	r2, [r3, #12]
 8006022:	e062      	b.n	80060ea <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800602a:	e05e      	b.n	80060ea <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800602c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006030:	2b08      	cmp	r3, #8
 8006032:	d828      	bhi.n	8006086 <UART_SetConfig+0x56a>
 8006034:	a201      	add	r2, pc, #4	@ (adr r2, 800603c <UART_SetConfig+0x520>)
 8006036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800603a:	bf00      	nop
 800603c:	08006061 	.word	0x08006061
 8006040:	08006069 	.word	0x08006069
 8006044:	08006071 	.word	0x08006071
 8006048:	08006087 	.word	0x08006087
 800604c:	08006077 	.word	0x08006077
 8006050:	08006087 	.word	0x08006087
 8006054:	08006087 	.word	0x08006087
 8006058:	08006087 	.word	0x08006087
 800605c:	0800607f 	.word	0x0800607f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006060:	f7fe fb82 	bl	8004768 <HAL_RCC_GetPCLK1Freq>
 8006064:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006066:	e014      	b.n	8006092 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006068:	f7fe fb94 	bl	8004794 <HAL_RCC_GetPCLK2Freq>
 800606c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800606e:	e010      	b.n	8006092 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006070:	4b1a      	ldr	r3, [pc, #104]	@ (80060dc <UART_SetConfig+0x5c0>)
 8006072:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006074:	e00d      	b.n	8006092 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006076:	f7fe fadf 	bl	8004638 <HAL_RCC_GetSysClockFreq>
 800607a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800607c:	e009      	b.n	8006092 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800607e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006082:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006084:	e005      	b.n	8006092 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006086:	2300      	movs	r3, #0
 8006088:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006090:	bf00      	nop
    }

    if (pclk != 0U)
 8006092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006094:	2b00      	cmp	r3, #0
 8006096:	d028      	beq.n	80060ea <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800609c:	4a10      	ldr	r2, [pc, #64]	@ (80060e0 <UART_SetConfig+0x5c4>)
 800609e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060a2:	461a      	mov	r2, r3
 80060a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060a6:	fbb3 f2f2 	udiv	r2, r3, r2
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	085b      	lsrs	r3, r3, #1
 80060b0:	441a      	add	r2, r3
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80060ba:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060bc:	6a3b      	ldr	r3, [r7, #32]
 80060be:	2b0f      	cmp	r3, #15
 80060c0:	d910      	bls.n	80060e4 <UART_SetConfig+0x5c8>
 80060c2:	6a3b      	ldr	r3, [r7, #32]
 80060c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060c8:	d20c      	bcs.n	80060e4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80060ca:	6a3b      	ldr	r3, [r7, #32]
 80060cc:	b29a      	uxth	r2, r3
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	60da      	str	r2, [r3, #12]
 80060d4:	e009      	b.n	80060ea <UART_SetConfig+0x5ce>
 80060d6:	bf00      	nop
 80060d8:	40008000 	.word	0x40008000
 80060dc:	00f42400 	.word	0x00f42400
 80060e0:	0800aab0 	.word	0x0800aab0
      }
      else
      {
        ret = HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	2201      	movs	r2, #1
 80060ee:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	2201      	movs	r2, #1
 80060f6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	2200      	movs	r2, #0
 80060fe:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	2200      	movs	r2, #0
 8006104:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006106:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800610a:	4618      	mov	r0, r3
 800610c:	3730      	adds	r7, #48	@ 0x30
 800610e:	46bd      	mov	sp, r7
 8006110:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006114 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006114:	b480      	push	{r7}
 8006116:	b083      	sub	sp, #12
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006120:	f003 0308 	and.w	r3, r3, #8
 8006124:	2b00      	cmp	r3, #0
 8006126:	d00a      	beq.n	800613e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	430a      	orrs	r2, r1
 800613c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006142:	f003 0301 	and.w	r3, r3, #1
 8006146:	2b00      	cmp	r3, #0
 8006148:	d00a      	beq.n	8006160 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	430a      	orrs	r2, r1
 800615e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006164:	f003 0302 	and.w	r3, r3, #2
 8006168:	2b00      	cmp	r3, #0
 800616a:	d00a      	beq.n	8006182 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	430a      	orrs	r2, r1
 8006180:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006186:	f003 0304 	and.w	r3, r3, #4
 800618a:	2b00      	cmp	r3, #0
 800618c:	d00a      	beq.n	80061a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	430a      	orrs	r2, r1
 80061a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061a8:	f003 0310 	and.w	r3, r3, #16
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d00a      	beq.n	80061c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	430a      	orrs	r2, r1
 80061c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061ca:	f003 0320 	and.w	r3, r3, #32
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d00a      	beq.n	80061e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	430a      	orrs	r2, r1
 80061e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d01a      	beq.n	800622a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	430a      	orrs	r2, r1
 8006208:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800620e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006212:	d10a      	bne.n	800622a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	430a      	orrs	r2, r1
 8006228:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800622e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006232:	2b00      	cmp	r3, #0
 8006234:	d00a      	beq.n	800624c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	430a      	orrs	r2, r1
 800624a:	605a      	str	r2, [r3, #4]
  }
}
 800624c:	bf00      	nop
 800624e:	370c      	adds	r7, #12
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b098      	sub	sp, #96	@ 0x60
 800625c:	af02      	add	r7, sp, #8
 800625e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2200      	movs	r2, #0
 8006264:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006268:	f7fc f9da 	bl	8002620 <HAL_GetTick>
 800626c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f003 0308 	and.w	r3, r3, #8
 8006278:	2b08      	cmp	r3, #8
 800627a:	d12f      	bne.n	80062dc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800627c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006280:	9300      	str	r3, [sp, #0]
 8006282:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006284:	2200      	movs	r2, #0
 8006286:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 f88e 	bl	80063ac <UART_WaitOnFlagUntilTimeout>
 8006290:	4603      	mov	r3, r0
 8006292:	2b00      	cmp	r3, #0
 8006294:	d022      	beq.n	80062dc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800629c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800629e:	e853 3f00 	ldrex	r3, [r3]
 80062a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80062a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	461a      	mov	r2, r3
 80062b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80062b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80062b6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80062ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80062bc:	e841 2300 	strex	r3, r2, [r1]
 80062c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80062c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d1e6      	bne.n	8006296 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2220      	movs	r2, #32
 80062cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062d8:	2303      	movs	r3, #3
 80062da:	e063      	b.n	80063a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f003 0304 	and.w	r3, r3, #4
 80062e6:	2b04      	cmp	r3, #4
 80062e8:	d149      	bne.n	800637e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062ea:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80062ee:	9300      	str	r3, [sp, #0]
 80062f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062f2:	2200      	movs	r2, #0
 80062f4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f000 f857 	bl	80063ac <UART_WaitOnFlagUntilTimeout>
 80062fe:	4603      	mov	r3, r0
 8006300:	2b00      	cmp	r3, #0
 8006302:	d03c      	beq.n	800637e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800630a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800630c:	e853 3f00 	ldrex	r3, [r3]
 8006310:	623b      	str	r3, [r7, #32]
   return(result);
 8006312:	6a3b      	ldr	r3, [r7, #32]
 8006314:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006318:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	461a      	mov	r2, r3
 8006320:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006322:	633b      	str	r3, [r7, #48]	@ 0x30
 8006324:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006326:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006328:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800632a:	e841 2300 	strex	r3, r2, [r1]
 800632e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006332:	2b00      	cmp	r3, #0
 8006334:	d1e6      	bne.n	8006304 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	3308      	adds	r3, #8
 800633c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	e853 3f00 	ldrex	r3, [r3]
 8006344:	60fb      	str	r3, [r7, #12]
   return(result);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f023 0301 	bic.w	r3, r3, #1
 800634c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	3308      	adds	r3, #8
 8006354:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006356:	61fa      	str	r2, [r7, #28]
 8006358:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800635a:	69b9      	ldr	r1, [r7, #24]
 800635c:	69fa      	ldr	r2, [r7, #28]
 800635e:	e841 2300 	strex	r3, r2, [r1]
 8006362:	617b      	str	r3, [r7, #20]
   return(result);
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d1e5      	bne.n	8006336 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2220      	movs	r2, #32
 800636e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800637a:	2303      	movs	r3, #3
 800637c:	e012      	b.n	80063a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2220      	movs	r2, #32
 8006382:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2220      	movs	r2, #32
 800638a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80063a2:	2300      	movs	r3, #0
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3758      	adds	r7, #88	@ 0x58
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b084      	sub	sp, #16
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	603b      	str	r3, [r7, #0]
 80063b8:	4613      	mov	r3, r2
 80063ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063bc:	e04f      	b.n	800645e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063be:	69bb      	ldr	r3, [r7, #24]
 80063c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80063c4:	d04b      	beq.n	800645e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063c6:	f7fc f92b 	bl	8002620 <HAL_GetTick>
 80063ca:	4602      	mov	r2, r0
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	1ad3      	subs	r3, r2, r3
 80063d0:	69ba      	ldr	r2, [r7, #24]
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d302      	bcc.n	80063dc <UART_WaitOnFlagUntilTimeout+0x30>
 80063d6:	69bb      	ldr	r3, [r7, #24]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d101      	bne.n	80063e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80063dc:	2303      	movs	r3, #3
 80063de:	e04e      	b.n	800647e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f003 0304 	and.w	r3, r3, #4
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d037      	beq.n	800645e <UART_WaitOnFlagUntilTimeout+0xb2>
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	2b80      	cmp	r3, #128	@ 0x80
 80063f2:	d034      	beq.n	800645e <UART_WaitOnFlagUntilTimeout+0xb2>
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	2b40      	cmp	r3, #64	@ 0x40
 80063f8:	d031      	beq.n	800645e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	69db      	ldr	r3, [r3, #28]
 8006400:	f003 0308 	and.w	r3, r3, #8
 8006404:	2b08      	cmp	r3, #8
 8006406:	d110      	bne.n	800642a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	2208      	movs	r2, #8
 800640e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006410:	68f8      	ldr	r0, [r7, #12]
 8006412:	f000 f838 	bl	8006486 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2208      	movs	r2, #8
 800641a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2200      	movs	r2, #0
 8006422:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	e029      	b.n	800647e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	69db      	ldr	r3, [r3, #28]
 8006430:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006434:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006438:	d111      	bne.n	800645e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006442:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006444:	68f8      	ldr	r0, [r7, #12]
 8006446:	f000 f81e 	bl	8006486 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2220      	movs	r2, #32
 800644e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2200      	movs	r2, #0
 8006456:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800645a:	2303      	movs	r3, #3
 800645c:	e00f      	b.n	800647e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	69da      	ldr	r2, [r3, #28]
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	4013      	ands	r3, r2
 8006468:	68ba      	ldr	r2, [r7, #8]
 800646a:	429a      	cmp	r2, r3
 800646c:	bf0c      	ite	eq
 800646e:	2301      	moveq	r3, #1
 8006470:	2300      	movne	r3, #0
 8006472:	b2db      	uxtb	r3, r3
 8006474:	461a      	mov	r2, r3
 8006476:	79fb      	ldrb	r3, [r7, #7]
 8006478:	429a      	cmp	r2, r3
 800647a:	d0a0      	beq.n	80063be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800647c:	2300      	movs	r3, #0
}
 800647e:	4618      	mov	r0, r3
 8006480:	3710      	adds	r7, #16
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}

08006486 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006486:	b480      	push	{r7}
 8006488:	b095      	sub	sp, #84	@ 0x54
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006494:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006496:	e853 3f00 	ldrex	r3, [r3]
 800649a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800649c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800649e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80064a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	461a      	mov	r2, r3
 80064aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80064ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80064ae:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80064b2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80064b4:	e841 2300 	strex	r3, r2, [r1]
 80064b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80064ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d1e6      	bne.n	800648e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	3308      	adds	r3, #8
 80064c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c8:	6a3b      	ldr	r3, [r7, #32]
 80064ca:	e853 3f00 	ldrex	r3, [r3]
 80064ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80064d6:	f023 0301 	bic.w	r3, r3, #1
 80064da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	3308      	adds	r3, #8
 80064e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80064e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80064e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80064ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80064ec:	e841 2300 	strex	r3, r2, [r1]
 80064f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80064f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d1e3      	bne.n	80064c0 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d118      	bne.n	8006532 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	e853 3f00 	ldrex	r3, [r3]
 800650c:	60bb      	str	r3, [r7, #8]
   return(result);
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	f023 0310 	bic.w	r3, r3, #16
 8006514:	647b      	str	r3, [r7, #68]	@ 0x44
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	461a      	mov	r2, r3
 800651c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800651e:	61bb      	str	r3, [r7, #24]
 8006520:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006522:	6979      	ldr	r1, [r7, #20]
 8006524:	69ba      	ldr	r2, [r7, #24]
 8006526:	e841 2300 	strex	r3, r2, [r1]
 800652a:	613b      	str	r3, [r7, #16]
   return(result);
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d1e6      	bne.n	8006500 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2220      	movs	r2, #32
 8006536:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2200      	movs	r2, #0
 800653e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006546:	bf00      	nop
 8006548:	3754      	adds	r7, #84	@ 0x54
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr

08006552 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006552:	b480      	push	{r7}
 8006554:	b085      	sub	sp, #20
 8006556:	af00      	add	r7, sp, #0
 8006558:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006560:	2b01      	cmp	r3, #1
 8006562:	d101      	bne.n	8006568 <HAL_UARTEx_DisableFifoMode+0x16>
 8006564:	2302      	movs	r3, #2
 8006566:	e027      	b.n	80065b8 <HAL_UARTEx_DisableFifoMode+0x66>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2201      	movs	r2, #1
 800656c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2224      	movs	r2, #36	@ 0x24
 8006574:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f022 0201 	bic.w	r2, r2, #1
 800658e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006596:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2200      	movs	r2, #0
 800659c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	68fa      	ldr	r2, [r7, #12]
 80065a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2220      	movs	r2, #32
 80065aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80065b6:	2300      	movs	r3, #0
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3714      	adds	r7, #20
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr

080065c4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b084      	sub	sp, #16
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d101      	bne.n	80065dc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80065d8:	2302      	movs	r3, #2
 80065da:	e02d      	b.n	8006638 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2201      	movs	r2, #1
 80065e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2224      	movs	r2, #36	@ 0x24
 80065e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f022 0201 	bic.w	r2, r2, #1
 8006602:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	683a      	ldr	r2, [r7, #0]
 8006614:	430a      	orrs	r2, r1
 8006616:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f000 f84f 	bl	80066bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	68fa      	ldr	r2, [r7, #12]
 8006624:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2220      	movs	r2, #32
 800662a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006636:	2300      	movs	r3, #0
}
 8006638:	4618      	mov	r0, r3
 800663a:	3710      	adds	r7, #16
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}

08006640 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b084      	sub	sp, #16
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006650:	2b01      	cmp	r3, #1
 8006652:	d101      	bne.n	8006658 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006654:	2302      	movs	r3, #2
 8006656:	e02d      	b.n	80066b4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2201      	movs	r2, #1
 800665c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2224      	movs	r2, #36	@ 0x24
 8006664:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f022 0201 	bic.w	r2, r2, #1
 800667e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	683a      	ldr	r2, [r7, #0]
 8006690:	430a      	orrs	r2, r1
 8006692:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f000 f811 	bl	80066bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	68fa      	ldr	r2, [r7, #12]
 80066a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2220      	movs	r2, #32
 80066a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80066b2:	2300      	movs	r3, #0
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3710      	adds	r7, #16
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}

080066bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80066bc:	b480      	push	{r7}
 80066be:	b085      	sub	sp, #20
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d108      	bne.n	80066de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2201      	movs	r2, #1
 80066d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2201      	movs	r2, #1
 80066d8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80066dc:	e031      	b.n	8006742 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80066de:	2308      	movs	r3, #8
 80066e0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80066e2:	2308      	movs	r3, #8
 80066e4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	0e5b      	lsrs	r3, r3, #25
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	f003 0307 	and.w	r3, r3, #7
 80066f4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	0f5b      	lsrs	r3, r3, #29
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	f003 0307 	and.w	r3, r3, #7
 8006704:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006706:	7bbb      	ldrb	r3, [r7, #14]
 8006708:	7b3a      	ldrb	r2, [r7, #12]
 800670a:	4911      	ldr	r1, [pc, #68]	@ (8006750 <UARTEx_SetNbDataToProcess+0x94>)
 800670c:	5c8a      	ldrb	r2, [r1, r2]
 800670e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006712:	7b3a      	ldrb	r2, [r7, #12]
 8006714:	490f      	ldr	r1, [pc, #60]	@ (8006754 <UARTEx_SetNbDataToProcess+0x98>)
 8006716:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006718:	fb93 f3f2 	sdiv	r3, r3, r2
 800671c:	b29a      	uxth	r2, r3
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006724:	7bfb      	ldrb	r3, [r7, #15]
 8006726:	7b7a      	ldrb	r2, [r7, #13]
 8006728:	4909      	ldr	r1, [pc, #36]	@ (8006750 <UARTEx_SetNbDataToProcess+0x94>)
 800672a:	5c8a      	ldrb	r2, [r1, r2]
 800672c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006730:	7b7a      	ldrb	r2, [r7, #13]
 8006732:	4908      	ldr	r1, [pc, #32]	@ (8006754 <UARTEx_SetNbDataToProcess+0x98>)
 8006734:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006736:	fb93 f3f2 	sdiv	r3, r3, r2
 800673a:	b29a      	uxth	r2, r3
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006742:	bf00      	nop
 8006744:	3714      	adds	r7, #20
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr
 800674e:	bf00      	nop
 8006750:	0800aac8 	.word	0x0800aac8
 8006754:	0800aad0 	.word	0x0800aad0

08006758 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006758:	b480      	push	{r7}
 800675a:	b085      	sub	sp, #20
 800675c:	af00      	add	r7, sp, #0
 800675e:	4603      	mov	r3, r0
 8006760:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006762:	2300      	movs	r3, #0
 8006764:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006766:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800676a:	2b84      	cmp	r3, #132	@ 0x84
 800676c:	d005      	beq.n	800677a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800676e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	4413      	add	r3, r2
 8006776:	3303      	adds	r3, #3
 8006778:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800677a:	68fb      	ldr	r3, [r7, #12]
}
 800677c:	4618      	mov	r0, r3
 800677e:	3714      	adds	r7, #20
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800678c:	f000 faec 	bl	8006d68 <vTaskStartScheduler>
  
  return osOK;
 8006790:	2300      	movs	r3, #0
}
 8006792:	4618      	mov	r0, r3
 8006794:	bd80      	pop	{r7, pc}

08006796 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006796:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006798:	b089      	sub	sp, #36	@ 0x24
 800679a:	af04      	add	r7, sp, #16
 800679c:	6078      	str	r0, [r7, #4]
 800679e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	695b      	ldr	r3, [r3, #20]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d020      	beq.n	80067ea <osThreadCreate+0x54>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	699b      	ldr	r3, [r3, #24]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d01c      	beq.n	80067ea <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	685c      	ldr	r4, [r3, #4]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	691e      	ldr	r6, [r3, #16]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80067c2:	4618      	mov	r0, r3
 80067c4:	f7ff ffc8 	bl	8006758 <makeFreeRtosPriority>
 80067c8:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	695b      	ldr	r3, [r3, #20]
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80067d2:	9202      	str	r2, [sp, #8]
 80067d4:	9301      	str	r3, [sp, #4]
 80067d6:	9100      	str	r1, [sp, #0]
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	4632      	mov	r2, r6
 80067dc:	4629      	mov	r1, r5
 80067de:	4620      	mov	r0, r4
 80067e0:	f000 f8ed 	bl	80069be <xTaskCreateStatic>
 80067e4:	4603      	mov	r3, r0
 80067e6:	60fb      	str	r3, [r7, #12]
 80067e8:	e01c      	b.n	8006824 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	685c      	ldr	r4, [r3, #4]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80067f6:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80067fe:	4618      	mov	r0, r3
 8006800:	f7ff ffaa 	bl	8006758 <makeFreeRtosPriority>
 8006804:	4602      	mov	r2, r0
 8006806:	f107 030c 	add.w	r3, r7, #12
 800680a:	9301      	str	r3, [sp, #4]
 800680c:	9200      	str	r2, [sp, #0]
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	4632      	mov	r2, r6
 8006812:	4629      	mov	r1, r5
 8006814:	4620      	mov	r0, r4
 8006816:	f000 f932 	bl	8006a7e <xTaskCreate>
 800681a:	4603      	mov	r3, r0
 800681c:	2b01      	cmp	r3, #1
 800681e:	d001      	beq.n	8006824 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006820:	2300      	movs	r3, #0
 8006822:	e000      	b.n	8006826 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006824:	68fb      	ldr	r3, [r7, #12]
}
 8006826:	4618      	mov	r0, r3
 8006828:	3714      	adds	r7, #20
 800682a:	46bd      	mov	sp, r7
 800682c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800682e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800682e:	b580      	push	{r7, lr}
 8006830:	b084      	sub	sp, #16
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d001      	beq.n	8006844 <osDelay+0x16>
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	e000      	b.n	8006846 <osDelay+0x18>
 8006844:	2301      	movs	r3, #1
 8006846:	4618      	mov	r0, r3
 8006848:	f000 fa58 	bl	8006cfc <vTaskDelay>
  
  return osOK;
 800684c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800684e:	4618      	mov	r0, r3
 8006850:	3710      	adds	r7, #16
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}

08006856 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006856:	b480      	push	{r7}
 8006858:	b083      	sub	sp, #12
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f103 0208 	add.w	r2, r3, #8
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800686e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f103 0208 	add.w	r2, r3, #8
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f103 0208 	add.w	r2, r3, #8
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2200      	movs	r2, #0
 8006888:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800688a:	bf00      	nop
 800688c:	370c      	adds	r7, #12
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr

08006896 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006896:	b480      	push	{r7}
 8006898:	b083      	sub	sp, #12
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80068a4:	bf00      	nop
 80068a6:	370c      	adds	r7, #12
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80068b0:	b480      	push	{r7}
 80068b2:	b085      	sub	sp, #20
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	68fa      	ldr	r2, [r7, #12]
 80068c4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	689a      	ldr	r2, [r3, #8]
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	683a      	ldr	r2, [r7, #0]
 80068d4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	683a      	ldr	r2, [r7, #0]
 80068da:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	1c5a      	adds	r2, r3, #1
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	601a      	str	r2, [r3, #0]
}
 80068ec:	bf00      	nop
 80068ee:	3714      	adds	r7, #20
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr

080068f8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80068f8:	b480      	push	{r7}
 80068fa:	b085      	sub	sp, #20
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800690e:	d103      	bne.n	8006918 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	691b      	ldr	r3, [r3, #16]
 8006914:	60fb      	str	r3, [r7, #12]
 8006916:	e00c      	b.n	8006932 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	3308      	adds	r3, #8
 800691c:	60fb      	str	r3, [r7, #12]
 800691e:	e002      	b.n	8006926 <vListInsert+0x2e>
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	60fb      	str	r3, [r7, #12]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	68ba      	ldr	r2, [r7, #8]
 800692e:	429a      	cmp	r2, r3
 8006930:	d2f6      	bcs.n	8006920 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	685a      	ldr	r2, [r3, #4]
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	683a      	ldr	r2, [r7, #0]
 8006940:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	68fa      	ldr	r2, [r7, #12]
 8006946:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	683a      	ldr	r2, [r7, #0]
 800694c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	1c5a      	adds	r2, r3, #1
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	601a      	str	r2, [r3, #0]
}
 800695e:	bf00      	nop
 8006960:	3714      	adds	r7, #20
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr

0800696a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800696a:	b480      	push	{r7}
 800696c:	b085      	sub	sp, #20
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	691b      	ldr	r3, [r3, #16]
 8006976:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	6892      	ldr	r2, [r2, #8]
 8006980:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	6852      	ldr	r2, [r2, #4]
 800698a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	429a      	cmp	r2, r3
 8006994:	d103      	bne.n	800699e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	689a      	ldr	r2, [r3, #8]
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2200      	movs	r2, #0
 80069a2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	1e5a      	subs	r2, r3, #1
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3714      	adds	r7, #20
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr

080069be <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80069be:	b580      	push	{r7, lr}
 80069c0:	b08e      	sub	sp, #56	@ 0x38
 80069c2:	af04      	add	r7, sp, #16
 80069c4:	60f8      	str	r0, [r7, #12]
 80069c6:	60b9      	str	r1, [r7, #8]
 80069c8:	607a      	str	r2, [r7, #4]
 80069ca:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80069cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d10b      	bne.n	80069ea <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80069d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069d6:	f383 8811 	msr	BASEPRI, r3
 80069da:	f3bf 8f6f 	isb	sy
 80069de:	f3bf 8f4f 	dsb	sy
 80069e2:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80069e4:	bf00      	nop
 80069e6:	bf00      	nop
 80069e8:	e7fd      	b.n	80069e6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80069ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d10b      	bne.n	8006a08 <xTaskCreateStatic+0x4a>
	__asm volatile
 80069f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069f4:	f383 8811 	msr	BASEPRI, r3
 80069f8:	f3bf 8f6f 	isb	sy
 80069fc:	f3bf 8f4f 	dsb	sy
 8006a00:	61fb      	str	r3, [r7, #28]
}
 8006a02:	bf00      	nop
 8006a04:	bf00      	nop
 8006a06:	e7fd      	b.n	8006a04 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006a08:	2354      	movs	r3, #84	@ 0x54
 8006a0a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	2b54      	cmp	r3, #84	@ 0x54
 8006a10:	d00b      	beq.n	8006a2a <xTaskCreateStatic+0x6c>
	__asm volatile
 8006a12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a16:	f383 8811 	msr	BASEPRI, r3
 8006a1a:	f3bf 8f6f 	isb	sy
 8006a1e:	f3bf 8f4f 	dsb	sy
 8006a22:	61bb      	str	r3, [r7, #24]
}
 8006a24:	bf00      	nop
 8006a26:	bf00      	nop
 8006a28:	e7fd      	b.n	8006a26 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006a2a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006a2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d01e      	beq.n	8006a70 <xTaskCreateStatic+0xb2>
 8006a32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d01b      	beq.n	8006a70 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a3a:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a3e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006a40:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a44:	2202      	movs	r2, #2
 8006a46:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	9303      	str	r3, [sp, #12]
 8006a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a50:	9302      	str	r3, [sp, #8]
 8006a52:	f107 0314 	add.w	r3, r7, #20
 8006a56:	9301      	str	r3, [sp, #4]
 8006a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a5a:	9300      	str	r3, [sp, #0]
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	68b9      	ldr	r1, [r7, #8]
 8006a62:	68f8      	ldr	r0, [r7, #12]
 8006a64:	f000 f850 	bl	8006b08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a68:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006a6a:	f000 f8dd 	bl	8006c28 <prvAddNewTaskToReadyList>
 8006a6e:	e001      	b.n	8006a74 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006a70:	2300      	movs	r3, #0
 8006a72:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006a74:	697b      	ldr	r3, [r7, #20]
	}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3728      	adds	r7, #40	@ 0x28
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}

08006a7e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006a7e:	b580      	push	{r7, lr}
 8006a80:	b08c      	sub	sp, #48	@ 0x30
 8006a82:	af04      	add	r7, sp, #16
 8006a84:	60f8      	str	r0, [r7, #12]
 8006a86:	60b9      	str	r1, [r7, #8]
 8006a88:	603b      	str	r3, [r7, #0]
 8006a8a:	4613      	mov	r3, r2
 8006a8c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006a8e:	88fb      	ldrh	r3, [r7, #6]
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	4618      	mov	r0, r3
 8006a94:	f000 ff00 	bl	8007898 <pvPortMalloc>
 8006a98:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d00e      	beq.n	8006abe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006aa0:	2054      	movs	r0, #84	@ 0x54
 8006aa2:	f000 fef9 	bl	8007898 <pvPortMalloc>
 8006aa6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006aa8:	69fb      	ldr	r3, [r7, #28]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d003      	beq.n	8006ab6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006aae:	69fb      	ldr	r3, [r7, #28]
 8006ab0:	697a      	ldr	r2, [r7, #20]
 8006ab2:	631a      	str	r2, [r3, #48]	@ 0x30
 8006ab4:	e005      	b.n	8006ac2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006ab6:	6978      	ldr	r0, [r7, #20]
 8006ab8:	f000 ffbc 	bl	8007a34 <vPortFree>
 8006abc:	e001      	b.n	8006ac2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006ac2:	69fb      	ldr	r3, [r7, #28]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d017      	beq.n	8006af8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006ac8:	69fb      	ldr	r3, [r7, #28]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006ad0:	88fa      	ldrh	r2, [r7, #6]
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	9303      	str	r3, [sp, #12]
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	9302      	str	r3, [sp, #8]
 8006ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006adc:	9301      	str	r3, [sp, #4]
 8006ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ae0:	9300      	str	r3, [sp, #0]
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	68b9      	ldr	r1, [r7, #8]
 8006ae6:	68f8      	ldr	r0, [r7, #12]
 8006ae8:	f000 f80e 	bl	8006b08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006aec:	69f8      	ldr	r0, [r7, #28]
 8006aee:	f000 f89b 	bl	8006c28 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006af2:	2301      	movs	r3, #1
 8006af4:	61bb      	str	r3, [r7, #24]
 8006af6:	e002      	b.n	8006afe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006af8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006afc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006afe:	69bb      	ldr	r3, [r7, #24]
	}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3720      	adds	r7, #32
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}

08006b08 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b088      	sub	sp, #32
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	60f8      	str	r0, [r7, #12]
 8006b10:	60b9      	str	r1, [r7, #8]
 8006b12:	607a      	str	r2, [r7, #4]
 8006b14:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b18:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	461a      	mov	r2, r3
 8006b20:	21a5      	movs	r1, #165	@ 0xa5
 8006b22:	f001 fdf3 	bl	800870c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006b30:	3b01      	subs	r3, #1
 8006b32:	009b      	lsls	r3, r3, #2
 8006b34:	4413      	add	r3, r2
 8006b36:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006b38:	69bb      	ldr	r3, [r7, #24]
 8006b3a:	f023 0307 	bic.w	r3, r3, #7
 8006b3e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006b40:	69bb      	ldr	r3, [r7, #24]
 8006b42:	f003 0307 	and.w	r3, r3, #7
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d00b      	beq.n	8006b62 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006b4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b4e:	f383 8811 	msr	BASEPRI, r3
 8006b52:	f3bf 8f6f 	isb	sy
 8006b56:	f3bf 8f4f 	dsb	sy
 8006b5a:	617b      	str	r3, [r7, #20]
}
 8006b5c:	bf00      	nop
 8006b5e:	bf00      	nop
 8006b60:	e7fd      	b.n	8006b5e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d01f      	beq.n	8006ba8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b68:	2300      	movs	r3, #0
 8006b6a:	61fb      	str	r3, [r7, #28]
 8006b6c:	e012      	b.n	8006b94 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006b6e:	68ba      	ldr	r2, [r7, #8]
 8006b70:	69fb      	ldr	r3, [r7, #28]
 8006b72:	4413      	add	r3, r2
 8006b74:	7819      	ldrb	r1, [r3, #0]
 8006b76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b78:	69fb      	ldr	r3, [r7, #28]
 8006b7a:	4413      	add	r3, r2
 8006b7c:	3334      	adds	r3, #52	@ 0x34
 8006b7e:	460a      	mov	r2, r1
 8006b80:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006b82:	68ba      	ldr	r2, [r7, #8]
 8006b84:	69fb      	ldr	r3, [r7, #28]
 8006b86:	4413      	add	r3, r2
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d006      	beq.n	8006b9c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b8e:	69fb      	ldr	r3, [r7, #28]
 8006b90:	3301      	adds	r3, #1
 8006b92:	61fb      	str	r3, [r7, #28]
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	2b0f      	cmp	r3, #15
 8006b98:	d9e9      	bls.n	8006b6e <prvInitialiseNewTask+0x66>
 8006b9a:	e000      	b.n	8006b9e <prvInitialiseNewTask+0x96>
			{
				break;
 8006b9c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006ba6:	e003      	b.n	8006bb0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006baa:	2200      	movs	r2, #0
 8006bac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bb2:	2b06      	cmp	r3, #6
 8006bb4:	d901      	bls.n	8006bba <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006bb6:	2306      	movs	r3, #6
 8006bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bbc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006bbe:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bc2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006bc4:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bc8:	2200      	movs	r2, #0
 8006bca:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bce:	3304      	adds	r3, #4
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f7ff fe60 	bl	8006896 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bd8:	3318      	adds	r3, #24
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f7ff fe5b 	bl	8006896 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006be2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006be4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006be6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006be8:	f1c3 0207 	rsb	r2, r3, #7
 8006bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bee:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bf2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bf4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006c04:	683a      	ldr	r2, [r7, #0]
 8006c06:	68f9      	ldr	r1, [r7, #12]
 8006c08:	69b8      	ldr	r0, [r7, #24]
 8006c0a:	f000 fc33 	bl	8007474 <pxPortInitialiseStack>
 8006c0e:	4602      	mov	r2, r0
 8006c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c12:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006c14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d002      	beq.n	8006c20 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006c1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c1e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c20:	bf00      	nop
 8006c22:	3720      	adds	r7, #32
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}

08006c28 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b082      	sub	sp, #8
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006c30:	f000 fd52 	bl	80076d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006c34:	4b2a      	ldr	r3, [pc, #168]	@ (8006ce0 <prvAddNewTaskToReadyList+0xb8>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	3301      	adds	r3, #1
 8006c3a:	4a29      	ldr	r2, [pc, #164]	@ (8006ce0 <prvAddNewTaskToReadyList+0xb8>)
 8006c3c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006c3e:	4b29      	ldr	r3, [pc, #164]	@ (8006ce4 <prvAddNewTaskToReadyList+0xbc>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d109      	bne.n	8006c5a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006c46:	4a27      	ldr	r2, [pc, #156]	@ (8006ce4 <prvAddNewTaskToReadyList+0xbc>)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006c4c:	4b24      	ldr	r3, [pc, #144]	@ (8006ce0 <prvAddNewTaskToReadyList+0xb8>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d110      	bne.n	8006c76 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006c54:	f000 faea 	bl	800722c <prvInitialiseTaskLists>
 8006c58:	e00d      	b.n	8006c76 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006c5a:	4b23      	ldr	r3, [pc, #140]	@ (8006ce8 <prvAddNewTaskToReadyList+0xc0>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d109      	bne.n	8006c76 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006c62:	4b20      	ldr	r3, [pc, #128]	@ (8006ce4 <prvAddNewTaskToReadyList+0xbc>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d802      	bhi.n	8006c76 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006c70:	4a1c      	ldr	r2, [pc, #112]	@ (8006ce4 <prvAddNewTaskToReadyList+0xbc>)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006c76:	4b1d      	ldr	r3, [pc, #116]	@ (8006cec <prvAddNewTaskToReadyList+0xc4>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	3301      	adds	r3, #1
 8006c7c:	4a1b      	ldr	r2, [pc, #108]	@ (8006cec <prvAddNewTaskToReadyList+0xc4>)
 8006c7e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c84:	2201      	movs	r2, #1
 8006c86:	409a      	lsls	r2, r3
 8006c88:	4b19      	ldr	r3, [pc, #100]	@ (8006cf0 <prvAddNewTaskToReadyList+0xc8>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	4a18      	ldr	r2, [pc, #96]	@ (8006cf0 <prvAddNewTaskToReadyList+0xc8>)
 8006c90:	6013      	str	r3, [r2, #0]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c96:	4613      	mov	r3, r2
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	4413      	add	r3, r2
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	4a15      	ldr	r2, [pc, #84]	@ (8006cf4 <prvAddNewTaskToReadyList+0xcc>)
 8006ca0:	441a      	add	r2, r3
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	3304      	adds	r3, #4
 8006ca6:	4619      	mov	r1, r3
 8006ca8:	4610      	mov	r0, r2
 8006caa:	f7ff fe01 	bl	80068b0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006cae:	f000 fd45 	bl	800773c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8006ce8 <prvAddNewTaskToReadyList+0xc0>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d00e      	beq.n	8006cd8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006cba:	4b0a      	ldr	r3, [pc, #40]	@ (8006ce4 <prvAddNewTaskToReadyList+0xbc>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d207      	bcs.n	8006cd8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006cc8:	4b0b      	ldr	r3, [pc, #44]	@ (8006cf8 <prvAddNewTaskToReadyList+0xd0>)
 8006cca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cce:	601a      	str	r2, [r3, #0]
 8006cd0:	f3bf 8f4f 	dsb	sy
 8006cd4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006cd8:	bf00      	nop
 8006cda:	3708      	adds	r7, #8
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}
 8006ce0:	20000790 	.word	0x20000790
 8006ce4:	20000690 	.word	0x20000690
 8006ce8:	2000079c 	.word	0x2000079c
 8006cec:	200007ac 	.word	0x200007ac
 8006cf0:	20000798 	.word	0x20000798
 8006cf4:	20000694 	.word	0x20000694
 8006cf8:	e000ed04 	.word	0xe000ed04

08006cfc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b084      	sub	sp, #16
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006d04:	2300      	movs	r3, #0
 8006d06:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d018      	beq.n	8006d40 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006d0e:	4b14      	ldr	r3, [pc, #80]	@ (8006d60 <vTaskDelay+0x64>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d00b      	beq.n	8006d2e <vTaskDelay+0x32>
	__asm volatile
 8006d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d1a:	f383 8811 	msr	BASEPRI, r3
 8006d1e:	f3bf 8f6f 	isb	sy
 8006d22:	f3bf 8f4f 	dsb	sy
 8006d26:	60bb      	str	r3, [r7, #8]
}
 8006d28:	bf00      	nop
 8006d2a:	bf00      	nop
 8006d2c:	e7fd      	b.n	8006d2a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006d2e:	f000 f87d 	bl	8006e2c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006d32:	2100      	movs	r1, #0
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f000 fb37 	bl	80073a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006d3a:	f000 f885 	bl	8006e48 <xTaskResumeAll>
 8006d3e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d107      	bne.n	8006d56 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006d46:	4b07      	ldr	r3, [pc, #28]	@ (8006d64 <vTaskDelay+0x68>)
 8006d48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d4c:	601a      	str	r2, [r3, #0]
 8006d4e:	f3bf 8f4f 	dsb	sy
 8006d52:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006d56:	bf00      	nop
 8006d58:	3710      	adds	r7, #16
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}
 8006d5e:	bf00      	nop
 8006d60:	200007b8 	.word	0x200007b8
 8006d64:	e000ed04 	.word	0xe000ed04

08006d68 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b08a      	sub	sp, #40	@ 0x28
 8006d6c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006d72:	2300      	movs	r3, #0
 8006d74:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006d76:	463a      	mov	r2, r7
 8006d78:	1d39      	adds	r1, r7, #4
 8006d7a:	f107 0308 	add.w	r3, r7, #8
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f7fa f8a2 	bl	8000ec8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006d84:	6839      	ldr	r1, [r7, #0]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	68ba      	ldr	r2, [r7, #8]
 8006d8a:	9202      	str	r2, [sp, #8]
 8006d8c:	9301      	str	r3, [sp, #4]
 8006d8e:	2300      	movs	r3, #0
 8006d90:	9300      	str	r3, [sp, #0]
 8006d92:	2300      	movs	r3, #0
 8006d94:	460a      	mov	r2, r1
 8006d96:	491f      	ldr	r1, [pc, #124]	@ (8006e14 <vTaskStartScheduler+0xac>)
 8006d98:	481f      	ldr	r0, [pc, #124]	@ (8006e18 <vTaskStartScheduler+0xb0>)
 8006d9a:	f7ff fe10 	bl	80069be <xTaskCreateStatic>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	4a1e      	ldr	r2, [pc, #120]	@ (8006e1c <vTaskStartScheduler+0xb4>)
 8006da2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006da4:	4b1d      	ldr	r3, [pc, #116]	@ (8006e1c <vTaskStartScheduler+0xb4>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d002      	beq.n	8006db2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006dac:	2301      	movs	r3, #1
 8006dae:	617b      	str	r3, [r7, #20]
 8006db0:	e001      	b.n	8006db6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006db2:	2300      	movs	r3, #0
 8006db4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d116      	bne.n	8006dea <vTaskStartScheduler+0x82>
	__asm volatile
 8006dbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dc0:	f383 8811 	msr	BASEPRI, r3
 8006dc4:	f3bf 8f6f 	isb	sy
 8006dc8:	f3bf 8f4f 	dsb	sy
 8006dcc:	613b      	str	r3, [r7, #16]
}
 8006dce:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006dd0:	4b13      	ldr	r3, [pc, #76]	@ (8006e20 <vTaskStartScheduler+0xb8>)
 8006dd2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006dd6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006dd8:	4b12      	ldr	r3, [pc, #72]	@ (8006e24 <vTaskStartScheduler+0xbc>)
 8006dda:	2201      	movs	r2, #1
 8006ddc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006dde:	4b12      	ldr	r3, [pc, #72]	@ (8006e28 <vTaskStartScheduler+0xc0>)
 8006de0:	2200      	movs	r2, #0
 8006de2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006de4:	f000 fbd4 	bl	8007590 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006de8:	e00f      	b.n	8006e0a <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006df0:	d10b      	bne.n	8006e0a <vTaskStartScheduler+0xa2>
	__asm volatile
 8006df2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006df6:	f383 8811 	msr	BASEPRI, r3
 8006dfa:	f3bf 8f6f 	isb	sy
 8006dfe:	f3bf 8f4f 	dsb	sy
 8006e02:	60fb      	str	r3, [r7, #12]
}
 8006e04:	bf00      	nop
 8006e06:	bf00      	nop
 8006e08:	e7fd      	b.n	8006e06 <vTaskStartScheduler+0x9e>
}
 8006e0a:	bf00      	nop
 8006e0c:	3718      	adds	r7, #24
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
 8006e12:	bf00      	nop
 8006e14:	0800aa60 	.word	0x0800aa60
 8006e18:	080071fd 	.word	0x080071fd
 8006e1c:	200007b4 	.word	0x200007b4
 8006e20:	200007b0 	.word	0x200007b0
 8006e24:	2000079c 	.word	0x2000079c
 8006e28:	20000794 	.word	0x20000794

08006e2c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006e30:	4b04      	ldr	r3, [pc, #16]	@ (8006e44 <vTaskSuspendAll+0x18>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	3301      	adds	r3, #1
 8006e36:	4a03      	ldr	r2, [pc, #12]	@ (8006e44 <vTaskSuspendAll+0x18>)
 8006e38:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006e3a:	bf00      	nop
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr
 8006e44:	200007b8 	.word	0x200007b8

08006e48 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b084      	sub	sp, #16
 8006e4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006e52:	2300      	movs	r3, #0
 8006e54:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006e56:	4b42      	ldr	r3, [pc, #264]	@ (8006f60 <xTaskResumeAll+0x118>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d10b      	bne.n	8006e76 <xTaskResumeAll+0x2e>
	__asm volatile
 8006e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e62:	f383 8811 	msr	BASEPRI, r3
 8006e66:	f3bf 8f6f 	isb	sy
 8006e6a:	f3bf 8f4f 	dsb	sy
 8006e6e:	603b      	str	r3, [r7, #0]
}
 8006e70:	bf00      	nop
 8006e72:	bf00      	nop
 8006e74:	e7fd      	b.n	8006e72 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006e76:	f000 fc2f 	bl	80076d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006e7a:	4b39      	ldr	r3, [pc, #228]	@ (8006f60 <xTaskResumeAll+0x118>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	3b01      	subs	r3, #1
 8006e80:	4a37      	ldr	r2, [pc, #220]	@ (8006f60 <xTaskResumeAll+0x118>)
 8006e82:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e84:	4b36      	ldr	r3, [pc, #216]	@ (8006f60 <xTaskResumeAll+0x118>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d161      	bne.n	8006f50 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006e8c:	4b35      	ldr	r3, [pc, #212]	@ (8006f64 <xTaskResumeAll+0x11c>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d05d      	beq.n	8006f50 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006e94:	e02e      	b.n	8006ef4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e96:	4b34      	ldr	r3, [pc, #208]	@ (8006f68 <xTaskResumeAll+0x120>)
 8006e98:	68db      	ldr	r3, [r3, #12]
 8006e9a:	68db      	ldr	r3, [r3, #12]
 8006e9c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	3318      	adds	r3, #24
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f7ff fd61 	bl	800696a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	3304      	adds	r3, #4
 8006eac:	4618      	mov	r0, r3
 8006eae:	f7ff fd5c 	bl	800696a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	409a      	lsls	r2, r3
 8006eba:	4b2c      	ldr	r3, [pc, #176]	@ (8006f6c <xTaskResumeAll+0x124>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	4a2a      	ldr	r2, [pc, #168]	@ (8006f6c <xTaskResumeAll+0x124>)
 8006ec2:	6013      	str	r3, [r2, #0]
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ec8:	4613      	mov	r3, r2
 8006eca:	009b      	lsls	r3, r3, #2
 8006ecc:	4413      	add	r3, r2
 8006ece:	009b      	lsls	r3, r3, #2
 8006ed0:	4a27      	ldr	r2, [pc, #156]	@ (8006f70 <xTaskResumeAll+0x128>)
 8006ed2:	441a      	add	r2, r3
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	3304      	adds	r3, #4
 8006ed8:	4619      	mov	r1, r3
 8006eda:	4610      	mov	r0, r2
 8006edc:	f7ff fce8 	bl	80068b0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ee4:	4b23      	ldr	r3, [pc, #140]	@ (8006f74 <xTaskResumeAll+0x12c>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d302      	bcc.n	8006ef4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006eee:	4b22      	ldr	r3, [pc, #136]	@ (8006f78 <xTaskResumeAll+0x130>)
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ef4:	4b1c      	ldr	r3, [pc, #112]	@ (8006f68 <xTaskResumeAll+0x120>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d1cc      	bne.n	8006e96 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d001      	beq.n	8006f06 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006f02:	f000 fa31 	bl	8007368 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006f06:	4b1d      	ldr	r3, [pc, #116]	@ (8006f7c <xTaskResumeAll+0x134>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d010      	beq.n	8006f34 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006f12:	f000 f837 	bl	8006f84 <xTaskIncrementTick>
 8006f16:	4603      	mov	r3, r0
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d002      	beq.n	8006f22 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006f1c:	4b16      	ldr	r3, [pc, #88]	@ (8006f78 <xTaskResumeAll+0x130>)
 8006f1e:	2201      	movs	r2, #1
 8006f20:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	3b01      	subs	r3, #1
 8006f26:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d1f1      	bne.n	8006f12 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006f2e:	4b13      	ldr	r3, [pc, #76]	@ (8006f7c <xTaskResumeAll+0x134>)
 8006f30:	2200      	movs	r2, #0
 8006f32:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006f34:	4b10      	ldr	r3, [pc, #64]	@ (8006f78 <xTaskResumeAll+0x130>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d009      	beq.n	8006f50 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006f40:	4b0f      	ldr	r3, [pc, #60]	@ (8006f80 <xTaskResumeAll+0x138>)
 8006f42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f46:	601a      	str	r2, [r3, #0]
 8006f48:	f3bf 8f4f 	dsb	sy
 8006f4c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f50:	f000 fbf4 	bl	800773c <vPortExitCritical>

	return xAlreadyYielded;
 8006f54:	68bb      	ldr	r3, [r7, #8]
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3710      	adds	r7, #16
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}
 8006f5e:	bf00      	nop
 8006f60:	200007b8 	.word	0x200007b8
 8006f64:	20000790 	.word	0x20000790
 8006f68:	20000750 	.word	0x20000750
 8006f6c:	20000798 	.word	0x20000798
 8006f70:	20000694 	.word	0x20000694
 8006f74:	20000690 	.word	0x20000690
 8006f78:	200007a4 	.word	0x200007a4
 8006f7c:	200007a0 	.word	0x200007a0
 8006f80:	e000ed04 	.word	0xe000ed04

08006f84 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b086      	sub	sp, #24
 8006f88:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f8e:	4b4f      	ldr	r3, [pc, #316]	@ (80070cc <xTaskIncrementTick+0x148>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	f040 808f 	bne.w	80070b6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006f98:	4b4d      	ldr	r3, [pc, #308]	@ (80070d0 <xTaskIncrementTick+0x14c>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	3301      	adds	r3, #1
 8006f9e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006fa0:	4a4b      	ldr	r2, [pc, #300]	@ (80070d0 <xTaskIncrementTick+0x14c>)
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d121      	bne.n	8006ff0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006fac:	4b49      	ldr	r3, [pc, #292]	@ (80070d4 <xTaskIncrementTick+0x150>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d00b      	beq.n	8006fce <xTaskIncrementTick+0x4a>
	__asm volatile
 8006fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fba:	f383 8811 	msr	BASEPRI, r3
 8006fbe:	f3bf 8f6f 	isb	sy
 8006fc2:	f3bf 8f4f 	dsb	sy
 8006fc6:	603b      	str	r3, [r7, #0]
}
 8006fc8:	bf00      	nop
 8006fca:	bf00      	nop
 8006fcc:	e7fd      	b.n	8006fca <xTaskIncrementTick+0x46>
 8006fce:	4b41      	ldr	r3, [pc, #260]	@ (80070d4 <xTaskIncrementTick+0x150>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	60fb      	str	r3, [r7, #12]
 8006fd4:	4b40      	ldr	r3, [pc, #256]	@ (80070d8 <xTaskIncrementTick+0x154>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a3e      	ldr	r2, [pc, #248]	@ (80070d4 <xTaskIncrementTick+0x150>)
 8006fda:	6013      	str	r3, [r2, #0]
 8006fdc:	4a3e      	ldr	r2, [pc, #248]	@ (80070d8 <xTaskIncrementTick+0x154>)
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	6013      	str	r3, [r2, #0]
 8006fe2:	4b3e      	ldr	r3, [pc, #248]	@ (80070dc <xTaskIncrementTick+0x158>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	4a3c      	ldr	r2, [pc, #240]	@ (80070dc <xTaskIncrementTick+0x158>)
 8006fea:	6013      	str	r3, [r2, #0]
 8006fec:	f000 f9bc 	bl	8007368 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006ff0:	4b3b      	ldr	r3, [pc, #236]	@ (80070e0 <xTaskIncrementTick+0x15c>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	693a      	ldr	r2, [r7, #16]
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d348      	bcc.n	800708c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ffa:	4b36      	ldr	r3, [pc, #216]	@ (80070d4 <xTaskIncrementTick+0x150>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d104      	bne.n	800700e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007004:	4b36      	ldr	r3, [pc, #216]	@ (80070e0 <xTaskIncrementTick+0x15c>)
 8007006:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800700a:	601a      	str	r2, [r3, #0]
					break;
 800700c:	e03e      	b.n	800708c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800700e:	4b31      	ldr	r3, [pc, #196]	@ (80070d4 <xTaskIncrementTick+0x150>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	68db      	ldr	r3, [r3, #12]
 8007014:	68db      	ldr	r3, [r3, #12]
 8007016:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800701e:	693a      	ldr	r2, [r7, #16]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	429a      	cmp	r2, r3
 8007024:	d203      	bcs.n	800702e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007026:	4a2e      	ldr	r2, [pc, #184]	@ (80070e0 <xTaskIncrementTick+0x15c>)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800702c:	e02e      	b.n	800708c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	3304      	adds	r3, #4
 8007032:	4618      	mov	r0, r3
 8007034:	f7ff fc99 	bl	800696a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800703c:	2b00      	cmp	r3, #0
 800703e:	d004      	beq.n	800704a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	3318      	adds	r3, #24
 8007044:	4618      	mov	r0, r3
 8007046:	f7ff fc90 	bl	800696a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800704e:	2201      	movs	r2, #1
 8007050:	409a      	lsls	r2, r3
 8007052:	4b24      	ldr	r3, [pc, #144]	@ (80070e4 <xTaskIncrementTick+0x160>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4313      	orrs	r3, r2
 8007058:	4a22      	ldr	r2, [pc, #136]	@ (80070e4 <xTaskIncrementTick+0x160>)
 800705a:	6013      	str	r3, [r2, #0]
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007060:	4613      	mov	r3, r2
 8007062:	009b      	lsls	r3, r3, #2
 8007064:	4413      	add	r3, r2
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	4a1f      	ldr	r2, [pc, #124]	@ (80070e8 <xTaskIncrementTick+0x164>)
 800706a:	441a      	add	r2, r3
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	3304      	adds	r3, #4
 8007070:	4619      	mov	r1, r3
 8007072:	4610      	mov	r0, r2
 8007074:	f7ff fc1c 	bl	80068b0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800707c:	4b1b      	ldr	r3, [pc, #108]	@ (80070ec <xTaskIncrementTick+0x168>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007082:	429a      	cmp	r2, r3
 8007084:	d3b9      	bcc.n	8006ffa <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007086:	2301      	movs	r3, #1
 8007088:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800708a:	e7b6      	b.n	8006ffa <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800708c:	4b17      	ldr	r3, [pc, #92]	@ (80070ec <xTaskIncrementTick+0x168>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007092:	4915      	ldr	r1, [pc, #84]	@ (80070e8 <xTaskIncrementTick+0x164>)
 8007094:	4613      	mov	r3, r2
 8007096:	009b      	lsls	r3, r3, #2
 8007098:	4413      	add	r3, r2
 800709a:	009b      	lsls	r3, r3, #2
 800709c:	440b      	add	r3, r1
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	d901      	bls.n	80070a8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80070a4:	2301      	movs	r3, #1
 80070a6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80070a8:	4b11      	ldr	r3, [pc, #68]	@ (80070f0 <xTaskIncrementTick+0x16c>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d007      	beq.n	80070c0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80070b0:	2301      	movs	r3, #1
 80070b2:	617b      	str	r3, [r7, #20]
 80070b4:	e004      	b.n	80070c0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80070b6:	4b0f      	ldr	r3, [pc, #60]	@ (80070f4 <xTaskIncrementTick+0x170>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	3301      	adds	r3, #1
 80070bc:	4a0d      	ldr	r2, [pc, #52]	@ (80070f4 <xTaskIncrementTick+0x170>)
 80070be:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80070c0:	697b      	ldr	r3, [r7, #20]
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3718      	adds	r7, #24
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}
 80070ca:	bf00      	nop
 80070cc:	200007b8 	.word	0x200007b8
 80070d0:	20000794 	.word	0x20000794
 80070d4:	20000748 	.word	0x20000748
 80070d8:	2000074c 	.word	0x2000074c
 80070dc:	200007a8 	.word	0x200007a8
 80070e0:	200007b0 	.word	0x200007b0
 80070e4:	20000798 	.word	0x20000798
 80070e8:	20000694 	.word	0x20000694
 80070ec:	20000690 	.word	0x20000690
 80070f0:	200007a4 	.word	0x200007a4
 80070f4:	200007a0 	.word	0x200007a0

080070f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b088      	sub	sp, #32
 80070fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80070fe:	4b3a      	ldr	r3, [pc, #232]	@ (80071e8 <vTaskSwitchContext+0xf0>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d003      	beq.n	800710e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007106:	4b39      	ldr	r3, [pc, #228]	@ (80071ec <vTaskSwitchContext+0xf4>)
 8007108:	2201      	movs	r2, #1
 800710a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800710c:	e067      	b.n	80071de <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 800710e:	4b37      	ldr	r3, [pc, #220]	@ (80071ec <vTaskSwitchContext+0xf4>)
 8007110:	2200      	movs	r2, #0
 8007112:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8007114:	4b36      	ldr	r3, [pc, #216]	@ (80071f0 <vTaskSwitchContext+0xf8>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800711a:	61fb      	str	r3, [r7, #28]
 800711c:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 8007120:	61bb      	str	r3, [r7, #24]
 8007122:	69fb      	ldr	r3, [r7, #28]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	69ba      	ldr	r2, [r7, #24]
 8007128:	429a      	cmp	r2, r3
 800712a:	d111      	bne.n	8007150 <vTaskSwitchContext+0x58>
 800712c:	69fb      	ldr	r3, [r7, #28]
 800712e:	3304      	adds	r3, #4
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	69ba      	ldr	r2, [r7, #24]
 8007134:	429a      	cmp	r2, r3
 8007136:	d10b      	bne.n	8007150 <vTaskSwitchContext+0x58>
 8007138:	69fb      	ldr	r3, [r7, #28]
 800713a:	3308      	adds	r3, #8
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	69ba      	ldr	r2, [r7, #24]
 8007140:	429a      	cmp	r2, r3
 8007142:	d105      	bne.n	8007150 <vTaskSwitchContext+0x58>
 8007144:	69fb      	ldr	r3, [r7, #28]
 8007146:	330c      	adds	r3, #12
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	69ba      	ldr	r2, [r7, #24]
 800714c:	429a      	cmp	r2, r3
 800714e:	d008      	beq.n	8007162 <vTaskSwitchContext+0x6a>
 8007150:	4b27      	ldr	r3, [pc, #156]	@ (80071f0 <vTaskSwitchContext+0xf8>)
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	4b26      	ldr	r3, [pc, #152]	@ (80071f0 <vTaskSwitchContext+0xf8>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	3334      	adds	r3, #52	@ 0x34
 800715a:	4619      	mov	r1, r3
 800715c:	4610      	mov	r0, r2
 800715e:	f7fa f951 	bl	8001404 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007162:	4b24      	ldr	r3, [pc, #144]	@ (80071f4 <vTaskSwitchContext+0xfc>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	fab3 f383 	clz	r3, r3
 800716e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007170:	7afb      	ldrb	r3, [r7, #11]
 8007172:	f1c3 031f 	rsb	r3, r3, #31
 8007176:	617b      	str	r3, [r7, #20]
 8007178:	491f      	ldr	r1, [pc, #124]	@ (80071f8 <vTaskSwitchContext+0x100>)
 800717a:	697a      	ldr	r2, [r7, #20]
 800717c:	4613      	mov	r3, r2
 800717e:	009b      	lsls	r3, r3, #2
 8007180:	4413      	add	r3, r2
 8007182:	009b      	lsls	r3, r3, #2
 8007184:	440b      	add	r3, r1
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d10b      	bne.n	80071a4 <vTaskSwitchContext+0xac>
	__asm volatile
 800718c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007190:	f383 8811 	msr	BASEPRI, r3
 8007194:	f3bf 8f6f 	isb	sy
 8007198:	f3bf 8f4f 	dsb	sy
 800719c:	607b      	str	r3, [r7, #4]
}
 800719e:	bf00      	nop
 80071a0:	bf00      	nop
 80071a2:	e7fd      	b.n	80071a0 <vTaskSwitchContext+0xa8>
 80071a4:	697a      	ldr	r2, [r7, #20]
 80071a6:	4613      	mov	r3, r2
 80071a8:	009b      	lsls	r3, r3, #2
 80071aa:	4413      	add	r3, r2
 80071ac:	009b      	lsls	r3, r3, #2
 80071ae:	4a12      	ldr	r2, [pc, #72]	@ (80071f8 <vTaskSwitchContext+0x100>)
 80071b0:	4413      	add	r3, r2
 80071b2:	613b      	str	r3, [r7, #16]
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	685a      	ldr	r2, [r3, #4]
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	605a      	str	r2, [r3, #4]
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	685a      	ldr	r2, [r3, #4]
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	3308      	adds	r3, #8
 80071c6:	429a      	cmp	r2, r3
 80071c8:	d104      	bne.n	80071d4 <vTaskSwitchContext+0xdc>
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	685a      	ldr	r2, [r3, #4]
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	605a      	str	r2, [r3, #4]
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	68db      	ldr	r3, [r3, #12]
 80071da:	4a05      	ldr	r2, [pc, #20]	@ (80071f0 <vTaskSwitchContext+0xf8>)
 80071dc:	6013      	str	r3, [r2, #0]
}
 80071de:	bf00      	nop
 80071e0:	3720      	adds	r7, #32
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
 80071e6:	bf00      	nop
 80071e8:	200007b8 	.word	0x200007b8
 80071ec:	200007a4 	.word	0x200007a4
 80071f0:	20000690 	.word	0x20000690
 80071f4:	20000798 	.word	0x20000798
 80071f8:	20000694 	.word	0x20000694

080071fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b082      	sub	sp, #8
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007204:	f000 f852 	bl	80072ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007208:	4b06      	ldr	r3, [pc, #24]	@ (8007224 <prvIdleTask+0x28>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	2b01      	cmp	r3, #1
 800720e:	d9f9      	bls.n	8007204 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007210:	4b05      	ldr	r3, [pc, #20]	@ (8007228 <prvIdleTask+0x2c>)
 8007212:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007216:	601a      	str	r2, [r3, #0]
 8007218:	f3bf 8f4f 	dsb	sy
 800721c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007220:	e7f0      	b.n	8007204 <prvIdleTask+0x8>
 8007222:	bf00      	nop
 8007224:	20000694 	.word	0x20000694
 8007228:	e000ed04 	.word	0xe000ed04

0800722c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b082      	sub	sp, #8
 8007230:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007232:	2300      	movs	r3, #0
 8007234:	607b      	str	r3, [r7, #4]
 8007236:	e00c      	b.n	8007252 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	4613      	mov	r3, r2
 800723c:	009b      	lsls	r3, r3, #2
 800723e:	4413      	add	r3, r2
 8007240:	009b      	lsls	r3, r3, #2
 8007242:	4a12      	ldr	r2, [pc, #72]	@ (800728c <prvInitialiseTaskLists+0x60>)
 8007244:	4413      	add	r3, r2
 8007246:	4618      	mov	r0, r3
 8007248:	f7ff fb05 	bl	8006856 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	3301      	adds	r3, #1
 8007250:	607b      	str	r3, [r7, #4]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2b06      	cmp	r3, #6
 8007256:	d9ef      	bls.n	8007238 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007258:	480d      	ldr	r0, [pc, #52]	@ (8007290 <prvInitialiseTaskLists+0x64>)
 800725a:	f7ff fafc 	bl	8006856 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800725e:	480d      	ldr	r0, [pc, #52]	@ (8007294 <prvInitialiseTaskLists+0x68>)
 8007260:	f7ff faf9 	bl	8006856 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007264:	480c      	ldr	r0, [pc, #48]	@ (8007298 <prvInitialiseTaskLists+0x6c>)
 8007266:	f7ff faf6 	bl	8006856 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800726a:	480c      	ldr	r0, [pc, #48]	@ (800729c <prvInitialiseTaskLists+0x70>)
 800726c:	f7ff faf3 	bl	8006856 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007270:	480b      	ldr	r0, [pc, #44]	@ (80072a0 <prvInitialiseTaskLists+0x74>)
 8007272:	f7ff faf0 	bl	8006856 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007276:	4b0b      	ldr	r3, [pc, #44]	@ (80072a4 <prvInitialiseTaskLists+0x78>)
 8007278:	4a05      	ldr	r2, [pc, #20]	@ (8007290 <prvInitialiseTaskLists+0x64>)
 800727a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800727c:	4b0a      	ldr	r3, [pc, #40]	@ (80072a8 <prvInitialiseTaskLists+0x7c>)
 800727e:	4a05      	ldr	r2, [pc, #20]	@ (8007294 <prvInitialiseTaskLists+0x68>)
 8007280:	601a      	str	r2, [r3, #0]
}
 8007282:	bf00      	nop
 8007284:	3708      	adds	r7, #8
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
 800728a:	bf00      	nop
 800728c:	20000694 	.word	0x20000694
 8007290:	20000720 	.word	0x20000720
 8007294:	20000734 	.word	0x20000734
 8007298:	20000750 	.word	0x20000750
 800729c:	20000764 	.word	0x20000764
 80072a0:	2000077c 	.word	0x2000077c
 80072a4:	20000748 	.word	0x20000748
 80072a8:	2000074c 	.word	0x2000074c

080072ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b082      	sub	sp, #8
 80072b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80072b2:	e019      	b.n	80072e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80072b4:	f000 fa10 	bl	80076d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072b8:	4b10      	ldr	r3, [pc, #64]	@ (80072fc <prvCheckTasksWaitingTermination+0x50>)
 80072ba:	68db      	ldr	r3, [r3, #12]
 80072bc:	68db      	ldr	r3, [r3, #12]
 80072be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	3304      	adds	r3, #4
 80072c4:	4618      	mov	r0, r3
 80072c6:	f7ff fb50 	bl	800696a <uxListRemove>
				--uxCurrentNumberOfTasks;
 80072ca:	4b0d      	ldr	r3, [pc, #52]	@ (8007300 <prvCheckTasksWaitingTermination+0x54>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	3b01      	subs	r3, #1
 80072d0:	4a0b      	ldr	r2, [pc, #44]	@ (8007300 <prvCheckTasksWaitingTermination+0x54>)
 80072d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80072d4:	4b0b      	ldr	r3, [pc, #44]	@ (8007304 <prvCheckTasksWaitingTermination+0x58>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	3b01      	subs	r3, #1
 80072da:	4a0a      	ldr	r2, [pc, #40]	@ (8007304 <prvCheckTasksWaitingTermination+0x58>)
 80072dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80072de:	f000 fa2d 	bl	800773c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 f810 	bl	8007308 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80072e8:	4b06      	ldr	r3, [pc, #24]	@ (8007304 <prvCheckTasksWaitingTermination+0x58>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d1e1      	bne.n	80072b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80072f0:	bf00      	nop
 80072f2:	bf00      	nop
 80072f4:	3708      	adds	r7, #8
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
 80072fa:	bf00      	nop
 80072fc:	20000764 	.word	0x20000764
 8007300:	20000790 	.word	0x20000790
 8007304:	20000778 	.word	0x20000778

08007308 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007308:	b580      	push	{r7, lr}
 800730a:	b084      	sub	sp, #16
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007316:	2b00      	cmp	r3, #0
 8007318:	d108      	bne.n	800732c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800731e:	4618      	mov	r0, r3
 8007320:	f000 fb88 	bl	8007a34 <vPortFree>
				vPortFree( pxTCB );
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f000 fb85 	bl	8007a34 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800732a:	e019      	b.n	8007360 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007332:	2b01      	cmp	r3, #1
 8007334:	d103      	bne.n	800733e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 fb7c 	bl	8007a34 <vPortFree>
	}
 800733c:	e010      	b.n	8007360 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007344:	2b02      	cmp	r3, #2
 8007346:	d00b      	beq.n	8007360 <prvDeleteTCB+0x58>
	__asm volatile
 8007348:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800734c:	f383 8811 	msr	BASEPRI, r3
 8007350:	f3bf 8f6f 	isb	sy
 8007354:	f3bf 8f4f 	dsb	sy
 8007358:	60fb      	str	r3, [r7, #12]
}
 800735a:	bf00      	nop
 800735c:	bf00      	nop
 800735e:	e7fd      	b.n	800735c <prvDeleteTCB+0x54>
	}
 8007360:	bf00      	nop
 8007362:	3710      	adds	r7, #16
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007368:	b480      	push	{r7}
 800736a:	b083      	sub	sp, #12
 800736c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800736e:	4b0c      	ldr	r3, [pc, #48]	@ (80073a0 <prvResetNextTaskUnblockTime+0x38>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d104      	bne.n	8007382 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007378:	4b0a      	ldr	r3, [pc, #40]	@ (80073a4 <prvResetNextTaskUnblockTime+0x3c>)
 800737a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800737e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007380:	e008      	b.n	8007394 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007382:	4b07      	ldr	r3, [pc, #28]	@ (80073a0 <prvResetNextTaskUnblockTime+0x38>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	68db      	ldr	r3, [r3, #12]
 8007388:	68db      	ldr	r3, [r3, #12]
 800738a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	4a04      	ldr	r2, [pc, #16]	@ (80073a4 <prvResetNextTaskUnblockTime+0x3c>)
 8007392:	6013      	str	r3, [r2, #0]
}
 8007394:	bf00      	nop
 8007396:	370c      	adds	r7, #12
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr
 80073a0:	20000748 	.word	0x20000748
 80073a4:	200007b0 	.word	0x200007b0

080073a8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b084      	sub	sp, #16
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80073b2:	4b29      	ldr	r3, [pc, #164]	@ (8007458 <prvAddCurrentTaskToDelayedList+0xb0>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073b8:	4b28      	ldr	r3, [pc, #160]	@ (800745c <prvAddCurrentTaskToDelayedList+0xb4>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	3304      	adds	r3, #4
 80073be:	4618      	mov	r0, r3
 80073c0:	f7ff fad3 	bl	800696a <uxListRemove>
 80073c4:	4603      	mov	r3, r0
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d10b      	bne.n	80073e2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80073ca:	4b24      	ldr	r3, [pc, #144]	@ (800745c <prvAddCurrentTaskToDelayedList+0xb4>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073d0:	2201      	movs	r2, #1
 80073d2:	fa02 f303 	lsl.w	r3, r2, r3
 80073d6:	43da      	mvns	r2, r3
 80073d8:	4b21      	ldr	r3, [pc, #132]	@ (8007460 <prvAddCurrentTaskToDelayedList+0xb8>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4013      	ands	r3, r2
 80073de:	4a20      	ldr	r2, [pc, #128]	@ (8007460 <prvAddCurrentTaskToDelayedList+0xb8>)
 80073e0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80073e8:	d10a      	bne.n	8007400 <prvAddCurrentTaskToDelayedList+0x58>
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d007      	beq.n	8007400 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073f0:	4b1a      	ldr	r3, [pc, #104]	@ (800745c <prvAddCurrentTaskToDelayedList+0xb4>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	3304      	adds	r3, #4
 80073f6:	4619      	mov	r1, r3
 80073f8:	481a      	ldr	r0, [pc, #104]	@ (8007464 <prvAddCurrentTaskToDelayedList+0xbc>)
 80073fa:	f7ff fa59 	bl	80068b0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80073fe:	e026      	b.n	800744e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007400:	68fa      	ldr	r2, [r7, #12]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	4413      	add	r3, r2
 8007406:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007408:	4b14      	ldr	r3, [pc, #80]	@ (800745c <prvAddCurrentTaskToDelayedList+0xb4>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	68ba      	ldr	r2, [r7, #8]
 800740e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007410:	68ba      	ldr	r2, [r7, #8]
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	429a      	cmp	r2, r3
 8007416:	d209      	bcs.n	800742c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007418:	4b13      	ldr	r3, [pc, #76]	@ (8007468 <prvAddCurrentTaskToDelayedList+0xc0>)
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	4b0f      	ldr	r3, [pc, #60]	@ (800745c <prvAddCurrentTaskToDelayedList+0xb4>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	3304      	adds	r3, #4
 8007422:	4619      	mov	r1, r3
 8007424:	4610      	mov	r0, r2
 8007426:	f7ff fa67 	bl	80068f8 <vListInsert>
}
 800742a:	e010      	b.n	800744e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800742c:	4b0f      	ldr	r3, [pc, #60]	@ (800746c <prvAddCurrentTaskToDelayedList+0xc4>)
 800742e:	681a      	ldr	r2, [r3, #0]
 8007430:	4b0a      	ldr	r3, [pc, #40]	@ (800745c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	3304      	adds	r3, #4
 8007436:	4619      	mov	r1, r3
 8007438:	4610      	mov	r0, r2
 800743a:	f7ff fa5d 	bl	80068f8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800743e:	4b0c      	ldr	r3, [pc, #48]	@ (8007470 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	68ba      	ldr	r2, [r7, #8]
 8007444:	429a      	cmp	r2, r3
 8007446:	d202      	bcs.n	800744e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007448:	4a09      	ldr	r2, [pc, #36]	@ (8007470 <prvAddCurrentTaskToDelayedList+0xc8>)
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	6013      	str	r3, [r2, #0]
}
 800744e:	bf00      	nop
 8007450:	3710      	adds	r7, #16
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
 8007456:	bf00      	nop
 8007458:	20000794 	.word	0x20000794
 800745c:	20000690 	.word	0x20000690
 8007460:	20000798 	.word	0x20000798
 8007464:	2000077c 	.word	0x2000077c
 8007468:	2000074c 	.word	0x2000074c
 800746c:	20000748 	.word	0x20000748
 8007470:	200007b0 	.word	0x200007b0

08007474 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007474:	b480      	push	{r7}
 8007476:	b085      	sub	sp, #20
 8007478:	af00      	add	r7, sp, #0
 800747a:	60f8      	str	r0, [r7, #12]
 800747c:	60b9      	str	r1, [r7, #8]
 800747e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	3b04      	subs	r3, #4
 8007484:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800748c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	3b04      	subs	r3, #4
 8007492:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	f023 0201 	bic.w	r2, r3, #1
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	3b04      	subs	r3, #4
 80074a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80074a4:	4a0c      	ldr	r2, [pc, #48]	@ (80074d8 <pxPortInitialiseStack+0x64>)
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	3b14      	subs	r3, #20
 80074ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80074b0:	687a      	ldr	r2, [r7, #4]
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	3b04      	subs	r3, #4
 80074ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f06f 0202 	mvn.w	r2, #2
 80074c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	3b20      	subs	r3, #32
 80074c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80074ca:	68fb      	ldr	r3, [r7, #12]
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3714      	adds	r7, #20
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr
 80074d8:	080074dd 	.word	0x080074dd

080074dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80074dc:	b480      	push	{r7}
 80074de:	b085      	sub	sp, #20
 80074e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80074e2:	2300      	movs	r3, #0
 80074e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80074e6:	4b13      	ldr	r3, [pc, #76]	@ (8007534 <prvTaskExitError+0x58>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80074ee:	d00b      	beq.n	8007508 <prvTaskExitError+0x2c>
	__asm volatile
 80074f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074f4:	f383 8811 	msr	BASEPRI, r3
 80074f8:	f3bf 8f6f 	isb	sy
 80074fc:	f3bf 8f4f 	dsb	sy
 8007500:	60fb      	str	r3, [r7, #12]
}
 8007502:	bf00      	nop
 8007504:	bf00      	nop
 8007506:	e7fd      	b.n	8007504 <prvTaskExitError+0x28>
	__asm volatile
 8007508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800750c:	f383 8811 	msr	BASEPRI, r3
 8007510:	f3bf 8f6f 	isb	sy
 8007514:	f3bf 8f4f 	dsb	sy
 8007518:	60bb      	str	r3, [r7, #8]
}
 800751a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800751c:	bf00      	nop
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d0fc      	beq.n	800751e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007524:	bf00      	nop
 8007526:	bf00      	nop
 8007528:	3714      	adds	r7, #20
 800752a:	46bd      	mov	sp, r7
 800752c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007530:	4770      	bx	lr
 8007532:	bf00      	nop
 8007534:	2000008c 	.word	0x2000008c
	...

08007540 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007540:	4b07      	ldr	r3, [pc, #28]	@ (8007560 <pxCurrentTCBConst2>)
 8007542:	6819      	ldr	r1, [r3, #0]
 8007544:	6808      	ldr	r0, [r1, #0]
 8007546:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800754a:	f380 8809 	msr	PSP, r0
 800754e:	f3bf 8f6f 	isb	sy
 8007552:	f04f 0000 	mov.w	r0, #0
 8007556:	f380 8811 	msr	BASEPRI, r0
 800755a:	4770      	bx	lr
 800755c:	f3af 8000 	nop.w

08007560 <pxCurrentTCBConst2>:
 8007560:	20000690 	.word	0x20000690
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007564:	bf00      	nop
 8007566:	bf00      	nop

08007568 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007568:	4808      	ldr	r0, [pc, #32]	@ (800758c <prvPortStartFirstTask+0x24>)
 800756a:	6800      	ldr	r0, [r0, #0]
 800756c:	6800      	ldr	r0, [r0, #0]
 800756e:	f380 8808 	msr	MSP, r0
 8007572:	f04f 0000 	mov.w	r0, #0
 8007576:	f380 8814 	msr	CONTROL, r0
 800757a:	b662      	cpsie	i
 800757c:	b661      	cpsie	f
 800757e:	f3bf 8f4f 	dsb	sy
 8007582:	f3bf 8f6f 	isb	sy
 8007586:	df00      	svc	0
 8007588:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800758a:	bf00      	nop
 800758c:	e000ed08 	.word	0xe000ed08

08007590 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b086      	sub	sp, #24
 8007594:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007596:	4b47      	ldr	r3, [pc, #284]	@ (80076b4 <xPortStartScheduler+0x124>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a47      	ldr	r2, [pc, #284]	@ (80076b8 <xPortStartScheduler+0x128>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d10b      	bne.n	80075b8 <xPortStartScheduler+0x28>
	__asm volatile
 80075a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075a4:	f383 8811 	msr	BASEPRI, r3
 80075a8:	f3bf 8f6f 	isb	sy
 80075ac:	f3bf 8f4f 	dsb	sy
 80075b0:	613b      	str	r3, [r7, #16]
}
 80075b2:	bf00      	nop
 80075b4:	bf00      	nop
 80075b6:	e7fd      	b.n	80075b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80075b8:	4b3e      	ldr	r3, [pc, #248]	@ (80076b4 <xPortStartScheduler+0x124>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a3f      	ldr	r2, [pc, #252]	@ (80076bc <xPortStartScheduler+0x12c>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d10b      	bne.n	80075da <xPortStartScheduler+0x4a>
	__asm volatile
 80075c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075c6:	f383 8811 	msr	BASEPRI, r3
 80075ca:	f3bf 8f6f 	isb	sy
 80075ce:	f3bf 8f4f 	dsb	sy
 80075d2:	60fb      	str	r3, [r7, #12]
}
 80075d4:	bf00      	nop
 80075d6:	bf00      	nop
 80075d8:	e7fd      	b.n	80075d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80075da:	4b39      	ldr	r3, [pc, #228]	@ (80076c0 <xPortStartScheduler+0x130>)
 80075dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	22ff      	movs	r2, #255	@ 0xff
 80075ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	781b      	ldrb	r3, [r3, #0]
 80075f0:	b2db      	uxtb	r3, r3
 80075f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80075f4:	78fb      	ldrb	r3, [r7, #3]
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80075fc:	b2da      	uxtb	r2, r3
 80075fe:	4b31      	ldr	r3, [pc, #196]	@ (80076c4 <xPortStartScheduler+0x134>)
 8007600:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007602:	4b31      	ldr	r3, [pc, #196]	@ (80076c8 <xPortStartScheduler+0x138>)
 8007604:	2207      	movs	r2, #7
 8007606:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007608:	e009      	b.n	800761e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800760a:	4b2f      	ldr	r3, [pc, #188]	@ (80076c8 <xPortStartScheduler+0x138>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	3b01      	subs	r3, #1
 8007610:	4a2d      	ldr	r2, [pc, #180]	@ (80076c8 <xPortStartScheduler+0x138>)
 8007612:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007614:	78fb      	ldrb	r3, [r7, #3]
 8007616:	b2db      	uxtb	r3, r3
 8007618:	005b      	lsls	r3, r3, #1
 800761a:	b2db      	uxtb	r3, r3
 800761c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800761e:	78fb      	ldrb	r3, [r7, #3]
 8007620:	b2db      	uxtb	r3, r3
 8007622:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007626:	2b80      	cmp	r3, #128	@ 0x80
 8007628:	d0ef      	beq.n	800760a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800762a:	4b27      	ldr	r3, [pc, #156]	@ (80076c8 <xPortStartScheduler+0x138>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f1c3 0307 	rsb	r3, r3, #7
 8007632:	2b04      	cmp	r3, #4
 8007634:	d00b      	beq.n	800764e <xPortStartScheduler+0xbe>
	__asm volatile
 8007636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800763a:	f383 8811 	msr	BASEPRI, r3
 800763e:	f3bf 8f6f 	isb	sy
 8007642:	f3bf 8f4f 	dsb	sy
 8007646:	60bb      	str	r3, [r7, #8]
}
 8007648:	bf00      	nop
 800764a:	bf00      	nop
 800764c:	e7fd      	b.n	800764a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800764e:	4b1e      	ldr	r3, [pc, #120]	@ (80076c8 <xPortStartScheduler+0x138>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	021b      	lsls	r3, r3, #8
 8007654:	4a1c      	ldr	r2, [pc, #112]	@ (80076c8 <xPortStartScheduler+0x138>)
 8007656:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007658:	4b1b      	ldr	r3, [pc, #108]	@ (80076c8 <xPortStartScheduler+0x138>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007660:	4a19      	ldr	r2, [pc, #100]	@ (80076c8 <xPortStartScheduler+0x138>)
 8007662:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	b2da      	uxtb	r2, r3
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800766c:	4b17      	ldr	r3, [pc, #92]	@ (80076cc <xPortStartScheduler+0x13c>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a16      	ldr	r2, [pc, #88]	@ (80076cc <xPortStartScheduler+0x13c>)
 8007672:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007676:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007678:	4b14      	ldr	r3, [pc, #80]	@ (80076cc <xPortStartScheduler+0x13c>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a13      	ldr	r2, [pc, #76]	@ (80076cc <xPortStartScheduler+0x13c>)
 800767e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007682:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007684:	f000 f8da 	bl	800783c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007688:	4b11      	ldr	r3, [pc, #68]	@ (80076d0 <xPortStartScheduler+0x140>)
 800768a:	2200      	movs	r2, #0
 800768c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800768e:	f000 f8f9 	bl	8007884 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007692:	4b10      	ldr	r3, [pc, #64]	@ (80076d4 <xPortStartScheduler+0x144>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a0f      	ldr	r2, [pc, #60]	@ (80076d4 <xPortStartScheduler+0x144>)
 8007698:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800769c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800769e:	f7ff ff63 	bl	8007568 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80076a2:	f7ff fd29 	bl	80070f8 <vTaskSwitchContext>
	prvTaskExitError();
 80076a6:	f7ff ff19 	bl	80074dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80076aa:	2300      	movs	r3, #0
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3718      	adds	r7, #24
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}
 80076b4:	e000ed00 	.word	0xe000ed00
 80076b8:	410fc271 	.word	0x410fc271
 80076bc:	410fc270 	.word	0x410fc270
 80076c0:	e000e400 	.word	0xe000e400
 80076c4:	200007bc 	.word	0x200007bc
 80076c8:	200007c0 	.word	0x200007c0
 80076cc:	e000ed20 	.word	0xe000ed20
 80076d0:	2000008c 	.word	0x2000008c
 80076d4:	e000ef34 	.word	0xe000ef34

080076d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80076d8:	b480      	push	{r7}
 80076da:	b083      	sub	sp, #12
 80076dc:	af00      	add	r7, sp, #0
	__asm volatile
 80076de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076e2:	f383 8811 	msr	BASEPRI, r3
 80076e6:	f3bf 8f6f 	isb	sy
 80076ea:	f3bf 8f4f 	dsb	sy
 80076ee:	607b      	str	r3, [r7, #4]
}
 80076f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80076f2:	4b10      	ldr	r3, [pc, #64]	@ (8007734 <vPortEnterCritical+0x5c>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	3301      	adds	r3, #1
 80076f8:	4a0e      	ldr	r2, [pc, #56]	@ (8007734 <vPortEnterCritical+0x5c>)
 80076fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80076fc:	4b0d      	ldr	r3, [pc, #52]	@ (8007734 <vPortEnterCritical+0x5c>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	2b01      	cmp	r3, #1
 8007702:	d110      	bne.n	8007726 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007704:	4b0c      	ldr	r3, [pc, #48]	@ (8007738 <vPortEnterCritical+0x60>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	b2db      	uxtb	r3, r3
 800770a:	2b00      	cmp	r3, #0
 800770c:	d00b      	beq.n	8007726 <vPortEnterCritical+0x4e>
	__asm volatile
 800770e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007712:	f383 8811 	msr	BASEPRI, r3
 8007716:	f3bf 8f6f 	isb	sy
 800771a:	f3bf 8f4f 	dsb	sy
 800771e:	603b      	str	r3, [r7, #0]
}
 8007720:	bf00      	nop
 8007722:	bf00      	nop
 8007724:	e7fd      	b.n	8007722 <vPortEnterCritical+0x4a>
	}
}
 8007726:	bf00      	nop
 8007728:	370c      	adds	r7, #12
 800772a:	46bd      	mov	sp, r7
 800772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007730:	4770      	bx	lr
 8007732:	bf00      	nop
 8007734:	2000008c 	.word	0x2000008c
 8007738:	e000ed04 	.word	0xe000ed04

0800773c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800773c:	b480      	push	{r7}
 800773e:	b083      	sub	sp, #12
 8007740:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007742:	4b12      	ldr	r3, [pc, #72]	@ (800778c <vPortExitCritical+0x50>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d10b      	bne.n	8007762 <vPortExitCritical+0x26>
	__asm volatile
 800774a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800774e:	f383 8811 	msr	BASEPRI, r3
 8007752:	f3bf 8f6f 	isb	sy
 8007756:	f3bf 8f4f 	dsb	sy
 800775a:	607b      	str	r3, [r7, #4]
}
 800775c:	bf00      	nop
 800775e:	bf00      	nop
 8007760:	e7fd      	b.n	800775e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007762:	4b0a      	ldr	r3, [pc, #40]	@ (800778c <vPortExitCritical+0x50>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	3b01      	subs	r3, #1
 8007768:	4a08      	ldr	r2, [pc, #32]	@ (800778c <vPortExitCritical+0x50>)
 800776a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800776c:	4b07      	ldr	r3, [pc, #28]	@ (800778c <vPortExitCritical+0x50>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d105      	bne.n	8007780 <vPortExitCritical+0x44>
 8007774:	2300      	movs	r3, #0
 8007776:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800777e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007780:	bf00      	nop
 8007782:	370c      	adds	r7, #12
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr
 800778c:	2000008c 	.word	0x2000008c

08007790 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007790:	f3ef 8009 	mrs	r0, PSP
 8007794:	f3bf 8f6f 	isb	sy
 8007798:	4b15      	ldr	r3, [pc, #84]	@ (80077f0 <pxCurrentTCBConst>)
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	f01e 0f10 	tst.w	lr, #16
 80077a0:	bf08      	it	eq
 80077a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80077a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077aa:	6010      	str	r0, [r2, #0]
 80077ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80077b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80077b4:	f380 8811 	msr	BASEPRI, r0
 80077b8:	f3bf 8f4f 	dsb	sy
 80077bc:	f3bf 8f6f 	isb	sy
 80077c0:	f7ff fc9a 	bl	80070f8 <vTaskSwitchContext>
 80077c4:	f04f 0000 	mov.w	r0, #0
 80077c8:	f380 8811 	msr	BASEPRI, r0
 80077cc:	bc09      	pop	{r0, r3}
 80077ce:	6819      	ldr	r1, [r3, #0]
 80077d0:	6808      	ldr	r0, [r1, #0]
 80077d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077d6:	f01e 0f10 	tst.w	lr, #16
 80077da:	bf08      	it	eq
 80077dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80077e0:	f380 8809 	msr	PSP, r0
 80077e4:	f3bf 8f6f 	isb	sy
 80077e8:	4770      	bx	lr
 80077ea:	bf00      	nop
 80077ec:	f3af 8000 	nop.w

080077f0 <pxCurrentTCBConst>:
 80077f0:	20000690 	.word	0x20000690
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80077f4:	bf00      	nop
 80077f6:	bf00      	nop

080077f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b082      	sub	sp, #8
 80077fc:	af00      	add	r7, sp, #0
	__asm volatile
 80077fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007802:	f383 8811 	msr	BASEPRI, r3
 8007806:	f3bf 8f6f 	isb	sy
 800780a:	f3bf 8f4f 	dsb	sy
 800780e:	607b      	str	r3, [r7, #4]
}
 8007810:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007812:	f7ff fbb7 	bl	8006f84 <xTaskIncrementTick>
 8007816:	4603      	mov	r3, r0
 8007818:	2b00      	cmp	r3, #0
 800781a:	d003      	beq.n	8007824 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800781c:	4b06      	ldr	r3, [pc, #24]	@ (8007838 <SysTick_Handler+0x40>)
 800781e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007822:	601a      	str	r2, [r3, #0]
 8007824:	2300      	movs	r3, #0
 8007826:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	f383 8811 	msr	BASEPRI, r3
}
 800782e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007830:	bf00      	nop
 8007832:	3708      	adds	r7, #8
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}
 8007838:	e000ed04 	.word	0xe000ed04

0800783c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800783c:	b480      	push	{r7}
 800783e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007840:	4b0b      	ldr	r3, [pc, #44]	@ (8007870 <vPortSetupTimerInterrupt+0x34>)
 8007842:	2200      	movs	r2, #0
 8007844:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007846:	4b0b      	ldr	r3, [pc, #44]	@ (8007874 <vPortSetupTimerInterrupt+0x38>)
 8007848:	2200      	movs	r2, #0
 800784a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800784c:	4b0a      	ldr	r3, [pc, #40]	@ (8007878 <vPortSetupTimerInterrupt+0x3c>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a0a      	ldr	r2, [pc, #40]	@ (800787c <vPortSetupTimerInterrupt+0x40>)
 8007852:	fba2 2303 	umull	r2, r3, r2, r3
 8007856:	099b      	lsrs	r3, r3, #6
 8007858:	4a09      	ldr	r2, [pc, #36]	@ (8007880 <vPortSetupTimerInterrupt+0x44>)
 800785a:	3b01      	subs	r3, #1
 800785c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800785e:	4b04      	ldr	r3, [pc, #16]	@ (8007870 <vPortSetupTimerInterrupt+0x34>)
 8007860:	2207      	movs	r2, #7
 8007862:	601a      	str	r2, [r3, #0]
}
 8007864:	bf00      	nop
 8007866:	46bd      	mov	sp, r7
 8007868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786c:	4770      	bx	lr
 800786e:	bf00      	nop
 8007870:	e000e010 	.word	0xe000e010
 8007874:	e000e018 	.word	0xe000e018
 8007878:	20000000 	.word	0x20000000
 800787c:	10624dd3 	.word	0x10624dd3
 8007880:	e000e014 	.word	0xe000e014

08007884 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007884:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007894 <vPortEnableVFP+0x10>
 8007888:	6801      	ldr	r1, [r0, #0]
 800788a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800788e:	6001      	str	r1, [r0, #0]
 8007890:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007892:	bf00      	nop
 8007894:	e000ed88 	.word	0xe000ed88

08007898 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b08a      	sub	sp, #40	@ 0x28
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80078a0:	2300      	movs	r3, #0
 80078a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80078a4:	f7ff fac2 	bl	8006e2c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80078a8:	4b5c      	ldr	r3, [pc, #368]	@ (8007a1c <pvPortMalloc+0x184>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d101      	bne.n	80078b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80078b0:	f000 f924 	bl	8007afc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80078b4:	4b5a      	ldr	r3, [pc, #360]	@ (8007a20 <pvPortMalloc+0x188>)
 80078b6:	681a      	ldr	r2, [r3, #0]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	4013      	ands	r3, r2
 80078bc:	2b00      	cmp	r3, #0
 80078be:	f040 8095 	bne.w	80079ec <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d01e      	beq.n	8007906 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80078c8:	2208      	movs	r2, #8
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	4413      	add	r3, r2
 80078ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f003 0307 	and.w	r3, r3, #7
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d015      	beq.n	8007906 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f023 0307 	bic.w	r3, r3, #7
 80078e0:	3308      	adds	r3, #8
 80078e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f003 0307 	and.w	r3, r3, #7
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d00b      	beq.n	8007906 <pvPortMalloc+0x6e>
	__asm volatile
 80078ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078f2:	f383 8811 	msr	BASEPRI, r3
 80078f6:	f3bf 8f6f 	isb	sy
 80078fa:	f3bf 8f4f 	dsb	sy
 80078fe:	617b      	str	r3, [r7, #20]
}
 8007900:	bf00      	nop
 8007902:	bf00      	nop
 8007904:	e7fd      	b.n	8007902 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d06f      	beq.n	80079ec <pvPortMalloc+0x154>
 800790c:	4b45      	ldr	r3, [pc, #276]	@ (8007a24 <pvPortMalloc+0x18c>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	429a      	cmp	r2, r3
 8007914:	d86a      	bhi.n	80079ec <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007916:	4b44      	ldr	r3, [pc, #272]	@ (8007a28 <pvPortMalloc+0x190>)
 8007918:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800791a:	4b43      	ldr	r3, [pc, #268]	@ (8007a28 <pvPortMalloc+0x190>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007920:	e004      	b.n	800792c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007924:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800792c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800792e:	685b      	ldr	r3, [r3, #4]
 8007930:	687a      	ldr	r2, [r7, #4]
 8007932:	429a      	cmp	r2, r3
 8007934:	d903      	bls.n	800793e <pvPortMalloc+0xa6>
 8007936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d1f1      	bne.n	8007922 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800793e:	4b37      	ldr	r3, [pc, #220]	@ (8007a1c <pvPortMalloc+0x184>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007944:	429a      	cmp	r2, r3
 8007946:	d051      	beq.n	80079ec <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007948:	6a3b      	ldr	r3, [r7, #32]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	2208      	movs	r2, #8
 800794e:	4413      	add	r3, r2
 8007950:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007954:	681a      	ldr	r2, [r3, #0]
 8007956:	6a3b      	ldr	r3, [r7, #32]
 8007958:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800795a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800795c:	685a      	ldr	r2, [r3, #4]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	1ad2      	subs	r2, r2, r3
 8007962:	2308      	movs	r3, #8
 8007964:	005b      	lsls	r3, r3, #1
 8007966:	429a      	cmp	r2, r3
 8007968:	d920      	bls.n	80079ac <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800796a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	4413      	add	r3, r2
 8007970:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007972:	69bb      	ldr	r3, [r7, #24]
 8007974:	f003 0307 	and.w	r3, r3, #7
 8007978:	2b00      	cmp	r3, #0
 800797a:	d00b      	beq.n	8007994 <pvPortMalloc+0xfc>
	__asm volatile
 800797c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007980:	f383 8811 	msr	BASEPRI, r3
 8007984:	f3bf 8f6f 	isb	sy
 8007988:	f3bf 8f4f 	dsb	sy
 800798c:	613b      	str	r3, [r7, #16]
}
 800798e:	bf00      	nop
 8007990:	bf00      	nop
 8007992:	e7fd      	b.n	8007990 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007996:	685a      	ldr	r2, [r3, #4]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	1ad2      	subs	r2, r2, r3
 800799c:	69bb      	ldr	r3, [r7, #24]
 800799e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80079a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80079a6:	69b8      	ldr	r0, [r7, #24]
 80079a8:	f000 f90a 	bl	8007bc0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80079ac:	4b1d      	ldr	r3, [pc, #116]	@ (8007a24 <pvPortMalloc+0x18c>)
 80079ae:	681a      	ldr	r2, [r3, #0]
 80079b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	1ad3      	subs	r3, r2, r3
 80079b6:	4a1b      	ldr	r2, [pc, #108]	@ (8007a24 <pvPortMalloc+0x18c>)
 80079b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80079ba:	4b1a      	ldr	r3, [pc, #104]	@ (8007a24 <pvPortMalloc+0x18c>)
 80079bc:	681a      	ldr	r2, [r3, #0]
 80079be:	4b1b      	ldr	r3, [pc, #108]	@ (8007a2c <pvPortMalloc+0x194>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	429a      	cmp	r2, r3
 80079c4:	d203      	bcs.n	80079ce <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80079c6:	4b17      	ldr	r3, [pc, #92]	@ (8007a24 <pvPortMalloc+0x18c>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a18      	ldr	r2, [pc, #96]	@ (8007a2c <pvPortMalloc+0x194>)
 80079cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80079ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079d0:	685a      	ldr	r2, [r3, #4]
 80079d2:	4b13      	ldr	r3, [pc, #76]	@ (8007a20 <pvPortMalloc+0x188>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	431a      	orrs	r2, r3
 80079d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80079dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079de:	2200      	movs	r2, #0
 80079e0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80079e2:	4b13      	ldr	r3, [pc, #76]	@ (8007a30 <pvPortMalloc+0x198>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	3301      	adds	r3, #1
 80079e8:	4a11      	ldr	r2, [pc, #68]	@ (8007a30 <pvPortMalloc+0x198>)
 80079ea:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80079ec:	f7ff fa2c 	bl	8006e48 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80079f0:	69fb      	ldr	r3, [r7, #28]
 80079f2:	f003 0307 	and.w	r3, r3, #7
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d00b      	beq.n	8007a12 <pvPortMalloc+0x17a>
	__asm volatile
 80079fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079fe:	f383 8811 	msr	BASEPRI, r3
 8007a02:	f3bf 8f6f 	isb	sy
 8007a06:	f3bf 8f4f 	dsb	sy
 8007a0a:	60fb      	str	r3, [r7, #12]
}
 8007a0c:	bf00      	nop
 8007a0e:	bf00      	nop
 8007a10:	e7fd      	b.n	8007a0e <pvPortMalloc+0x176>
	return pvReturn;
 8007a12:	69fb      	ldr	r3, [r7, #28]
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3728      	adds	r7, #40	@ 0x28
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}
 8007a1c:	20001384 	.word	0x20001384
 8007a20:	20001398 	.word	0x20001398
 8007a24:	20001388 	.word	0x20001388
 8007a28:	2000137c 	.word	0x2000137c
 8007a2c:	2000138c 	.word	0x2000138c
 8007a30:	20001390 	.word	0x20001390

08007a34 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b086      	sub	sp, #24
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d04f      	beq.n	8007ae6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007a46:	2308      	movs	r3, #8
 8007a48:	425b      	negs	r3, r3
 8007a4a:	697a      	ldr	r2, [r7, #20]
 8007a4c:	4413      	add	r3, r2
 8007a4e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	685a      	ldr	r2, [r3, #4]
 8007a58:	4b25      	ldr	r3, [pc, #148]	@ (8007af0 <vPortFree+0xbc>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4013      	ands	r3, r2
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d10b      	bne.n	8007a7a <vPortFree+0x46>
	__asm volatile
 8007a62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a66:	f383 8811 	msr	BASEPRI, r3
 8007a6a:	f3bf 8f6f 	isb	sy
 8007a6e:	f3bf 8f4f 	dsb	sy
 8007a72:	60fb      	str	r3, [r7, #12]
}
 8007a74:	bf00      	nop
 8007a76:	bf00      	nop
 8007a78:	e7fd      	b.n	8007a76 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d00b      	beq.n	8007a9a <vPortFree+0x66>
	__asm volatile
 8007a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a86:	f383 8811 	msr	BASEPRI, r3
 8007a8a:	f3bf 8f6f 	isb	sy
 8007a8e:	f3bf 8f4f 	dsb	sy
 8007a92:	60bb      	str	r3, [r7, #8]
}
 8007a94:	bf00      	nop
 8007a96:	bf00      	nop
 8007a98:	e7fd      	b.n	8007a96 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	685a      	ldr	r2, [r3, #4]
 8007a9e:	4b14      	ldr	r3, [pc, #80]	@ (8007af0 <vPortFree+0xbc>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4013      	ands	r3, r2
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d01e      	beq.n	8007ae6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d11a      	bne.n	8007ae6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	685a      	ldr	r2, [r3, #4]
 8007ab4:	4b0e      	ldr	r3, [pc, #56]	@ (8007af0 <vPortFree+0xbc>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	43db      	mvns	r3, r3
 8007aba:	401a      	ands	r2, r3
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007ac0:	f7ff f9b4 	bl	8006e2c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	685a      	ldr	r2, [r3, #4]
 8007ac8:	4b0a      	ldr	r3, [pc, #40]	@ (8007af4 <vPortFree+0xc0>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4413      	add	r3, r2
 8007ace:	4a09      	ldr	r2, [pc, #36]	@ (8007af4 <vPortFree+0xc0>)
 8007ad0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007ad2:	6938      	ldr	r0, [r7, #16]
 8007ad4:	f000 f874 	bl	8007bc0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007ad8:	4b07      	ldr	r3, [pc, #28]	@ (8007af8 <vPortFree+0xc4>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	3301      	adds	r3, #1
 8007ade:	4a06      	ldr	r2, [pc, #24]	@ (8007af8 <vPortFree+0xc4>)
 8007ae0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007ae2:	f7ff f9b1 	bl	8006e48 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007ae6:	bf00      	nop
 8007ae8:	3718      	adds	r7, #24
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}
 8007aee:	bf00      	nop
 8007af0:	20001398 	.word	0x20001398
 8007af4:	20001388 	.word	0x20001388
 8007af8:	20001394 	.word	0x20001394

08007afc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007afc:	b480      	push	{r7}
 8007afe:	b085      	sub	sp, #20
 8007b00:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007b02:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8007b06:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007b08:	4b27      	ldr	r3, [pc, #156]	@ (8007ba8 <prvHeapInit+0xac>)
 8007b0a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f003 0307 	and.w	r3, r3, #7
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d00c      	beq.n	8007b30 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	3307      	adds	r3, #7
 8007b1a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f023 0307 	bic.w	r3, r3, #7
 8007b22:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007b24:	68ba      	ldr	r2, [r7, #8]
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	1ad3      	subs	r3, r2, r3
 8007b2a:	4a1f      	ldr	r2, [pc, #124]	@ (8007ba8 <prvHeapInit+0xac>)
 8007b2c:	4413      	add	r3, r2
 8007b2e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007b34:	4a1d      	ldr	r2, [pc, #116]	@ (8007bac <prvHeapInit+0xb0>)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007b3a:	4b1c      	ldr	r3, [pc, #112]	@ (8007bac <prvHeapInit+0xb0>)
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	68ba      	ldr	r2, [r7, #8]
 8007b44:	4413      	add	r3, r2
 8007b46:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007b48:	2208      	movs	r2, #8
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	1a9b      	subs	r3, r3, r2
 8007b4e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f023 0307 	bic.w	r3, r3, #7
 8007b56:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	4a15      	ldr	r2, [pc, #84]	@ (8007bb0 <prvHeapInit+0xb4>)
 8007b5c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007b5e:	4b14      	ldr	r3, [pc, #80]	@ (8007bb0 <prvHeapInit+0xb4>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	2200      	movs	r2, #0
 8007b64:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007b66:	4b12      	ldr	r3, [pc, #72]	@ (8007bb0 <prvHeapInit+0xb4>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	68fa      	ldr	r2, [r7, #12]
 8007b76:	1ad2      	subs	r2, r2, r3
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007b7c:	4b0c      	ldr	r3, [pc, #48]	@ (8007bb0 <prvHeapInit+0xb4>)
 8007b7e:	681a      	ldr	r2, [r3, #0]
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	4a0a      	ldr	r2, [pc, #40]	@ (8007bb4 <prvHeapInit+0xb8>)
 8007b8a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	4a09      	ldr	r2, [pc, #36]	@ (8007bb8 <prvHeapInit+0xbc>)
 8007b92:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007b94:	4b09      	ldr	r3, [pc, #36]	@ (8007bbc <prvHeapInit+0xc0>)
 8007b96:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007b9a:	601a      	str	r2, [r3, #0]
}
 8007b9c:	bf00      	nop
 8007b9e:	3714      	adds	r7, #20
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr
 8007ba8:	200007c4 	.word	0x200007c4
 8007bac:	2000137c 	.word	0x2000137c
 8007bb0:	20001384 	.word	0x20001384
 8007bb4:	2000138c 	.word	0x2000138c
 8007bb8:	20001388 	.word	0x20001388
 8007bbc:	20001398 	.word	0x20001398

08007bc0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b085      	sub	sp, #20
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007bc8:	4b28      	ldr	r3, [pc, #160]	@ (8007c6c <prvInsertBlockIntoFreeList+0xac>)
 8007bca:	60fb      	str	r3, [r7, #12]
 8007bcc:	e002      	b.n	8007bd4 <prvInsertBlockIntoFreeList+0x14>
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	60fb      	str	r3, [r7, #12]
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	687a      	ldr	r2, [r7, #4]
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	d8f7      	bhi.n	8007bce <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	68ba      	ldr	r2, [r7, #8]
 8007be8:	4413      	add	r3, r2
 8007bea:	687a      	ldr	r2, [r7, #4]
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d108      	bne.n	8007c02 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	685a      	ldr	r2, [r3, #4]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	441a      	add	r2, r3
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	68ba      	ldr	r2, [r7, #8]
 8007c0c:	441a      	add	r2, r3
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	429a      	cmp	r2, r3
 8007c14:	d118      	bne.n	8007c48 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681a      	ldr	r2, [r3, #0]
 8007c1a:	4b15      	ldr	r3, [pc, #84]	@ (8007c70 <prvInsertBlockIntoFreeList+0xb0>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	429a      	cmp	r2, r3
 8007c20:	d00d      	beq.n	8007c3e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	685a      	ldr	r2, [r3, #4]
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	441a      	add	r2, r3
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	601a      	str	r2, [r3, #0]
 8007c3c:	e008      	b.n	8007c50 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007c3e:	4b0c      	ldr	r3, [pc, #48]	@ (8007c70 <prvInsertBlockIntoFreeList+0xb0>)
 8007c40:	681a      	ldr	r2, [r3, #0]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	601a      	str	r2, [r3, #0]
 8007c46:	e003      	b.n	8007c50 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681a      	ldr	r2, [r3, #0]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007c50:	68fa      	ldr	r2, [r7, #12]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	429a      	cmp	r2, r3
 8007c56:	d002      	beq.n	8007c5e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	687a      	ldr	r2, [r7, #4]
 8007c5c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c5e:	bf00      	nop
 8007c60:	3714      	adds	r7, #20
 8007c62:	46bd      	mov	sp, r7
 8007c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c68:	4770      	bx	lr
 8007c6a:	bf00      	nop
 8007c6c:	2000137c 	.word	0x2000137c
 8007c70:	20001384 	.word	0x20001384

08007c74 <__cvt>:
 8007c74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c78:	ec57 6b10 	vmov	r6, r7, d0
 8007c7c:	2f00      	cmp	r7, #0
 8007c7e:	460c      	mov	r4, r1
 8007c80:	4619      	mov	r1, r3
 8007c82:	463b      	mov	r3, r7
 8007c84:	bfbb      	ittet	lt
 8007c86:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007c8a:	461f      	movlt	r7, r3
 8007c8c:	2300      	movge	r3, #0
 8007c8e:	232d      	movlt	r3, #45	@ 0x2d
 8007c90:	700b      	strb	r3, [r1, #0]
 8007c92:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007c94:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007c98:	4691      	mov	r9, r2
 8007c9a:	f023 0820 	bic.w	r8, r3, #32
 8007c9e:	bfbc      	itt	lt
 8007ca0:	4632      	movlt	r2, r6
 8007ca2:	4616      	movlt	r6, r2
 8007ca4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007ca8:	d005      	beq.n	8007cb6 <__cvt+0x42>
 8007caa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007cae:	d100      	bne.n	8007cb2 <__cvt+0x3e>
 8007cb0:	3401      	adds	r4, #1
 8007cb2:	2102      	movs	r1, #2
 8007cb4:	e000      	b.n	8007cb8 <__cvt+0x44>
 8007cb6:	2103      	movs	r1, #3
 8007cb8:	ab03      	add	r3, sp, #12
 8007cba:	9301      	str	r3, [sp, #4]
 8007cbc:	ab02      	add	r3, sp, #8
 8007cbe:	9300      	str	r3, [sp, #0]
 8007cc0:	ec47 6b10 	vmov	d0, r6, r7
 8007cc4:	4653      	mov	r3, sl
 8007cc6:	4622      	mov	r2, r4
 8007cc8:	f000 fdf2 	bl	80088b0 <_dtoa_r>
 8007ccc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007cd0:	4605      	mov	r5, r0
 8007cd2:	d119      	bne.n	8007d08 <__cvt+0x94>
 8007cd4:	f019 0f01 	tst.w	r9, #1
 8007cd8:	d00e      	beq.n	8007cf8 <__cvt+0x84>
 8007cda:	eb00 0904 	add.w	r9, r0, r4
 8007cde:	2200      	movs	r2, #0
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	4630      	mov	r0, r6
 8007ce4:	4639      	mov	r1, r7
 8007ce6:	f7f8 ff07 	bl	8000af8 <__aeabi_dcmpeq>
 8007cea:	b108      	cbz	r0, 8007cf0 <__cvt+0x7c>
 8007cec:	f8cd 900c 	str.w	r9, [sp, #12]
 8007cf0:	2230      	movs	r2, #48	@ 0x30
 8007cf2:	9b03      	ldr	r3, [sp, #12]
 8007cf4:	454b      	cmp	r3, r9
 8007cf6:	d31e      	bcc.n	8007d36 <__cvt+0xc2>
 8007cf8:	9b03      	ldr	r3, [sp, #12]
 8007cfa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007cfc:	1b5b      	subs	r3, r3, r5
 8007cfe:	4628      	mov	r0, r5
 8007d00:	6013      	str	r3, [r2, #0]
 8007d02:	b004      	add	sp, #16
 8007d04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d08:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007d0c:	eb00 0904 	add.w	r9, r0, r4
 8007d10:	d1e5      	bne.n	8007cde <__cvt+0x6a>
 8007d12:	7803      	ldrb	r3, [r0, #0]
 8007d14:	2b30      	cmp	r3, #48	@ 0x30
 8007d16:	d10a      	bne.n	8007d2e <__cvt+0xba>
 8007d18:	2200      	movs	r2, #0
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	4630      	mov	r0, r6
 8007d1e:	4639      	mov	r1, r7
 8007d20:	f7f8 feea 	bl	8000af8 <__aeabi_dcmpeq>
 8007d24:	b918      	cbnz	r0, 8007d2e <__cvt+0xba>
 8007d26:	f1c4 0401 	rsb	r4, r4, #1
 8007d2a:	f8ca 4000 	str.w	r4, [sl]
 8007d2e:	f8da 3000 	ldr.w	r3, [sl]
 8007d32:	4499      	add	r9, r3
 8007d34:	e7d3      	b.n	8007cde <__cvt+0x6a>
 8007d36:	1c59      	adds	r1, r3, #1
 8007d38:	9103      	str	r1, [sp, #12]
 8007d3a:	701a      	strb	r2, [r3, #0]
 8007d3c:	e7d9      	b.n	8007cf2 <__cvt+0x7e>

08007d3e <__exponent>:
 8007d3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d40:	2900      	cmp	r1, #0
 8007d42:	bfba      	itte	lt
 8007d44:	4249      	neglt	r1, r1
 8007d46:	232d      	movlt	r3, #45	@ 0x2d
 8007d48:	232b      	movge	r3, #43	@ 0x2b
 8007d4a:	2909      	cmp	r1, #9
 8007d4c:	7002      	strb	r2, [r0, #0]
 8007d4e:	7043      	strb	r3, [r0, #1]
 8007d50:	dd29      	ble.n	8007da6 <__exponent+0x68>
 8007d52:	f10d 0307 	add.w	r3, sp, #7
 8007d56:	461d      	mov	r5, r3
 8007d58:	270a      	movs	r7, #10
 8007d5a:	461a      	mov	r2, r3
 8007d5c:	fbb1 f6f7 	udiv	r6, r1, r7
 8007d60:	fb07 1416 	mls	r4, r7, r6, r1
 8007d64:	3430      	adds	r4, #48	@ 0x30
 8007d66:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007d6a:	460c      	mov	r4, r1
 8007d6c:	2c63      	cmp	r4, #99	@ 0x63
 8007d6e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8007d72:	4631      	mov	r1, r6
 8007d74:	dcf1      	bgt.n	8007d5a <__exponent+0x1c>
 8007d76:	3130      	adds	r1, #48	@ 0x30
 8007d78:	1e94      	subs	r4, r2, #2
 8007d7a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007d7e:	1c41      	adds	r1, r0, #1
 8007d80:	4623      	mov	r3, r4
 8007d82:	42ab      	cmp	r3, r5
 8007d84:	d30a      	bcc.n	8007d9c <__exponent+0x5e>
 8007d86:	f10d 0309 	add.w	r3, sp, #9
 8007d8a:	1a9b      	subs	r3, r3, r2
 8007d8c:	42ac      	cmp	r4, r5
 8007d8e:	bf88      	it	hi
 8007d90:	2300      	movhi	r3, #0
 8007d92:	3302      	adds	r3, #2
 8007d94:	4403      	add	r3, r0
 8007d96:	1a18      	subs	r0, r3, r0
 8007d98:	b003      	add	sp, #12
 8007d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d9c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007da0:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007da4:	e7ed      	b.n	8007d82 <__exponent+0x44>
 8007da6:	2330      	movs	r3, #48	@ 0x30
 8007da8:	3130      	adds	r1, #48	@ 0x30
 8007daa:	7083      	strb	r3, [r0, #2]
 8007dac:	70c1      	strb	r1, [r0, #3]
 8007dae:	1d03      	adds	r3, r0, #4
 8007db0:	e7f1      	b.n	8007d96 <__exponent+0x58>
	...

08007db4 <_printf_float>:
 8007db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007db8:	b08d      	sub	sp, #52	@ 0x34
 8007dba:	460c      	mov	r4, r1
 8007dbc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007dc0:	4616      	mov	r6, r2
 8007dc2:	461f      	mov	r7, r3
 8007dc4:	4605      	mov	r5, r0
 8007dc6:	f000 fca9 	bl	800871c <_localeconv_r>
 8007dca:	6803      	ldr	r3, [r0, #0]
 8007dcc:	9304      	str	r3, [sp, #16]
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f7f8 fa66 	bl	80002a0 <strlen>
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007dd8:	f8d8 3000 	ldr.w	r3, [r8]
 8007ddc:	9005      	str	r0, [sp, #20]
 8007dde:	3307      	adds	r3, #7
 8007de0:	f023 0307 	bic.w	r3, r3, #7
 8007de4:	f103 0208 	add.w	r2, r3, #8
 8007de8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007dec:	f8d4 b000 	ldr.w	fp, [r4]
 8007df0:	f8c8 2000 	str.w	r2, [r8]
 8007df4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007df8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007dfc:	9307      	str	r3, [sp, #28]
 8007dfe:	f8cd 8018 	str.w	r8, [sp, #24]
 8007e02:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007e06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e0a:	4b9c      	ldr	r3, [pc, #624]	@ (800807c <_printf_float+0x2c8>)
 8007e0c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007e10:	f7f8 fea4 	bl	8000b5c <__aeabi_dcmpun>
 8007e14:	bb70      	cbnz	r0, 8007e74 <_printf_float+0xc0>
 8007e16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e1a:	4b98      	ldr	r3, [pc, #608]	@ (800807c <_printf_float+0x2c8>)
 8007e1c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007e20:	f7f8 fe7e 	bl	8000b20 <__aeabi_dcmple>
 8007e24:	bb30      	cbnz	r0, 8007e74 <_printf_float+0xc0>
 8007e26:	2200      	movs	r2, #0
 8007e28:	2300      	movs	r3, #0
 8007e2a:	4640      	mov	r0, r8
 8007e2c:	4649      	mov	r1, r9
 8007e2e:	f7f8 fe6d 	bl	8000b0c <__aeabi_dcmplt>
 8007e32:	b110      	cbz	r0, 8007e3a <_printf_float+0x86>
 8007e34:	232d      	movs	r3, #45	@ 0x2d
 8007e36:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e3a:	4a91      	ldr	r2, [pc, #580]	@ (8008080 <_printf_float+0x2cc>)
 8007e3c:	4b91      	ldr	r3, [pc, #580]	@ (8008084 <_printf_float+0x2d0>)
 8007e3e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007e42:	bf94      	ite	ls
 8007e44:	4690      	movls	r8, r2
 8007e46:	4698      	movhi	r8, r3
 8007e48:	2303      	movs	r3, #3
 8007e4a:	6123      	str	r3, [r4, #16]
 8007e4c:	f02b 0304 	bic.w	r3, fp, #4
 8007e50:	6023      	str	r3, [r4, #0]
 8007e52:	f04f 0900 	mov.w	r9, #0
 8007e56:	9700      	str	r7, [sp, #0]
 8007e58:	4633      	mov	r3, r6
 8007e5a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007e5c:	4621      	mov	r1, r4
 8007e5e:	4628      	mov	r0, r5
 8007e60:	f000 f9d2 	bl	8008208 <_printf_common>
 8007e64:	3001      	adds	r0, #1
 8007e66:	f040 808d 	bne.w	8007f84 <_printf_float+0x1d0>
 8007e6a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007e6e:	b00d      	add	sp, #52	@ 0x34
 8007e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e74:	4642      	mov	r2, r8
 8007e76:	464b      	mov	r3, r9
 8007e78:	4640      	mov	r0, r8
 8007e7a:	4649      	mov	r1, r9
 8007e7c:	f7f8 fe6e 	bl	8000b5c <__aeabi_dcmpun>
 8007e80:	b140      	cbz	r0, 8007e94 <_printf_float+0xe0>
 8007e82:	464b      	mov	r3, r9
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	bfbc      	itt	lt
 8007e88:	232d      	movlt	r3, #45	@ 0x2d
 8007e8a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007e8e:	4a7e      	ldr	r2, [pc, #504]	@ (8008088 <_printf_float+0x2d4>)
 8007e90:	4b7e      	ldr	r3, [pc, #504]	@ (800808c <_printf_float+0x2d8>)
 8007e92:	e7d4      	b.n	8007e3e <_printf_float+0x8a>
 8007e94:	6863      	ldr	r3, [r4, #4]
 8007e96:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007e9a:	9206      	str	r2, [sp, #24]
 8007e9c:	1c5a      	adds	r2, r3, #1
 8007e9e:	d13b      	bne.n	8007f18 <_printf_float+0x164>
 8007ea0:	2306      	movs	r3, #6
 8007ea2:	6063      	str	r3, [r4, #4]
 8007ea4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	6022      	str	r2, [r4, #0]
 8007eac:	9303      	str	r3, [sp, #12]
 8007eae:	ab0a      	add	r3, sp, #40	@ 0x28
 8007eb0:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007eb4:	ab09      	add	r3, sp, #36	@ 0x24
 8007eb6:	9300      	str	r3, [sp, #0]
 8007eb8:	6861      	ldr	r1, [r4, #4]
 8007eba:	ec49 8b10 	vmov	d0, r8, r9
 8007ebe:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007ec2:	4628      	mov	r0, r5
 8007ec4:	f7ff fed6 	bl	8007c74 <__cvt>
 8007ec8:	9b06      	ldr	r3, [sp, #24]
 8007eca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007ecc:	2b47      	cmp	r3, #71	@ 0x47
 8007ece:	4680      	mov	r8, r0
 8007ed0:	d129      	bne.n	8007f26 <_printf_float+0x172>
 8007ed2:	1cc8      	adds	r0, r1, #3
 8007ed4:	db02      	blt.n	8007edc <_printf_float+0x128>
 8007ed6:	6863      	ldr	r3, [r4, #4]
 8007ed8:	4299      	cmp	r1, r3
 8007eda:	dd41      	ble.n	8007f60 <_printf_float+0x1ac>
 8007edc:	f1aa 0a02 	sub.w	sl, sl, #2
 8007ee0:	fa5f fa8a 	uxtb.w	sl, sl
 8007ee4:	3901      	subs	r1, #1
 8007ee6:	4652      	mov	r2, sl
 8007ee8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007eec:	9109      	str	r1, [sp, #36]	@ 0x24
 8007eee:	f7ff ff26 	bl	8007d3e <__exponent>
 8007ef2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007ef4:	1813      	adds	r3, r2, r0
 8007ef6:	2a01      	cmp	r2, #1
 8007ef8:	4681      	mov	r9, r0
 8007efa:	6123      	str	r3, [r4, #16]
 8007efc:	dc02      	bgt.n	8007f04 <_printf_float+0x150>
 8007efe:	6822      	ldr	r2, [r4, #0]
 8007f00:	07d2      	lsls	r2, r2, #31
 8007f02:	d501      	bpl.n	8007f08 <_printf_float+0x154>
 8007f04:	3301      	adds	r3, #1
 8007f06:	6123      	str	r3, [r4, #16]
 8007f08:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d0a2      	beq.n	8007e56 <_printf_float+0xa2>
 8007f10:	232d      	movs	r3, #45	@ 0x2d
 8007f12:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f16:	e79e      	b.n	8007e56 <_printf_float+0xa2>
 8007f18:	9a06      	ldr	r2, [sp, #24]
 8007f1a:	2a47      	cmp	r2, #71	@ 0x47
 8007f1c:	d1c2      	bne.n	8007ea4 <_printf_float+0xf0>
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d1c0      	bne.n	8007ea4 <_printf_float+0xf0>
 8007f22:	2301      	movs	r3, #1
 8007f24:	e7bd      	b.n	8007ea2 <_printf_float+0xee>
 8007f26:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007f2a:	d9db      	bls.n	8007ee4 <_printf_float+0x130>
 8007f2c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007f30:	d118      	bne.n	8007f64 <_printf_float+0x1b0>
 8007f32:	2900      	cmp	r1, #0
 8007f34:	6863      	ldr	r3, [r4, #4]
 8007f36:	dd0b      	ble.n	8007f50 <_printf_float+0x19c>
 8007f38:	6121      	str	r1, [r4, #16]
 8007f3a:	b913      	cbnz	r3, 8007f42 <_printf_float+0x18e>
 8007f3c:	6822      	ldr	r2, [r4, #0]
 8007f3e:	07d0      	lsls	r0, r2, #31
 8007f40:	d502      	bpl.n	8007f48 <_printf_float+0x194>
 8007f42:	3301      	adds	r3, #1
 8007f44:	440b      	add	r3, r1
 8007f46:	6123      	str	r3, [r4, #16]
 8007f48:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007f4a:	f04f 0900 	mov.w	r9, #0
 8007f4e:	e7db      	b.n	8007f08 <_printf_float+0x154>
 8007f50:	b913      	cbnz	r3, 8007f58 <_printf_float+0x1a4>
 8007f52:	6822      	ldr	r2, [r4, #0]
 8007f54:	07d2      	lsls	r2, r2, #31
 8007f56:	d501      	bpl.n	8007f5c <_printf_float+0x1a8>
 8007f58:	3302      	adds	r3, #2
 8007f5a:	e7f4      	b.n	8007f46 <_printf_float+0x192>
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	e7f2      	b.n	8007f46 <_printf_float+0x192>
 8007f60:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007f64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f66:	4299      	cmp	r1, r3
 8007f68:	db05      	blt.n	8007f76 <_printf_float+0x1c2>
 8007f6a:	6823      	ldr	r3, [r4, #0]
 8007f6c:	6121      	str	r1, [r4, #16]
 8007f6e:	07d8      	lsls	r0, r3, #31
 8007f70:	d5ea      	bpl.n	8007f48 <_printf_float+0x194>
 8007f72:	1c4b      	adds	r3, r1, #1
 8007f74:	e7e7      	b.n	8007f46 <_printf_float+0x192>
 8007f76:	2900      	cmp	r1, #0
 8007f78:	bfd4      	ite	le
 8007f7a:	f1c1 0202 	rsble	r2, r1, #2
 8007f7e:	2201      	movgt	r2, #1
 8007f80:	4413      	add	r3, r2
 8007f82:	e7e0      	b.n	8007f46 <_printf_float+0x192>
 8007f84:	6823      	ldr	r3, [r4, #0]
 8007f86:	055a      	lsls	r2, r3, #21
 8007f88:	d407      	bmi.n	8007f9a <_printf_float+0x1e6>
 8007f8a:	6923      	ldr	r3, [r4, #16]
 8007f8c:	4642      	mov	r2, r8
 8007f8e:	4631      	mov	r1, r6
 8007f90:	4628      	mov	r0, r5
 8007f92:	47b8      	blx	r7
 8007f94:	3001      	adds	r0, #1
 8007f96:	d12b      	bne.n	8007ff0 <_printf_float+0x23c>
 8007f98:	e767      	b.n	8007e6a <_printf_float+0xb6>
 8007f9a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007f9e:	f240 80dd 	bls.w	800815c <_printf_float+0x3a8>
 8007fa2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	2300      	movs	r3, #0
 8007faa:	f7f8 fda5 	bl	8000af8 <__aeabi_dcmpeq>
 8007fae:	2800      	cmp	r0, #0
 8007fb0:	d033      	beq.n	800801a <_printf_float+0x266>
 8007fb2:	4a37      	ldr	r2, [pc, #220]	@ (8008090 <_printf_float+0x2dc>)
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	4631      	mov	r1, r6
 8007fb8:	4628      	mov	r0, r5
 8007fba:	47b8      	blx	r7
 8007fbc:	3001      	adds	r0, #1
 8007fbe:	f43f af54 	beq.w	8007e6a <_printf_float+0xb6>
 8007fc2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007fc6:	4543      	cmp	r3, r8
 8007fc8:	db02      	blt.n	8007fd0 <_printf_float+0x21c>
 8007fca:	6823      	ldr	r3, [r4, #0]
 8007fcc:	07d8      	lsls	r0, r3, #31
 8007fce:	d50f      	bpl.n	8007ff0 <_printf_float+0x23c>
 8007fd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007fd4:	4631      	mov	r1, r6
 8007fd6:	4628      	mov	r0, r5
 8007fd8:	47b8      	blx	r7
 8007fda:	3001      	adds	r0, #1
 8007fdc:	f43f af45 	beq.w	8007e6a <_printf_float+0xb6>
 8007fe0:	f04f 0900 	mov.w	r9, #0
 8007fe4:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8007fe8:	f104 0a1a 	add.w	sl, r4, #26
 8007fec:	45c8      	cmp	r8, r9
 8007fee:	dc09      	bgt.n	8008004 <_printf_float+0x250>
 8007ff0:	6823      	ldr	r3, [r4, #0]
 8007ff2:	079b      	lsls	r3, r3, #30
 8007ff4:	f100 8103 	bmi.w	80081fe <_printf_float+0x44a>
 8007ff8:	68e0      	ldr	r0, [r4, #12]
 8007ffa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ffc:	4298      	cmp	r0, r3
 8007ffe:	bfb8      	it	lt
 8008000:	4618      	movlt	r0, r3
 8008002:	e734      	b.n	8007e6e <_printf_float+0xba>
 8008004:	2301      	movs	r3, #1
 8008006:	4652      	mov	r2, sl
 8008008:	4631      	mov	r1, r6
 800800a:	4628      	mov	r0, r5
 800800c:	47b8      	blx	r7
 800800e:	3001      	adds	r0, #1
 8008010:	f43f af2b 	beq.w	8007e6a <_printf_float+0xb6>
 8008014:	f109 0901 	add.w	r9, r9, #1
 8008018:	e7e8      	b.n	8007fec <_printf_float+0x238>
 800801a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800801c:	2b00      	cmp	r3, #0
 800801e:	dc39      	bgt.n	8008094 <_printf_float+0x2e0>
 8008020:	4a1b      	ldr	r2, [pc, #108]	@ (8008090 <_printf_float+0x2dc>)
 8008022:	2301      	movs	r3, #1
 8008024:	4631      	mov	r1, r6
 8008026:	4628      	mov	r0, r5
 8008028:	47b8      	blx	r7
 800802a:	3001      	adds	r0, #1
 800802c:	f43f af1d 	beq.w	8007e6a <_printf_float+0xb6>
 8008030:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008034:	ea59 0303 	orrs.w	r3, r9, r3
 8008038:	d102      	bne.n	8008040 <_printf_float+0x28c>
 800803a:	6823      	ldr	r3, [r4, #0]
 800803c:	07d9      	lsls	r1, r3, #31
 800803e:	d5d7      	bpl.n	8007ff0 <_printf_float+0x23c>
 8008040:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008044:	4631      	mov	r1, r6
 8008046:	4628      	mov	r0, r5
 8008048:	47b8      	blx	r7
 800804a:	3001      	adds	r0, #1
 800804c:	f43f af0d 	beq.w	8007e6a <_printf_float+0xb6>
 8008050:	f04f 0a00 	mov.w	sl, #0
 8008054:	f104 0b1a 	add.w	fp, r4, #26
 8008058:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800805a:	425b      	negs	r3, r3
 800805c:	4553      	cmp	r3, sl
 800805e:	dc01      	bgt.n	8008064 <_printf_float+0x2b0>
 8008060:	464b      	mov	r3, r9
 8008062:	e793      	b.n	8007f8c <_printf_float+0x1d8>
 8008064:	2301      	movs	r3, #1
 8008066:	465a      	mov	r2, fp
 8008068:	4631      	mov	r1, r6
 800806a:	4628      	mov	r0, r5
 800806c:	47b8      	blx	r7
 800806e:	3001      	adds	r0, #1
 8008070:	f43f aefb 	beq.w	8007e6a <_printf_float+0xb6>
 8008074:	f10a 0a01 	add.w	sl, sl, #1
 8008078:	e7ee      	b.n	8008058 <_printf_float+0x2a4>
 800807a:	bf00      	nop
 800807c:	7fefffff 	.word	0x7fefffff
 8008080:	0800aad8 	.word	0x0800aad8
 8008084:	0800aadc 	.word	0x0800aadc
 8008088:	0800aae0 	.word	0x0800aae0
 800808c:	0800aae4 	.word	0x0800aae4
 8008090:	0800aae8 	.word	0x0800aae8
 8008094:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008096:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800809a:	4553      	cmp	r3, sl
 800809c:	bfa8      	it	ge
 800809e:	4653      	movge	r3, sl
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	4699      	mov	r9, r3
 80080a4:	dc36      	bgt.n	8008114 <_printf_float+0x360>
 80080a6:	f04f 0b00 	mov.w	fp, #0
 80080aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80080ae:	f104 021a 	add.w	r2, r4, #26
 80080b2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80080b4:	9306      	str	r3, [sp, #24]
 80080b6:	eba3 0309 	sub.w	r3, r3, r9
 80080ba:	455b      	cmp	r3, fp
 80080bc:	dc31      	bgt.n	8008122 <_printf_float+0x36e>
 80080be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080c0:	459a      	cmp	sl, r3
 80080c2:	dc3a      	bgt.n	800813a <_printf_float+0x386>
 80080c4:	6823      	ldr	r3, [r4, #0]
 80080c6:	07da      	lsls	r2, r3, #31
 80080c8:	d437      	bmi.n	800813a <_printf_float+0x386>
 80080ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080cc:	ebaa 0903 	sub.w	r9, sl, r3
 80080d0:	9b06      	ldr	r3, [sp, #24]
 80080d2:	ebaa 0303 	sub.w	r3, sl, r3
 80080d6:	4599      	cmp	r9, r3
 80080d8:	bfa8      	it	ge
 80080da:	4699      	movge	r9, r3
 80080dc:	f1b9 0f00 	cmp.w	r9, #0
 80080e0:	dc33      	bgt.n	800814a <_printf_float+0x396>
 80080e2:	f04f 0800 	mov.w	r8, #0
 80080e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80080ea:	f104 0b1a 	add.w	fp, r4, #26
 80080ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080f0:	ebaa 0303 	sub.w	r3, sl, r3
 80080f4:	eba3 0309 	sub.w	r3, r3, r9
 80080f8:	4543      	cmp	r3, r8
 80080fa:	f77f af79 	ble.w	8007ff0 <_printf_float+0x23c>
 80080fe:	2301      	movs	r3, #1
 8008100:	465a      	mov	r2, fp
 8008102:	4631      	mov	r1, r6
 8008104:	4628      	mov	r0, r5
 8008106:	47b8      	blx	r7
 8008108:	3001      	adds	r0, #1
 800810a:	f43f aeae 	beq.w	8007e6a <_printf_float+0xb6>
 800810e:	f108 0801 	add.w	r8, r8, #1
 8008112:	e7ec      	b.n	80080ee <_printf_float+0x33a>
 8008114:	4642      	mov	r2, r8
 8008116:	4631      	mov	r1, r6
 8008118:	4628      	mov	r0, r5
 800811a:	47b8      	blx	r7
 800811c:	3001      	adds	r0, #1
 800811e:	d1c2      	bne.n	80080a6 <_printf_float+0x2f2>
 8008120:	e6a3      	b.n	8007e6a <_printf_float+0xb6>
 8008122:	2301      	movs	r3, #1
 8008124:	4631      	mov	r1, r6
 8008126:	4628      	mov	r0, r5
 8008128:	9206      	str	r2, [sp, #24]
 800812a:	47b8      	blx	r7
 800812c:	3001      	adds	r0, #1
 800812e:	f43f ae9c 	beq.w	8007e6a <_printf_float+0xb6>
 8008132:	9a06      	ldr	r2, [sp, #24]
 8008134:	f10b 0b01 	add.w	fp, fp, #1
 8008138:	e7bb      	b.n	80080b2 <_printf_float+0x2fe>
 800813a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800813e:	4631      	mov	r1, r6
 8008140:	4628      	mov	r0, r5
 8008142:	47b8      	blx	r7
 8008144:	3001      	adds	r0, #1
 8008146:	d1c0      	bne.n	80080ca <_printf_float+0x316>
 8008148:	e68f      	b.n	8007e6a <_printf_float+0xb6>
 800814a:	9a06      	ldr	r2, [sp, #24]
 800814c:	464b      	mov	r3, r9
 800814e:	4442      	add	r2, r8
 8008150:	4631      	mov	r1, r6
 8008152:	4628      	mov	r0, r5
 8008154:	47b8      	blx	r7
 8008156:	3001      	adds	r0, #1
 8008158:	d1c3      	bne.n	80080e2 <_printf_float+0x32e>
 800815a:	e686      	b.n	8007e6a <_printf_float+0xb6>
 800815c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008160:	f1ba 0f01 	cmp.w	sl, #1
 8008164:	dc01      	bgt.n	800816a <_printf_float+0x3b6>
 8008166:	07db      	lsls	r3, r3, #31
 8008168:	d536      	bpl.n	80081d8 <_printf_float+0x424>
 800816a:	2301      	movs	r3, #1
 800816c:	4642      	mov	r2, r8
 800816e:	4631      	mov	r1, r6
 8008170:	4628      	mov	r0, r5
 8008172:	47b8      	blx	r7
 8008174:	3001      	adds	r0, #1
 8008176:	f43f ae78 	beq.w	8007e6a <_printf_float+0xb6>
 800817a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800817e:	4631      	mov	r1, r6
 8008180:	4628      	mov	r0, r5
 8008182:	47b8      	blx	r7
 8008184:	3001      	adds	r0, #1
 8008186:	f43f ae70 	beq.w	8007e6a <_printf_float+0xb6>
 800818a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800818e:	2200      	movs	r2, #0
 8008190:	2300      	movs	r3, #0
 8008192:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8008196:	f7f8 fcaf 	bl	8000af8 <__aeabi_dcmpeq>
 800819a:	b9c0      	cbnz	r0, 80081ce <_printf_float+0x41a>
 800819c:	4653      	mov	r3, sl
 800819e:	f108 0201 	add.w	r2, r8, #1
 80081a2:	4631      	mov	r1, r6
 80081a4:	4628      	mov	r0, r5
 80081a6:	47b8      	blx	r7
 80081a8:	3001      	adds	r0, #1
 80081aa:	d10c      	bne.n	80081c6 <_printf_float+0x412>
 80081ac:	e65d      	b.n	8007e6a <_printf_float+0xb6>
 80081ae:	2301      	movs	r3, #1
 80081b0:	465a      	mov	r2, fp
 80081b2:	4631      	mov	r1, r6
 80081b4:	4628      	mov	r0, r5
 80081b6:	47b8      	blx	r7
 80081b8:	3001      	adds	r0, #1
 80081ba:	f43f ae56 	beq.w	8007e6a <_printf_float+0xb6>
 80081be:	f108 0801 	add.w	r8, r8, #1
 80081c2:	45d0      	cmp	r8, sl
 80081c4:	dbf3      	blt.n	80081ae <_printf_float+0x3fa>
 80081c6:	464b      	mov	r3, r9
 80081c8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80081cc:	e6df      	b.n	8007f8e <_printf_float+0x1da>
 80081ce:	f04f 0800 	mov.w	r8, #0
 80081d2:	f104 0b1a 	add.w	fp, r4, #26
 80081d6:	e7f4      	b.n	80081c2 <_printf_float+0x40e>
 80081d8:	2301      	movs	r3, #1
 80081da:	4642      	mov	r2, r8
 80081dc:	e7e1      	b.n	80081a2 <_printf_float+0x3ee>
 80081de:	2301      	movs	r3, #1
 80081e0:	464a      	mov	r2, r9
 80081e2:	4631      	mov	r1, r6
 80081e4:	4628      	mov	r0, r5
 80081e6:	47b8      	blx	r7
 80081e8:	3001      	adds	r0, #1
 80081ea:	f43f ae3e 	beq.w	8007e6a <_printf_float+0xb6>
 80081ee:	f108 0801 	add.w	r8, r8, #1
 80081f2:	68e3      	ldr	r3, [r4, #12]
 80081f4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80081f6:	1a5b      	subs	r3, r3, r1
 80081f8:	4543      	cmp	r3, r8
 80081fa:	dcf0      	bgt.n	80081de <_printf_float+0x42a>
 80081fc:	e6fc      	b.n	8007ff8 <_printf_float+0x244>
 80081fe:	f04f 0800 	mov.w	r8, #0
 8008202:	f104 0919 	add.w	r9, r4, #25
 8008206:	e7f4      	b.n	80081f2 <_printf_float+0x43e>

08008208 <_printf_common>:
 8008208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800820c:	4616      	mov	r6, r2
 800820e:	4698      	mov	r8, r3
 8008210:	688a      	ldr	r2, [r1, #8]
 8008212:	690b      	ldr	r3, [r1, #16]
 8008214:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008218:	4293      	cmp	r3, r2
 800821a:	bfb8      	it	lt
 800821c:	4613      	movlt	r3, r2
 800821e:	6033      	str	r3, [r6, #0]
 8008220:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008224:	4607      	mov	r7, r0
 8008226:	460c      	mov	r4, r1
 8008228:	b10a      	cbz	r2, 800822e <_printf_common+0x26>
 800822a:	3301      	adds	r3, #1
 800822c:	6033      	str	r3, [r6, #0]
 800822e:	6823      	ldr	r3, [r4, #0]
 8008230:	0699      	lsls	r1, r3, #26
 8008232:	bf42      	ittt	mi
 8008234:	6833      	ldrmi	r3, [r6, #0]
 8008236:	3302      	addmi	r3, #2
 8008238:	6033      	strmi	r3, [r6, #0]
 800823a:	6825      	ldr	r5, [r4, #0]
 800823c:	f015 0506 	ands.w	r5, r5, #6
 8008240:	d106      	bne.n	8008250 <_printf_common+0x48>
 8008242:	f104 0a19 	add.w	sl, r4, #25
 8008246:	68e3      	ldr	r3, [r4, #12]
 8008248:	6832      	ldr	r2, [r6, #0]
 800824a:	1a9b      	subs	r3, r3, r2
 800824c:	42ab      	cmp	r3, r5
 800824e:	dc26      	bgt.n	800829e <_printf_common+0x96>
 8008250:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008254:	6822      	ldr	r2, [r4, #0]
 8008256:	3b00      	subs	r3, #0
 8008258:	bf18      	it	ne
 800825a:	2301      	movne	r3, #1
 800825c:	0692      	lsls	r2, r2, #26
 800825e:	d42b      	bmi.n	80082b8 <_printf_common+0xb0>
 8008260:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008264:	4641      	mov	r1, r8
 8008266:	4638      	mov	r0, r7
 8008268:	47c8      	blx	r9
 800826a:	3001      	adds	r0, #1
 800826c:	d01e      	beq.n	80082ac <_printf_common+0xa4>
 800826e:	6823      	ldr	r3, [r4, #0]
 8008270:	6922      	ldr	r2, [r4, #16]
 8008272:	f003 0306 	and.w	r3, r3, #6
 8008276:	2b04      	cmp	r3, #4
 8008278:	bf02      	ittt	eq
 800827a:	68e5      	ldreq	r5, [r4, #12]
 800827c:	6833      	ldreq	r3, [r6, #0]
 800827e:	1aed      	subeq	r5, r5, r3
 8008280:	68a3      	ldr	r3, [r4, #8]
 8008282:	bf0c      	ite	eq
 8008284:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008288:	2500      	movne	r5, #0
 800828a:	4293      	cmp	r3, r2
 800828c:	bfc4      	itt	gt
 800828e:	1a9b      	subgt	r3, r3, r2
 8008290:	18ed      	addgt	r5, r5, r3
 8008292:	2600      	movs	r6, #0
 8008294:	341a      	adds	r4, #26
 8008296:	42b5      	cmp	r5, r6
 8008298:	d11a      	bne.n	80082d0 <_printf_common+0xc8>
 800829a:	2000      	movs	r0, #0
 800829c:	e008      	b.n	80082b0 <_printf_common+0xa8>
 800829e:	2301      	movs	r3, #1
 80082a0:	4652      	mov	r2, sl
 80082a2:	4641      	mov	r1, r8
 80082a4:	4638      	mov	r0, r7
 80082a6:	47c8      	blx	r9
 80082a8:	3001      	adds	r0, #1
 80082aa:	d103      	bne.n	80082b4 <_printf_common+0xac>
 80082ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80082b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082b4:	3501      	adds	r5, #1
 80082b6:	e7c6      	b.n	8008246 <_printf_common+0x3e>
 80082b8:	18e1      	adds	r1, r4, r3
 80082ba:	1c5a      	adds	r2, r3, #1
 80082bc:	2030      	movs	r0, #48	@ 0x30
 80082be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80082c2:	4422      	add	r2, r4
 80082c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80082c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80082cc:	3302      	adds	r3, #2
 80082ce:	e7c7      	b.n	8008260 <_printf_common+0x58>
 80082d0:	2301      	movs	r3, #1
 80082d2:	4622      	mov	r2, r4
 80082d4:	4641      	mov	r1, r8
 80082d6:	4638      	mov	r0, r7
 80082d8:	47c8      	blx	r9
 80082da:	3001      	adds	r0, #1
 80082dc:	d0e6      	beq.n	80082ac <_printf_common+0xa4>
 80082de:	3601      	adds	r6, #1
 80082e0:	e7d9      	b.n	8008296 <_printf_common+0x8e>
	...

080082e4 <_printf_i>:
 80082e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80082e8:	7e0f      	ldrb	r7, [r1, #24]
 80082ea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80082ec:	2f78      	cmp	r7, #120	@ 0x78
 80082ee:	4691      	mov	r9, r2
 80082f0:	4680      	mov	r8, r0
 80082f2:	460c      	mov	r4, r1
 80082f4:	469a      	mov	sl, r3
 80082f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80082fa:	d807      	bhi.n	800830c <_printf_i+0x28>
 80082fc:	2f62      	cmp	r7, #98	@ 0x62
 80082fe:	d80a      	bhi.n	8008316 <_printf_i+0x32>
 8008300:	2f00      	cmp	r7, #0
 8008302:	f000 80d2 	beq.w	80084aa <_printf_i+0x1c6>
 8008306:	2f58      	cmp	r7, #88	@ 0x58
 8008308:	f000 80b9 	beq.w	800847e <_printf_i+0x19a>
 800830c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008310:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008314:	e03a      	b.n	800838c <_printf_i+0xa8>
 8008316:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800831a:	2b15      	cmp	r3, #21
 800831c:	d8f6      	bhi.n	800830c <_printf_i+0x28>
 800831e:	a101      	add	r1, pc, #4	@ (adr r1, 8008324 <_printf_i+0x40>)
 8008320:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008324:	0800837d 	.word	0x0800837d
 8008328:	08008391 	.word	0x08008391
 800832c:	0800830d 	.word	0x0800830d
 8008330:	0800830d 	.word	0x0800830d
 8008334:	0800830d 	.word	0x0800830d
 8008338:	0800830d 	.word	0x0800830d
 800833c:	08008391 	.word	0x08008391
 8008340:	0800830d 	.word	0x0800830d
 8008344:	0800830d 	.word	0x0800830d
 8008348:	0800830d 	.word	0x0800830d
 800834c:	0800830d 	.word	0x0800830d
 8008350:	08008491 	.word	0x08008491
 8008354:	080083bb 	.word	0x080083bb
 8008358:	0800844b 	.word	0x0800844b
 800835c:	0800830d 	.word	0x0800830d
 8008360:	0800830d 	.word	0x0800830d
 8008364:	080084b3 	.word	0x080084b3
 8008368:	0800830d 	.word	0x0800830d
 800836c:	080083bb 	.word	0x080083bb
 8008370:	0800830d 	.word	0x0800830d
 8008374:	0800830d 	.word	0x0800830d
 8008378:	08008453 	.word	0x08008453
 800837c:	6833      	ldr	r3, [r6, #0]
 800837e:	1d1a      	adds	r2, r3, #4
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	6032      	str	r2, [r6, #0]
 8008384:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008388:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800838c:	2301      	movs	r3, #1
 800838e:	e09d      	b.n	80084cc <_printf_i+0x1e8>
 8008390:	6833      	ldr	r3, [r6, #0]
 8008392:	6820      	ldr	r0, [r4, #0]
 8008394:	1d19      	adds	r1, r3, #4
 8008396:	6031      	str	r1, [r6, #0]
 8008398:	0606      	lsls	r6, r0, #24
 800839a:	d501      	bpl.n	80083a0 <_printf_i+0xbc>
 800839c:	681d      	ldr	r5, [r3, #0]
 800839e:	e003      	b.n	80083a8 <_printf_i+0xc4>
 80083a0:	0645      	lsls	r5, r0, #25
 80083a2:	d5fb      	bpl.n	800839c <_printf_i+0xb8>
 80083a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80083a8:	2d00      	cmp	r5, #0
 80083aa:	da03      	bge.n	80083b4 <_printf_i+0xd0>
 80083ac:	232d      	movs	r3, #45	@ 0x2d
 80083ae:	426d      	negs	r5, r5
 80083b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80083b4:	4859      	ldr	r0, [pc, #356]	@ (800851c <_printf_i+0x238>)
 80083b6:	230a      	movs	r3, #10
 80083b8:	e011      	b.n	80083de <_printf_i+0xfa>
 80083ba:	6821      	ldr	r1, [r4, #0]
 80083bc:	6833      	ldr	r3, [r6, #0]
 80083be:	0608      	lsls	r0, r1, #24
 80083c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80083c4:	d402      	bmi.n	80083cc <_printf_i+0xe8>
 80083c6:	0649      	lsls	r1, r1, #25
 80083c8:	bf48      	it	mi
 80083ca:	b2ad      	uxthmi	r5, r5
 80083cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80083ce:	4853      	ldr	r0, [pc, #332]	@ (800851c <_printf_i+0x238>)
 80083d0:	6033      	str	r3, [r6, #0]
 80083d2:	bf14      	ite	ne
 80083d4:	230a      	movne	r3, #10
 80083d6:	2308      	moveq	r3, #8
 80083d8:	2100      	movs	r1, #0
 80083da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80083de:	6866      	ldr	r6, [r4, #4]
 80083e0:	60a6      	str	r6, [r4, #8]
 80083e2:	2e00      	cmp	r6, #0
 80083e4:	bfa2      	ittt	ge
 80083e6:	6821      	ldrge	r1, [r4, #0]
 80083e8:	f021 0104 	bicge.w	r1, r1, #4
 80083ec:	6021      	strge	r1, [r4, #0]
 80083ee:	b90d      	cbnz	r5, 80083f4 <_printf_i+0x110>
 80083f0:	2e00      	cmp	r6, #0
 80083f2:	d04b      	beq.n	800848c <_printf_i+0x1a8>
 80083f4:	4616      	mov	r6, r2
 80083f6:	fbb5 f1f3 	udiv	r1, r5, r3
 80083fa:	fb03 5711 	mls	r7, r3, r1, r5
 80083fe:	5dc7      	ldrb	r7, [r0, r7]
 8008400:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008404:	462f      	mov	r7, r5
 8008406:	42bb      	cmp	r3, r7
 8008408:	460d      	mov	r5, r1
 800840a:	d9f4      	bls.n	80083f6 <_printf_i+0x112>
 800840c:	2b08      	cmp	r3, #8
 800840e:	d10b      	bne.n	8008428 <_printf_i+0x144>
 8008410:	6823      	ldr	r3, [r4, #0]
 8008412:	07df      	lsls	r7, r3, #31
 8008414:	d508      	bpl.n	8008428 <_printf_i+0x144>
 8008416:	6923      	ldr	r3, [r4, #16]
 8008418:	6861      	ldr	r1, [r4, #4]
 800841a:	4299      	cmp	r1, r3
 800841c:	bfde      	ittt	le
 800841e:	2330      	movle	r3, #48	@ 0x30
 8008420:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008424:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008428:	1b92      	subs	r2, r2, r6
 800842a:	6122      	str	r2, [r4, #16]
 800842c:	f8cd a000 	str.w	sl, [sp]
 8008430:	464b      	mov	r3, r9
 8008432:	aa03      	add	r2, sp, #12
 8008434:	4621      	mov	r1, r4
 8008436:	4640      	mov	r0, r8
 8008438:	f7ff fee6 	bl	8008208 <_printf_common>
 800843c:	3001      	adds	r0, #1
 800843e:	d14a      	bne.n	80084d6 <_printf_i+0x1f2>
 8008440:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008444:	b004      	add	sp, #16
 8008446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800844a:	6823      	ldr	r3, [r4, #0]
 800844c:	f043 0320 	orr.w	r3, r3, #32
 8008450:	6023      	str	r3, [r4, #0]
 8008452:	4833      	ldr	r0, [pc, #204]	@ (8008520 <_printf_i+0x23c>)
 8008454:	2778      	movs	r7, #120	@ 0x78
 8008456:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800845a:	6823      	ldr	r3, [r4, #0]
 800845c:	6831      	ldr	r1, [r6, #0]
 800845e:	061f      	lsls	r7, r3, #24
 8008460:	f851 5b04 	ldr.w	r5, [r1], #4
 8008464:	d402      	bmi.n	800846c <_printf_i+0x188>
 8008466:	065f      	lsls	r7, r3, #25
 8008468:	bf48      	it	mi
 800846a:	b2ad      	uxthmi	r5, r5
 800846c:	6031      	str	r1, [r6, #0]
 800846e:	07d9      	lsls	r1, r3, #31
 8008470:	bf44      	itt	mi
 8008472:	f043 0320 	orrmi.w	r3, r3, #32
 8008476:	6023      	strmi	r3, [r4, #0]
 8008478:	b11d      	cbz	r5, 8008482 <_printf_i+0x19e>
 800847a:	2310      	movs	r3, #16
 800847c:	e7ac      	b.n	80083d8 <_printf_i+0xf4>
 800847e:	4827      	ldr	r0, [pc, #156]	@ (800851c <_printf_i+0x238>)
 8008480:	e7e9      	b.n	8008456 <_printf_i+0x172>
 8008482:	6823      	ldr	r3, [r4, #0]
 8008484:	f023 0320 	bic.w	r3, r3, #32
 8008488:	6023      	str	r3, [r4, #0]
 800848a:	e7f6      	b.n	800847a <_printf_i+0x196>
 800848c:	4616      	mov	r6, r2
 800848e:	e7bd      	b.n	800840c <_printf_i+0x128>
 8008490:	6833      	ldr	r3, [r6, #0]
 8008492:	6825      	ldr	r5, [r4, #0]
 8008494:	6961      	ldr	r1, [r4, #20]
 8008496:	1d18      	adds	r0, r3, #4
 8008498:	6030      	str	r0, [r6, #0]
 800849a:	062e      	lsls	r6, r5, #24
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	d501      	bpl.n	80084a4 <_printf_i+0x1c0>
 80084a0:	6019      	str	r1, [r3, #0]
 80084a2:	e002      	b.n	80084aa <_printf_i+0x1c6>
 80084a4:	0668      	lsls	r0, r5, #25
 80084a6:	d5fb      	bpl.n	80084a0 <_printf_i+0x1bc>
 80084a8:	8019      	strh	r1, [r3, #0]
 80084aa:	2300      	movs	r3, #0
 80084ac:	6123      	str	r3, [r4, #16]
 80084ae:	4616      	mov	r6, r2
 80084b0:	e7bc      	b.n	800842c <_printf_i+0x148>
 80084b2:	6833      	ldr	r3, [r6, #0]
 80084b4:	1d1a      	adds	r2, r3, #4
 80084b6:	6032      	str	r2, [r6, #0]
 80084b8:	681e      	ldr	r6, [r3, #0]
 80084ba:	6862      	ldr	r2, [r4, #4]
 80084bc:	2100      	movs	r1, #0
 80084be:	4630      	mov	r0, r6
 80084c0:	f7f7 fe9e 	bl	8000200 <memchr>
 80084c4:	b108      	cbz	r0, 80084ca <_printf_i+0x1e6>
 80084c6:	1b80      	subs	r0, r0, r6
 80084c8:	6060      	str	r0, [r4, #4]
 80084ca:	6863      	ldr	r3, [r4, #4]
 80084cc:	6123      	str	r3, [r4, #16]
 80084ce:	2300      	movs	r3, #0
 80084d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80084d4:	e7aa      	b.n	800842c <_printf_i+0x148>
 80084d6:	6923      	ldr	r3, [r4, #16]
 80084d8:	4632      	mov	r2, r6
 80084da:	4649      	mov	r1, r9
 80084dc:	4640      	mov	r0, r8
 80084de:	47d0      	blx	sl
 80084e0:	3001      	adds	r0, #1
 80084e2:	d0ad      	beq.n	8008440 <_printf_i+0x15c>
 80084e4:	6823      	ldr	r3, [r4, #0]
 80084e6:	079b      	lsls	r3, r3, #30
 80084e8:	d413      	bmi.n	8008512 <_printf_i+0x22e>
 80084ea:	68e0      	ldr	r0, [r4, #12]
 80084ec:	9b03      	ldr	r3, [sp, #12]
 80084ee:	4298      	cmp	r0, r3
 80084f0:	bfb8      	it	lt
 80084f2:	4618      	movlt	r0, r3
 80084f4:	e7a6      	b.n	8008444 <_printf_i+0x160>
 80084f6:	2301      	movs	r3, #1
 80084f8:	4632      	mov	r2, r6
 80084fa:	4649      	mov	r1, r9
 80084fc:	4640      	mov	r0, r8
 80084fe:	47d0      	blx	sl
 8008500:	3001      	adds	r0, #1
 8008502:	d09d      	beq.n	8008440 <_printf_i+0x15c>
 8008504:	3501      	adds	r5, #1
 8008506:	68e3      	ldr	r3, [r4, #12]
 8008508:	9903      	ldr	r1, [sp, #12]
 800850a:	1a5b      	subs	r3, r3, r1
 800850c:	42ab      	cmp	r3, r5
 800850e:	dcf2      	bgt.n	80084f6 <_printf_i+0x212>
 8008510:	e7eb      	b.n	80084ea <_printf_i+0x206>
 8008512:	2500      	movs	r5, #0
 8008514:	f104 0619 	add.w	r6, r4, #25
 8008518:	e7f5      	b.n	8008506 <_printf_i+0x222>
 800851a:	bf00      	nop
 800851c:	0800aaea 	.word	0x0800aaea
 8008520:	0800aafb 	.word	0x0800aafb

08008524 <siprintf>:
 8008524:	b40e      	push	{r1, r2, r3}
 8008526:	b500      	push	{lr}
 8008528:	b09c      	sub	sp, #112	@ 0x70
 800852a:	ab1d      	add	r3, sp, #116	@ 0x74
 800852c:	9002      	str	r0, [sp, #8]
 800852e:	9006      	str	r0, [sp, #24]
 8008530:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008534:	4809      	ldr	r0, [pc, #36]	@ (800855c <siprintf+0x38>)
 8008536:	9107      	str	r1, [sp, #28]
 8008538:	9104      	str	r1, [sp, #16]
 800853a:	4909      	ldr	r1, [pc, #36]	@ (8008560 <siprintf+0x3c>)
 800853c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008540:	9105      	str	r1, [sp, #20]
 8008542:	6800      	ldr	r0, [r0, #0]
 8008544:	9301      	str	r3, [sp, #4]
 8008546:	a902      	add	r1, sp, #8
 8008548:	f000 ffd2 	bl	80094f0 <_svfiprintf_r>
 800854c:	9b02      	ldr	r3, [sp, #8]
 800854e:	2200      	movs	r2, #0
 8008550:	701a      	strb	r2, [r3, #0]
 8008552:	b01c      	add	sp, #112	@ 0x70
 8008554:	f85d eb04 	ldr.w	lr, [sp], #4
 8008558:	b003      	add	sp, #12
 800855a:	4770      	bx	lr
 800855c:	2000009c 	.word	0x2000009c
 8008560:	ffff0208 	.word	0xffff0208

08008564 <std>:
 8008564:	2300      	movs	r3, #0
 8008566:	b510      	push	{r4, lr}
 8008568:	4604      	mov	r4, r0
 800856a:	e9c0 3300 	strd	r3, r3, [r0]
 800856e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008572:	6083      	str	r3, [r0, #8]
 8008574:	8181      	strh	r1, [r0, #12]
 8008576:	6643      	str	r3, [r0, #100]	@ 0x64
 8008578:	81c2      	strh	r2, [r0, #14]
 800857a:	6183      	str	r3, [r0, #24]
 800857c:	4619      	mov	r1, r3
 800857e:	2208      	movs	r2, #8
 8008580:	305c      	adds	r0, #92	@ 0x5c
 8008582:	f000 f8c3 	bl	800870c <memset>
 8008586:	4b0d      	ldr	r3, [pc, #52]	@ (80085bc <std+0x58>)
 8008588:	6263      	str	r3, [r4, #36]	@ 0x24
 800858a:	4b0d      	ldr	r3, [pc, #52]	@ (80085c0 <std+0x5c>)
 800858c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800858e:	4b0d      	ldr	r3, [pc, #52]	@ (80085c4 <std+0x60>)
 8008590:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008592:	4b0d      	ldr	r3, [pc, #52]	@ (80085c8 <std+0x64>)
 8008594:	6323      	str	r3, [r4, #48]	@ 0x30
 8008596:	4b0d      	ldr	r3, [pc, #52]	@ (80085cc <std+0x68>)
 8008598:	6224      	str	r4, [r4, #32]
 800859a:	429c      	cmp	r4, r3
 800859c:	d006      	beq.n	80085ac <std+0x48>
 800859e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80085a2:	4294      	cmp	r4, r2
 80085a4:	d002      	beq.n	80085ac <std+0x48>
 80085a6:	33d0      	adds	r3, #208	@ 0xd0
 80085a8:	429c      	cmp	r4, r3
 80085aa:	d105      	bne.n	80085b8 <std+0x54>
 80085ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80085b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085b4:	f000 b8e0 	b.w	8008778 <__retarget_lock_init_recursive>
 80085b8:	bd10      	pop	{r4, pc}
 80085ba:	bf00      	nop
 80085bc:	0800a335 	.word	0x0800a335
 80085c0:	0800a357 	.word	0x0800a357
 80085c4:	0800a38f 	.word	0x0800a38f
 80085c8:	0800a3b3 	.word	0x0800a3b3
 80085cc:	2000139c 	.word	0x2000139c

080085d0 <stdio_exit_handler>:
 80085d0:	4a02      	ldr	r2, [pc, #8]	@ (80085dc <stdio_exit_handler+0xc>)
 80085d2:	4903      	ldr	r1, [pc, #12]	@ (80085e0 <stdio_exit_handler+0x10>)
 80085d4:	4803      	ldr	r0, [pc, #12]	@ (80085e4 <stdio_exit_handler+0x14>)
 80085d6:	f000 b869 	b.w	80086ac <_fwalk_sglue>
 80085da:	bf00      	nop
 80085dc:	20000090 	.word	0x20000090
 80085e0:	08009bc9 	.word	0x08009bc9
 80085e4:	200000a0 	.word	0x200000a0

080085e8 <cleanup_stdio>:
 80085e8:	6841      	ldr	r1, [r0, #4]
 80085ea:	4b0c      	ldr	r3, [pc, #48]	@ (800861c <cleanup_stdio+0x34>)
 80085ec:	4299      	cmp	r1, r3
 80085ee:	b510      	push	{r4, lr}
 80085f0:	4604      	mov	r4, r0
 80085f2:	d001      	beq.n	80085f8 <cleanup_stdio+0x10>
 80085f4:	f001 fae8 	bl	8009bc8 <_fflush_r>
 80085f8:	68a1      	ldr	r1, [r4, #8]
 80085fa:	4b09      	ldr	r3, [pc, #36]	@ (8008620 <cleanup_stdio+0x38>)
 80085fc:	4299      	cmp	r1, r3
 80085fe:	d002      	beq.n	8008606 <cleanup_stdio+0x1e>
 8008600:	4620      	mov	r0, r4
 8008602:	f001 fae1 	bl	8009bc8 <_fflush_r>
 8008606:	68e1      	ldr	r1, [r4, #12]
 8008608:	4b06      	ldr	r3, [pc, #24]	@ (8008624 <cleanup_stdio+0x3c>)
 800860a:	4299      	cmp	r1, r3
 800860c:	d004      	beq.n	8008618 <cleanup_stdio+0x30>
 800860e:	4620      	mov	r0, r4
 8008610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008614:	f001 bad8 	b.w	8009bc8 <_fflush_r>
 8008618:	bd10      	pop	{r4, pc}
 800861a:	bf00      	nop
 800861c:	2000139c 	.word	0x2000139c
 8008620:	20001404 	.word	0x20001404
 8008624:	2000146c 	.word	0x2000146c

08008628 <global_stdio_init.part.0>:
 8008628:	b510      	push	{r4, lr}
 800862a:	4b0b      	ldr	r3, [pc, #44]	@ (8008658 <global_stdio_init.part.0+0x30>)
 800862c:	4c0b      	ldr	r4, [pc, #44]	@ (800865c <global_stdio_init.part.0+0x34>)
 800862e:	4a0c      	ldr	r2, [pc, #48]	@ (8008660 <global_stdio_init.part.0+0x38>)
 8008630:	601a      	str	r2, [r3, #0]
 8008632:	4620      	mov	r0, r4
 8008634:	2200      	movs	r2, #0
 8008636:	2104      	movs	r1, #4
 8008638:	f7ff ff94 	bl	8008564 <std>
 800863c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008640:	2201      	movs	r2, #1
 8008642:	2109      	movs	r1, #9
 8008644:	f7ff ff8e 	bl	8008564 <std>
 8008648:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800864c:	2202      	movs	r2, #2
 800864e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008652:	2112      	movs	r1, #18
 8008654:	f7ff bf86 	b.w	8008564 <std>
 8008658:	200014d4 	.word	0x200014d4
 800865c:	2000139c 	.word	0x2000139c
 8008660:	080085d1 	.word	0x080085d1

08008664 <__sfp_lock_acquire>:
 8008664:	4801      	ldr	r0, [pc, #4]	@ (800866c <__sfp_lock_acquire+0x8>)
 8008666:	f000 b888 	b.w	800877a <__retarget_lock_acquire_recursive>
 800866a:	bf00      	nop
 800866c:	200014d9 	.word	0x200014d9

08008670 <__sfp_lock_release>:
 8008670:	4801      	ldr	r0, [pc, #4]	@ (8008678 <__sfp_lock_release+0x8>)
 8008672:	f000 b883 	b.w	800877c <__retarget_lock_release_recursive>
 8008676:	bf00      	nop
 8008678:	200014d9 	.word	0x200014d9

0800867c <__sinit>:
 800867c:	b510      	push	{r4, lr}
 800867e:	4604      	mov	r4, r0
 8008680:	f7ff fff0 	bl	8008664 <__sfp_lock_acquire>
 8008684:	6a23      	ldr	r3, [r4, #32]
 8008686:	b11b      	cbz	r3, 8008690 <__sinit+0x14>
 8008688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800868c:	f7ff bff0 	b.w	8008670 <__sfp_lock_release>
 8008690:	4b04      	ldr	r3, [pc, #16]	@ (80086a4 <__sinit+0x28>)
 8008692:	6223      	str	r3, [r4, #32]
 8008694:	4b04      	ldr	r3, [pc, #16]	@ (80086a8 <__sinit+0x2c>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d1f5      	bne.n	8008688 <__sinit+0xc>
 800869c:	f7ff ffc4 	bl	8008628 <global_stdio_init.part.0>
 80086a0:	e7f2      	b.n	8008688 <__sinit+0xc>
 80086a2:	bf00      	nop
 80086a4:	080085e9 	.word	0x080085e9
 80086a8:	200014d4 	.word	0x200014d4

080086ac <_fwalk_sglue>:
 80086ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086b0:	4607      	mov	r7, r0
 80086b2:	4688      	mov	r8, r1
 80086b4:	4614      	mov	r4, r2
 80086b6:	2600      	movs	r6, #0
 80086b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80086bc:	f1b9 0901 	subs.w	r9, r9, #1
 80086c0:	d505      	bpl.n	80086ce <_fwalk_sglue+0x22>
 80086c2:	6824      	ldr	r4, [r4, #0]
 80086c4:	2c00      	cmp	r4, #0
 80086c6:	d1f7      	bne.n	80086b8 <_fwalk_sglue+0xc>
 80086c8:	4630      	mov	r0, r6
 80086ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086ce:	89ab      	ldrh	r3, [r5, #12]
 80086d0:	2b01      	cmp	r3, #1
 80086d2:	d907      	bls.n	80086e4 <_fwalk_sglue+0x38>
 80086d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80086d8:	3301      	adds	r3, #1
 80086da:	d003      	beq.n	80086e4 <_fwalk_sglue+0x38>
 80086dc:	4629      	mov	r1, r5
 80086de:	4638      	mov	r0, r7
 80086e0:	47c0      	blx	r8
 80086e2:	4306      	orrs	r6, r0
 80086e4:	3568      	adds	r5, #104	@ 0x68
 80086e6:	e7e9      	b.n	80086bc <_fwalk_sglue+0x10>

080086e8 <iprintf>:
 80086e8:	b40f      	push	{r0, r1, r2, r3}
 80086ea:	b507      	push	{r0, r1, r2, lr}
 80086ec:	4906      	ldr	r1, [pc, #24]	@ (8008708 <iprintf+0x20>)
 80086ee:	ab04      	add	r3, sp, #16
 80086f0:	6808      	ldr	r0, [r1, #0]
 80086f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80086f6:	6881      	ldr	r1, [r0, #8]
 80086f8:	9301      	str	r3, [sp, #4]
 80086fa:	f001 f81f 	bl	800973c <_vfiprintf_r>
 80086fe:	b003      	add	sp, #12
 8008700:	f85d eb04 	ldr.w	lr, [sp], #4
 8008704:	b004      	add	sp, #16
 8008706:	4770      	bx	lr
 8008708:	2000009c 	.word	0x2000009c

0800870c <memset>:
 800870c:	4402      	add	r2, r0
 800870e:	4603      	mov	r3, r0
 8008710:	4293      	cmp	r3, r2
 8008712:	d100      	bne.n	8008716 <memset+0xa>
 8008714:	4770      	bx	lr
 8008716:	f803 1b01 	strb.w	r1, [r3], #1
 800871a:	e7f9      	b.n	8008710 <memset+0x4>

0800871c <_localeconv_r>:
 800871c:	4800      	ldr	r0, [pc, #0]	@ (8008720 <_localeconv_r+0x4>)
 800871e:	4770      	bx	lr
 8008720:	200001dc 	.word	0x200001dc

08008724 <__errno>:
 8008724:	4b01      	ldr	r3, [pc, #4]	@ (800872c <__errno+0x8>)
 8008726:	6818      	ldr	r0, [r3, #0]
 8008728:	4770      	bx	lr
 800872a:	bf00      	nop
 800872c:	2000009c 	.word	0x2000009c

08008730 <__libc_init_array>:
 8008730:	b570      	push	{r4, r5, r6, lr}
 8008732:	4d0d      	ldr	r5, [pc, #52]	@ (8008768 <__libc_init_array+0x38>)
 8008734:	4c0d      	ldr	r4, [pc, #52]	@ (800876c <__libc_init_array+0x3c>)
 8008736:	1b64      	subs	r4, r4, r5
 8008738:	10a4      	asrs	r4, r4, #2
 800873a:	2600      	movs	r6, #0
 800873c:	42a6      	cmp	r6, r4
 800873e:	d109      	bne.n	8008754 <__libc_init_array+0x24>
 8008740:	4d0b      	ldr	r5, [pc, #44]	@ (8008770 <__libc_init_array+0x40>)
 8008742:	4c0c      	ldr	r4, [pc, #48]	@ (8008774 <__libc_init_array+0x44>)
 8008744:	f002 f8f0 	bl	800a928 <_init>
 8008748:	1b64      	subs	r4, r4, r5
 800874a:	10a4      	asrs	r4, r4, #2
 800874c:	2600      	movs	r6, #0
 800874e:	42a6      	cmp	r6, r4
 8008750:	d105      	bne.n	800875e <__libc_init_array+0x2e>
 8008752:	bd70      	pop	{r4, r5, r6, pc}
 8008754:	f855 3b04 	ldr.w	r3, [r5], #4
 8008758:	4798      	blx	r3
 800875a:	3601      	adds	r6, #1
 800875c:	e7ee      	b.n	800873c <__libc_init_array+0xc>
 800875e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008762:	4798      	blx	r3
 8008764:	3601      	adds	r6, #1
 8008766:	e7f2      	b.n	800874e <__libc_init_array+0x1e>
 8008768:	0800ae50 	.word	0x0800ae50
 800876c:	0800ae50 	.word	0x0800ae50
 8008770:	0800ae50 	.word	0x0800ae50
 8008774:	0800ae54 	.word	0x0800ae54

08008778 <__retarget_lock_init_recursive>:
 8008778:	4770      	bx	lr

0800877a <__retarget_lock_acquire_recursive>:
 800877a:	4770      	bx	lr

0800877c <__retarget_lock_release_recursive>:
 800877c:	4770      	bx	lr

0800877e <memcpy>:
 800877e:	440a      	add	r2, r1
 8008780:	4291      	cmp	r1, r2
 8008782:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008786:	d100      	bne.n	800878a <memcpy+0xc>
 8008788:	4770      	bx	lr
 800878a:	b510      	push	{r4, lr}
 800878c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008790:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008794:	4291      	cmp	r1, r2
 8008796:	d1f9      	bne.n	800878c <memcpy+0xe>
 8008798:	bd10      	pop	{r4, pc}

0800879a <quorem>:
 800879a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800879e:	6903      	ldr	r3, [r0, #16]
 80087a0:	690c      	ldr	r4, [r1, #16]
 80087a2:	42a3      	cmp	r3, r4
 80087a4:	4607      	mov	r7, r0
 80087a6:	db7e      	blt.n	80088a6 <quorem+0x10c>
 80087a8:	3c01      	subs	r4, #1
 80087aa:	f101 0814 	add.w	r8, r1, #20
 80087ae:	00a3      	lsls	r3, r4, #2
 80087b0:	f100 0514 	add.w	r5, r0, #20
 80087b4:	9300      	str	r3, [sp, #0]
 80087b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80087ba:	9301      	str	r3, [sp, #4]
 80087bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80087c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80087c4:	3301      	adds	r3, #1
 80087c6:	429a      	cmp	r2, r3
 80087c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80087cc:	fbb2 f6f3 	udiv	r6, r2, r3
 80087d0:	d32e      	bcc.n	8008830 <quorem+0x96>
 80087d2:	f04f 0a00 	mov.w	sl, #0
 80087d6:	46c4      	mov	ip, r8
 80087d8:	46ae      	mov	lr, r5
 80087da:	46d3      	mov	fp, sl
 80087dc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80087e0:	b298      	uxth	r0, r3
 80087e2:	fb06 a000 	mla	r0, r6, r0, sl
 80087e6:	0c02      	lsrs	r2, r0, #16
 80087e8:	0c1b      	lsrs	r3, r3, #16
 80087ea:	fb06 2303 	mla	r3, r6, r3, r2
 80087ee:	f8de 2000 	ldr.w	r2, [lr]
 80087f2:	b280      	uxth	r0, r0
 80087f4:	b292      	uxth	r2, r2
 80087f6:	1a12      	subs	r2, r2, r0
 80087f8:	445a      	add	r2, fp
 80087fa:	f8de 0000 	ldr.w	r0, [lr]
 80087fe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008802:	b29b      	uxth	r3, r3
 8008804:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008808:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800880c:	b292      	uxth	r2, r2
 800880e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008812:	45e1      	cmp	r9, ip
 8008814:	f84e 2b04 	str.w	r2, [lr], #4
 8008818:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800881c:	d2de      	bcs.n	80087dc <quorem+0x42>
 800881e:	9b00      	ldr	r3, [sp, #0]
 8008820:	58eb      	ldr	r3, [r5, r3]
 8008822:	b92b      	cbnz	r3, 8008830 <quorem+0x96>
 8008824:	9b01      	ldr	r3, [sp, #4]
 8008826:	3b04      	subs	r3, #4
 8008828:	429d      	cmp	r5, r3
 800882a:	461a      	mov	r2, r3
 800882c:	d32f      	bcc.n	800888e <quorem+0xf4>
 800882e:	613c      	str	r4, [r7, #16]
 8008830:	4638      	mov	r0, r7
 8008832:	f001 fc77 	bl	800a124 <__mcmp>
 8008836:	2800      	cmp	r0, #0
 8008838:	db25      	blt.n	8008886 <quorem+0xec>
 800883a:	4629      	mov	r1, r5
 800883c:	2000      	movs	r0, #0
 800883e:	f858 2b04 	ldr.w	r2, [r8], #4
 8008842:	f8d1 c000 	ldr.w	ip, [r1]
 8008846:	fa1f fe82 	uxth.w	lr, r2
 800884a:	fa1f f38c 	uxth.w	r3, ip
 800884e:	eba3 030e 	sub.w	r3, r3, lr
 8008852:	4403      	add	r3, r0
 8008854:	0c12      	lsrs	r2, r2, #16
 8008856:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800885a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800885e:	b29b      	uxth	r3, r3
 8008860:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008864:	45c1      	cmp	r9, r8
 8008866:	f841 3b04 	str.w	r3, [r1], #4
 800886a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800886e:	d2e6      	bcs.n	800883e <quorem+0xa4>
 8008870:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008874:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008878:	b922      	cbnz	r2, 8008884 <quorem+0xea>
 800887a:	3b04      	subs	r3, #4
 800887c:	429d      	cmp	r5, r3
 800887e:	461a      	mov	r2, r3
 8008880:	d30b      	bcc.n	800889a <quorem+0x100>
 8008882:	613c      	str	r4, [r7, #16]
 8008884:	3601      	adds	r6, #1
 8008886:	4630      	mov	r0, r6
 8008888:	b003      	add	sp, #12
 800888a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800888e:	6812      	ldr	r2, [r2, #0]
 8008890:	3b04      	subs	r3, #4
 8008892:	2a00      	cmp	r2, #0
 8008894:	d1cb      	bne.n	800882e <quorem+0x94>
 8008896:	3c01      	subs	r4, #1
 8008898:	e7c6      	b.n	8008828 <quorem+0x8e>
 800889a:	6812      	ldr	r2, [r2, #0]
 800889c:	3b04      	subs	r3, #4
 800889e:	2a00      	cmp	r2, #0
 80088a0:	d1ef      	bne.n	8008882 <quorem+0xe8>
 80088a2:	3c01      	subs	r4, #1
 80088a4:	e7ea      	b.n	800887c <quorem+0xe2>
 80088a6:	2000      	movs	r0, #0
 80088a8:	e7ee      	b.n	8008888 <quorem+0xee>
 80088aa:	0000      	movs	r0, r0
 80088ac:	0000      	movs	r0, r0
	...

080088b0 <_dtoa_r>:
 80088b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088b4:	69c7      	ldr	r7, [r0, #28]
 80088b6:	b099      	sub	sp, #100	@ 0x64
 80088b8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80088bc:	ec55 4b10 	vmov	r4, r5, d0
 80088c0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80088c2:	9109      	str	r1, [sp, #36]	@ 0x24
 80088c4:	4683      	mov	fp, r0
 80088c6:	920e      	str	r2, [sp, #56]	@ 0x38
 80088c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80088ca:	b97f      	cbnz	r7, 80088ec <_dtoa_r+0x3c>
 80088cc:	2010      	movs	r0, #16
 80088ce:	f001 f84d 	bl	800996c <malloc>
 80088d2:	4602      	mov	r2, r0
 80088d4:	f8cb 001c 	str.w	r0, [fp, #28]
 80088d8:	b920      	cbnz	r0, 80088e4 <_dtoa_r+0x34>
 80088da:	4ba7      	ldr	r3, [pc, #668]	@ (8008b78 <_dtoa_r+0x2c8>)
 80088dc:	21ef      	movs	r1, #239	@ 0xef
 80088de:	48a7      	ldr	r0, [pc, #668]	@ (8008b7c <_dtoa_r+0x2cc>)
 80088e0:	f001 ff22 	bl	800a728 <__assert_func>
 80088e4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80088e8:	6007      	str	r7, [r0, #0]
 80088ea:	60c7      	str	r7, [r0, #12]
 80088ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 80088f0:	6819      	ldr	r1, [r3, #0]
 80088f2:	b159      	cbz	r1, 800890c <_dtoa_r+0x5c>
 80088f4:	685a      	ldr	r2, [r3, #4]
 80088f6:	604a      	str	r2, [r1, #4]
 80088f8:	2301      	movs	r3, #1
 80088fa:	4093      	lsls	r3, r2
 80088fc:	608b      	str	r3, [r1, #8]
 80088fe:	4658      	mov	r0, fp
 8008900:	f001 f9d6 	bl	8009cb0 <_Bfree>
 8008904:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008908:	2200      	movs	r2, #0
 800890a:	601a      	str	r2, [r3, #0]
 800890c:	1e2b      	subs	r3, r5, #0
 800890e:	bfb9      	ittee	lt
 8008910:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008914:	9303      	strlt	r3, [sp, #12]
 8008916:	2300      	movge	r3, #0
 8008918:	6033      	strge	r3, [r6, #0]
 800891a:	9f03      	ldr	r7, [sp, #12]
 800891c:	4b98      	ldr	r3, [pc, #608]	@ (8008b80 <_dtoa_r+0x2d0>)
 800891e:	bfbc      	itt	lt
 8008920:	2201      	movlt	r2, #1
 8008922:	6032      	strlt	r2, [r6, #0]
 8008924:	43bb      	bics	r3, r7
 8008926:	d112      	bne.n	800894e <_dtoa_r+0x9e>
 8008928:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800892a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800892e:	6013      	str	r3, [r2, #0]
 8008930:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008934:	4323      	orrs	r3, r4
 8008936:	f000 854d 	beq.w	80093d4 <_dtoa_r+0xb24>
 800893a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800893c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008b94 <_dtoa_r+0x2e4>
 8008940:	2b00      	cmp	r3, #0
 8008942:	f000 854f 	beq.w	80093e4 <_dtoa_r+0xb34>
 8008946:	f10a 0303 	add.w	r3, sl, #3
 800894a:	f000 bd49 	b.w	80093e0 <_dtoa_r+0xb30>
 800894e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008952:	2200      	movs	r2, #0
 8008954:	ec51 0b17 	vmov	r0, r1, d7
 8008958:	2300      	movs	r3, #0
 800895a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800895e:	f7f8 f8cb 	bl	8000af8 <__aeabi_dcmpeq>
 8008962:	4680      	mov	r8, r0
 8008964:	b158      	cbz	r0, 800897e <_dtoa_r+0xce>
 8008966:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008968:	2301      	movs	r3, #1
 800896a:	6013      	str	r3, [r2, #0]
 800896c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800896e:	b113      	cbz	r3, 8008976 <_dtoa_r+0xc6>
 8008970:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008972:	4b84      	ldr	r3, [pc, #528]	@ (8008b84 <_dtoa_r+0x2d4>)
 8008974:	6013      	str	r3, [r2, #0]
 8008976:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008b98 <_dtoa_r+0x2e8>
 800897a:	f000 bd33 	b.w	80093e4 <_dtoa_r+0xb34>
 800897e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008982:	aa16      	add	r2, sp, #88	@ 0x58
 8008984:	a917      	add	r1, sp, #92	@ 0x5c
 8008986:	4658      	mov	r0, fp
 8008988:	f001 fc7c 	bl	800a284 <__d2b>
 800898c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008990:	4681      	mov	r9, r0
 8008992:	2e00      	cmp	r6, #0
 8008994:	d077      	beq.n	8008a86 <_dtoa_r+0x1d6>
 8008996:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008998:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800899c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80089a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80089a4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80089a8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80089ac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80089b0:	4619      	mov	r1, r3
 80089b2:	2200      	movs	r2, #0
 80089b4:	4b74      	ldr	r3, [pc, #464]	@ (8008b88 <_dtoa_r+0x2d8>)
 80089b6:	f7f7 fc7f 	bl	80002b8 <__aeabi_dsub>
 80089ba:	a369      	add	r3, pc, #420	@ (adr r3, 8008b60 <_dtoa_r+0x2b0>)
 80089bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089c0:	f7f7 fe32 	bl	8000628 <__aeabi_dmul>
 80089c4:	a368      	add	r3, pc, #416	@ (adr r3, 8008b68 <_dtoa_r+0x2b8>)
 80089c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ca:	f7f7 fc77 	bl	80002bc <__adddf3>
 80089ce:	4604      	mov	r4, r0
 80089d0:	4630      	mov	r0, r6
 80089d2:	460d      	mov	r5, r1
 80089d4:	f7f7 fdbe 	bl	8000554 <__aeabi_i2d>
 80089d8:	a365      	add	r3, pc, #404	@ (adr r3, 8008b70 <_dtoa_r+0x2c0>)
 80089da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089de:	f7f7 fe23 	bl	8000628 <__aeabi_dmul>
 80089e2:	4602      	mov	r2, r0
 80089e4:	460b      	mov	r3, r1
 80089e6:	4620      	mov	r0, r4
 80089e8:	4629      	mov	r1, r5
 80089ea:	f7f7 fc67 	bl	80002bc <__adddf3>
 80089ee:	4604      	mov	r4, r0
 80089f0:	460d      	mov	r5, r1
 80089f2:	f7f8 f8c9 	bl	8000b88 <__aeabi_d2iz>
 80089f6:	2200      	movs	r2, #0
 80089f8:	4607      	mov	r7, r0
 80089fa:	2300      	movs	r3, #0
 80089fc:	4620      	mov	r0, r4
 80089fe:	4629      	mov	r1, r5
 8008a00:	f7f8 f884 	bl	8000b0c <__aeabi_dcmplt>
 8008a04:	b140      	cbz	r0, 8008a18 <_dtoa_r+0x168>
 8008a06:	4638      	mov	r0, r7
 8008a08:	f7f7 fda4 	bl	8000554 <__aeabi_i2d>
 8008a0c:	4622      	mov	r2, r4
 8008a0e:	462b      	mov	r3, r5
 8008a10:	f7f8 f872 	bl	8000af8 <__aeabi_dcmpeq>
 8008a14:	b900      	cbnz	r0, 8008a18 <_dtoa_r+0x168>
 8008a16:	3f01      	subs	r7, #1
 8008a18:	2f16      	cmp	r7, #22
 8008a1a:	d851      	bhi.n	8008ac0 <_dtoa_r+0x210>
 8008a1c:	4b5b      	ldr	r3, [pc, #364]	@ (8008b8c <_dtoa_r+0x2dc>)
 8008a1e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008a2a:	f7f8 f86f 	bl	8000b0c <__aeabi_dcmplt>
 8008a2e:	2800      	cmp	r0, #0
 8008a30:	d048      	beq.n	8008ac4 <_dtoa_r+0x214>
 8008a32:	3f01      	subs	r7, #1
 8008a34:	2300      	movs	r3, #0
 8008a36:	9312      	str	r3, [sp, #72]	@ 0x48
 8008a38:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008a3a:	1b9b      	subs	r3, r3, r6
 8008a3c:	1e5a      	subs	r2, r3, #1
 8008a3e:	bf44      	itt	mi
 8008a40:	f1c3 0801 	rsbmi	r8, r3, #1
 8008a44:	2300      	movmi	r3, #0
 8008a46:	9208      	str	r2, [sp, #32]
 8008a48:	bf54      	ite	pl
 8008a4a:	f04f 0800 	movpl.w	r8, #0
 8008a4e:	9308      	strmi	r3, [sp, #32]
 8008a50:	2f00      	cmp	r7, #0
 8008a52:	db39      	blt.n	8008ac8 <_dtoa_r+0x218>
 8008a54:	9b08      	ldr	r3, [sp, #32]
 8008a56:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008a58:	443b      	add	r3, r7
 8008a5a:	9308      	str	r3, [sp, #32]
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a62:	2b09      	cmp	r3, #9
 8008a64:	d864      	bhi.n	8008b30 <_dtoa_r+0x280>
 8008a66:	2b05      	cmp	r3, #5
 8008a68:	bfc4      	itt	gt
 8008a6a:	3b04      	subgt	r3, #4
 8008a6c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008a6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a70:	f1a3 0302 	sub.w	r3, r3, #2
 8008a74:	bfcc      	ite	gt
 8008a76:	2400      	movgt	r4, #0
 8008a78:	2401      	movle	r4, #1
 8008a7a:	2b03      	cmp	r3, #3
 8008a7c:	d863      	bhi.n	8008b46 <_dtoa_r+0x296>
 8008a7e:	e8df f003 	tbb	[pc, r3]
 8008a82:	372a      	.short	0x372a
 8008a84:	5535      	.short	0x5535
 8008a86:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008a8a:	441e      	add	r6, r3
 8008a8c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008a90:	2b20      	cmp	r3, #32
 8008a92:	bfc1      	itttt	gt
 8008a94:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008a98:	409f      	lslgt	r7, r3
 8008a9a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008a9e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008aa2:	bfd6      	itet	le
 8008aa4:	f1c3 0320 	rsble	r3, r3, #32
 8008aa8:	ea47 0003 	orrgt.w	r0, r7, r3
 8008aac:	fa04 f003 	lslle.w	r0, r4, r3
 8008ab0:	f7f7 fd40 	bl	8000534 <__aeabi_ui2d>
 8008ab4:	2201      	movs	r2, #1
 8008ab6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008aba:	3e01      	subs	r6, #1
 8008abc:	9214      	str	r2, [sp, #80]	@ 0x50
 8008abe:	e777      	b.n	80089b0 <_dtoa_r+0x100>
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	e7b8      	b.n	8008a36 <_dtoa_r+0x186>
 8008ac4:	9012      	str	r0, [sp, #72]	@ 0x48
 8008ac6:	e7b7      	b.n	8008a38 <_dtoa_r+0x188>
 8008ac8:	427b      	negs	r3, r7
 8008aca:	930a      	str	r3, [sp, #40]	@ 0x28
 8008acc:	2300      	movs	r3, #0
 8008ace:	eba8 0807 	sub.w	r8, r8, r7
 8008ad2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008ad4:	e7c4      	b.n	8008a60 <_dtoa_r+0x1b0>
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008ada:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	dc35      	bgt.n	8008b4c <_dtoa_r+0x29c>
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	9300      	str	r3, [sp, #0]
 8008ae4:	9307      	str	r3, [sp, #28]
 8008ae6:	461a      	mov	r2, r3
 8008ae8:	920e      	str	r2, [sp, #56]	@ 0x38
 8008aea:	e00b      	b.n	8008b04 <_dtoa_r+0x254>
 8008aec:	2301      	movs	r3, #1
 8008aee:	e7f3      	b.n	8008ad8 <_dtoa_r+0x228>
 8008af0:	2300      	movs	r3, #0
 8008af2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008af4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008af6:	18fb      	adds	r3, r7, r3
 8008af8:	9300      	str	r3, [sp, #0]
 8008afa:	3301      	adds	r3, #1
 8008afc:	2b01      	cmp	r3, #1
 8008afe:	9307      	str	r3, [sp, #28]
 8008b00:	bfb8      	it	lt
 8008b02:	2301      	movlt	r3, #1
 8008b04:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008b08:	2100      	movs	r1, #0
 8008b0a:	2204      	movs	r2, #4
 8008b0c:	f102 0514 	add.w	r5, r2, #20
 8008b10:	429d      	cmp	r5, r3
 8008b12:	d91f      	bls.n	8008b54 <_dtoa_r+0x2a4>
 8008b14:	6041      	str	r1, [r0, #4]
 8008b16:	4658      	mov	r0, fp
 8008b18:	f001 f88a 	bl	8009c30 <_Balloc>
 8008b1c:	4682      	mov	sl, r0
 8008b1e:	2800      	cmp	r0, #0
 8008b20:	d13c      	bne.n	8008b9c <_dtoa_r+0x2ec>
 8008b22:	4b1b      	ldr	r3, [pc, #108]	@ (8008b90 <_dtoa_r+0x2e0>)
 8008b24:	4602      	mov	r2, r0
 8008b26:	f240 11af 	movw	r1, #431	@ 0x1af
 8008b2a:	e6d8      	b.n	80088de <_dtoa_r+0x2e>
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	e7e0      	b.n	8008af2 <_dtoa_r+0x242>
 8008b30:	2401      	movs	r4, #1
 8008b32:	2300      	movs	r3, #0
 8008b34:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b36:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008b38:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008b3c:	9300      	str	r3, [sp, #0]
 8008b3e:	9307      	str	r3, [sp, #28]
 8008b40:	2200      	movs	r2, #0
 8008b42:	2312      	movs	r3, #18
 8008b44:	e7d0      	b.n	8008ae8 <_dtoa_r+0x238>
 8008b46:	2301      	movs	r3, #1
 8008b48:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008b4a:	e7f5      	b.n	8008b38 <_dtoa_r+0x288>
 8008b4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b4e:	9300      	str	r3, [sp, #0]
 8008b50:	9307      	str	r3, [sp, #28]
 8008b52:	e7d7      	b.n	8008b04 <_dtoa_r+0x254>
 8008b54:	3101      	adds	r1, #1
 8008b56:	0052      	lsls	r2, r2, #1
 8008b58:	e7d8      	b.n	8008b0c <_dtoa_r+0x25c>
 8008b5a:	bf00      	nop
 8008b5c:	f3af 8000 	nop.w
 8008b60:	636f4361 	.word	0x636f4361
 8008b64:	3fd287a7 	.word	0x3fd287a7
 8008b68:	8b60c8b3 	.word	0x8b60c8b3
 8008b6c:	3fc68a28 	.word	0x3fc68a28
 8008b70:	509f79fb 	.word	0x509f79fb
 8008b74:	3fd34413 	.word	0x3fd34413
 8008b78:	0800ab19 	.word	0x0800ab19
 8008b7c:	0800ab30 	.word	0x0800ab30
 8008b80:	7ff00000 	.word	0x7ff00000
 8008b84:	0800aae9 	.word	0x0800aae9
 8008b88:	3ff80000 	.word	0x3ff80000
 8008b8c:	0800ac38 	.word	0x0800ac38
 8008b90:	0800ab88 	.word	0x0800ab88
 8008b94:	0800ab15 	.word	0x0800ab15
 8008b98:	0800aae8 	.word	0x0800aae8
 8008b9c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008ba0:	6018      	str	r0, [r3, #0]
 8008ba2:	9b07      	ldr	r3, [sp, #28]
 8008ba4:	2b0e      	cmp	r3, #14
 8008ba6:	f200 80a4 	bhi.w	8008cf2 <_dtoa_r+0x442>
 8008baa:	2c00      	cmp	r4, #0
 8008bac:	f000 80a1 	beq.w	8008cf2 <_dtoa_r+0x442>
 8008bb0:	2f00      	cmp	r7, #0
 8008bb2:	dd33      	ble.n	8008c1c <_dtoa_r+0x36c>
 8008bb4:	4bad      	ldr	r3, [pc, #692]	@ (8008e6c <_dtoa_r+0x5bc>)
 8008bb6:	f007 020f 	and.w	r2, r7, #15
 8008bba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008bbe:	ed93 7b00 	vldr	d7, [r3]
 8008bc2:	05f8      	lsls	r0, r7, #23
 8008bc4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008bc8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008bcc:	d516      	bpl.n	8008bfc <_dtoa_r+0x34c>
 8008bce:	4ba8      	ldr	r3, [pc, #672]	@ (8008e70 <_dtoa_r+0x5c0>)
 8008bd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008bd4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008bd8:	f7f7 fe50 	bl	800087c <__aeabi_ddiv>
 8008bdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008be0:	f004 040f 	and.w	r4, r4, #15
 8008be4:	2603      	movs	r6, #3
 8008be6:	4da2      	ldr	r5, [pc, #648]	@ (8008e70 <_dtoa_r+0x5c0>)
 8008be8:	b954      	cbnz	r4, 8008c00 <_dtoa_r+0x350>
 8008bea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008bee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008bf2:	f7f7 fe43 	bl	800087c <__aeabi_ddiv>
 8008bf6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008bfa:	e028      	b.n	8008c4e <_dtoa_r+0x39e>
 8008bfc:	2602      	movs	r6, #2
 8008bfe:	e7f2      	b.n	8008be6 <_dtoa_r+0x336>
 8008c00:	07e1      	lsls	r1, r4, #31
 8008c02:	d508      	bpl.n	8008c16 <_dtoa_r+0x366>
 8008c04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008c08:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008c0c:	f7f7 fd0c 	bl	8000628 <__aeabi_dmul>
 8008c10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008c14:	3601      	adds	r6, #1
 8008c16:	1064      	asrs	r4, r4, #1
 8008c18:	3508      	adds	r5, #8
 8008c1a:	e7e5      	b.n	8008be8 <_dtoa_r+0x338>
 8008c1c:	f000 80d2 	beq.w	8008dc4 <_dtoa_r+0x514>
 8008c20:	427c      	negs	r4, r7
 8008c22:	4b92      	ldr	r3, [pc, #584]	@ (8008e6c <_dtoa_r+0x5bc>)
 8008c24:	4d92      	ldr	r5, [pc, #584]	@ (8008e70 <_dtoa_r+0x5c0>)
 8008c26:	f004 020f 	and.w	r2, r4, #15
 8008c2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c32:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008c36:	f7f7 fcf7 	bl	8000628 <__aeabi_dmul>
 8008c3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c3e:	1124      	asrs	r4, r4, #4
 8008c40:	2300      	movs	r3, #0
 8008c42:	2602      	movs	r6, #2
 8008c44:	2c00      	cmp	r4, #0
 8008c46:	f040 80b2 	bne.w	8008dae <_dtoa_r+0x4fe>
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d1d3      	bne.n	8008bf6 <_dtoa_r+0x346>
 8008c4e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008c50:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	f000 80b7 	beq.w	8008dc8 <_dtoa_r+0x518>
 8008c5a:	4b86      	ldr	r3, [pc, #536]	@ (8008e74 <_dtoa_r+0x5c4>)
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	4620      	mov	r0, r4
 8008c60:	4629      	mov	r1, r5
 8008c62:	f7f7 ff53 	bl	8000b0c <__aeabi_dcmplt>
 8008c66:	2800      	cmp	r0, #0
 8008c68:	f000 80ae 	beq.w	8008dc8 <_dtoa_r+0x518>
 8008c6c:	9b07      	ldr	r3, [sp, #28]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	f000 80aa 	beq.w	8008dc8 <_dtoa_r+0x518>
 8008c74:	9b00      	ldr	r3, [sp, #0]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	dd37      	ble.n	8008cea <_dtoa_r+0x43a>
 8008c7a:	1e7b      	subs	r3, r7, #1
 8008c7c:	9304      	str	r3, [sp, #16]
 8008c7e:	4620      	mov	r0, r4
 8008c80:	4b7d      	ldr	r3, [pc, #500]	@ (8008e78 <_dtoa_r+0x5c8>)
 8008c82:	2200      	movs	r2, #0
 8008c84:	4629      	mov	r1, r5
 8008c86:	f7f7 fccf 	bl	8000628 <__aeabi_dmul>
 8008c8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c8e:	9c00      	ldr	r4, [sp, #0]
 8008c90:	3601      	adds	r6, #1
 8008c92:	4630      	mov	r0, r6
 8008c94:	f7f7 fc5e 	bl	8000554 <__aeabi_i2d>
 8008c98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c9c:	f7f7 fcc4 	bl	8000628 <__aeabi_dmul>
 8008ca0:	4b76      	ldr	r3, [pc, #472]	@ (8008e7c <_dtoa_r+0x5cc>)
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	f7f7 fb0a 	bl	80002bc <__adddf3>
 8008ca8:	4605      	mov	r5, r0
 8008caa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008cae:	2c00      	cmp	r4, #0
 8008cb0:	f040 808d 	bne.w	8008dce <_dtoa_r+0x51e>
 8008cb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cb8:	4b71      	ldr	r3, [pc, #452]	@ (8008e80 <_dtoa_r+0x5d0>)
 8008cba:	2200      	movs	r2, #0
 8008cbc:	f7f7 fafc 	bl	80002b8 <__aeabi_dsub>
 8008cc0:	4602      	mov	r2, r0
 8008cc2:	460b      	mov	r3, r1
 8008cc4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008cc8:	462a      	mov	r2, r5
 8008cca:	4633      	mov	r3, r6
 8008ccc:	f7f7 ff3c 	bl	8000b48 <__aeabi_dcmpgt>
 8008cd0:	2800      	cmp	r0, #0
 8008cd2:	f040 828b 	bne.w	80091ec <_dtoa_r+0x93c>
 8008cd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cda:	462a      	mov	r2, r5
 8008cdc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008ce0:	f7f7 ff14 	bl	8000b0c <__aeabi_dcmplt>
 8008ce4:	2800      	cmp	r0, #0
 8008ce6:	f040 8128 	bne.w	8008f3a <_dtoa_r+0x68a>
 8008cea:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008cee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008cf2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	f2c0 815a 	blt.w	8008fae <_dtoa_r+0x6fe>
 8008cfa:	2f0e      	cmp	r7, #14
 8008cfc:	f300 8157 	bgt.w	8008fae <_dtoa_r+0x6fe>
 8008d00:	4b5a      	ldr	r3, [pc, #360]	@ (8008e6c <_dtoa_r+0x5bc>)
 8008d02:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008d06:	ed93 7b00 	vldr	d7, [r3]
 8008d0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	ed8d 7b00 	vstr	d7, [sp]
 8008d12:	da03      	bge.n	8008d1c <_dtoa_r+0x46c>
 8008d14:	9b07      	ldr	r3, [sp, #28]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	f340 8101 	ble.w	8008f1e <_dtoa_r+0x66e>
 8008d1c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008d20:	4656      	mov	r6, sl
 8008d22:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d26:	4620      	mov	r0, r4
 8008d28:	4629      	mov	r1, r5
 8008d2a:	f7f7 fda7 	bl	800087c <__aeabi_ddiv>
 8008d2e:	f7f7 ff2b 	bl	8000b88 <__aeabi_d2iz>
 8008d32:	4680      	mov	r8, r0
 8008d34:	f7f7 fc0e 	bl	8000554 <__aeabi_i2d>
 8008d38:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d3c:	f7f7 fc74 	bl	8000628 <__aeabi_dmul>
 8008d40:	4602      	mov	r2, r0
 8008d42:	460b      	mov	r3, r1
 8008d44:	4620      	mov	r0, r4
 8008d46:	4629      	mov	r1, r5
 8008d48:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008d4c:	f7f7 fab4 	bl	80002b8 <__aeabi_dsub>
 8008d50:	f806 4b01 	strb.w	r4, [r6], #1
 8008d54:	9d07      	ldr	r5, [sp, #28]
 8008d56:	eba6 040a 	sub.w	r4, r6, sl
 8008d5a:	42a5      	cmp	r5, r4
 8008d5c:	4602      	mov	r2, r0
 8008d5e:	460b      	mov	r3, r1
 8008d60:	f040 8117 	bne.w	8008f92 <_dtoa_r+0x6e2>
 8008d64:	f7f7 faaa 	bl	80002bc <__adddf3>
 8008d68:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d6c:	4604      	mov	r4, r0
 8008d6e:	460d      	mov	r5, r1
 8008d70:	f7f7 feea 	bl	8000b48 <__aeabi_dcmpgt>
 8008d74:	2800      	cmp	r0, #0
 8008d76:	f040 80f9 	bne.w	8008f6c <_dtoa_r+0x6bc>
 8008d7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d7e:	4620      	mov	r0, r4
 8008d80:	4629      	mov	r1, r5
 8008d82:	f7f7 feb9 	bl	8000af8 <__aeabi_dcmpeq>
 8008d86:	b118      	cbz	r0, 8008d90 <_dtoa_r+0x4e0>
 8008d88:	f018 0f01 	tst.w	r8, #1
 8008d8c:	f040 80ee 	bne.w	8008f6c <_dtoa_r+0x6bc>
 8008d90:	4649      	mov	r1, r9
 8008d92:	4658      	mov	r0, fp
 8008d94:	f000 ff8c 	bl	8009cb0 <_Bfree>
 8008d98:	2300      	movs	r3, #0
 8008d9a:	7033      	strb	r3, [r6, #0]
 8008d9c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008d9e:	3701      	adds	r7, #1
 8008da0:	601f      	str	r7, [r3, #0]
 8008da2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	f000 831d 	beq.w	80093e4 <_dtoa_r+0xb34>
 8008daa:	601e      	str	r6, [r3, #0]
 8008dac:	e31a      	b.n	80093e4 <_dtoa_r+0xb34>
 8008dae:	07e2      	lsls	r2, r4, #31
 8008db0:	d505      	bpl.n	8008dbe <_dtoa_r+0x50e>
 8008db2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008db6:	f7f7 fc37 	bl	8000628 <__aeabi_dmul>
 8008dba:	3601      	adds	r6, #1
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	1064      	asrs	r4, r4, #1
 8008dc0:	3508      	adds	r5, #8
 8008dc2:	e73f      	b.n	8008c44 <_dtoa_r+0x394>
 8008dc4:	2602      	movs	r6, #2
 8008dc6:	e742      	b.n	8008c4e <_dtoa_r+0x39e>
 8008dc8:	9c07      	ldr	r4, [sp, #28]
 8008dca:	9704      	str	r7, [sp, #16]
 8008dcc:	e761      	b.n	8008c92 <_dtoa_r+0x3e2>
 8008dce:	4b27      	ldr	r3, [pc, #156]	@ (8008e6c <_dtoa_r+0x5bc>)
 8008dd0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008dd2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008dd6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008dda:	4454      	add	r4, sl
 8008ddc:	2900      	cmp	r1, #0
 8008dde:	d053      	beq.n	8008e88 <_dtoa_r+0x5d8>
 8008de0:	4928      	ldr	r1, [pc, #160]	@ (8008e84 <_dtoa_r+0x5d4>)
 8008de2:	2000      	movs	r0, #0
 8008de4:	f7f7 fd4a 	bl	800087c <__aeabi_ddiv>
 8008de8:	4633      	mov	r3, r6
 8008dea:	462a      	mov	r2, r5
 8008dec:	f7f7 fa64 	bl	80002b8 <__aeabi_dsub>
 8008df0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008df4:	4656      	mov	r6, sl
 8008df6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008dfa:	f7f7 fec5 	bl	8000b88 <__aeabi_d2iz>
 8008dfe:	4605      	mov	r5, r0
 8008e00:	f7f7 fba8 	bl	8000554 <__aeabi_i2d>
 8008e04:	4602      	mov	r2, r0
 8008e06:	460b      	mov	r3, r1
 8008e08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e0c:	f7f7 fa54 	bl	80002b8 <__aeabi_dsub>
 8008e10:	3530      	adds	r5, #48	@ 0x30
 8008e12:	4602      	mov	r2, r0
 8008e14:	460b      	mov	r3, r1
 8008e16:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008e1a:	f806 5b01 	strb.w	r5, [r6], #1
 8008e1e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008e22:	f7f7 fe73 	bl	8000b0c <__aeabi_dcmplt>
 8008e26:	2800      	cmp	r0, #0
 8008e28:	d171      	bne.n	8008f0e <_dtoa_r+0x65e>
 8008e2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008e2e:	4911      	ldr	r1, [pc, #68]	@ (8008e74 <_dtoa_r+0x5c4>)
 8008e30:	2000      	movs	r0, #0
 8008e32:	f7f7 fa41 	bl	80002b8 <__aeabi_dsub>
 8008e36:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008e3a:	f7f7 fe67 	bl	8000b0c <__aeabi_dcmplt>
 8008e3e:	2800      	cmp	r0, #0
 8008e40:	f040 8095 	bne.w	8008f6e <_dtoa_r+0x6be>
 8008e44:	42a6      	cmp	r6, r4
 8008e46:	f43f af50 	beq.w	8008cea <_dtoa_r+0x43a>
 8008e4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008e4e:	4b0a      	ldr	r3, [pc, #40]	@ (8008e78 <_dtoa_r+0x5c8>)
 8008e50:	2200      	movs	r2, #0
 8008e52:	f7f7 fbe9 	bl	8000628 <__aeabi_dmul>
 8008e56:	4b08      	ldr	r3, [pc, #32]	@ (8008e78 <_dtoa_r+0x5c8>)
 8008e58:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e62:	f7f7 fbe1 	bl	8000628 <__aeabi_dmul>
 8008e66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e6a:	e7c4      	b.n	8008df6 <_dtoa_r+0x546>
 8008e6c:	0800ac38 	.word	0x0800ac38
 8008e70:	0800ac10 	.word	0x0800ac10
 8008e74:	3ff00000 	.word	0x3ff00000
 8008e78:	40240000 	.word	0x40240000
 8008e7c:	401c0000 	.word	0x401c0000
 8008e80:	40140000 	.word	0x40140000
 8008e84:	3fe00000 	.word	0x3fe00000
 8008e88:	4631      	mov	r1, r6
 8008e8a:	4628      	mov	r0, r5
 8008e8c:	f7f7 fbcc 	bl	8000628 <__aeabi_dmul>
 8008e90:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008e94:	9415      	str	r4, [sp, #84]	@ 0x54
 8008e96:	4656      	mov	r6, sl
 8008e98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e9c:	f7f7 fe74 	bl	8000b88 <__aeabi_d2iz>
 8008ea0:	4605      	mov	r5, r0
 8008ea2:	f7f7 fb57 	bl	8000554 <__aeabi_i2d>
 8008ea6:	4602      	mov	r2, r0
 8008ea8:	460b      	mov	r3, r1
 8008eaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008eae:	f7f7 fa03 	bl	80002b8 <__aeabi_dsub>
 8008eb2:	3530      	adds	r5, #48	@ 0x30
 8008eb4:	f806 5b01 	strb.w	r5, [r6], #1
 8008eb8:	4602      	mov	r2, r0
 8008eba:	460b      	mov	r3, r1
 8008ebc:	42a6      	cmp	r6, r4
 8008ebe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008ec2:	f04f 0200 	mov.w	r2, #0
 8008ec6:	d124      	bne.n	8008f12 <_dtoa_r+0x662>
 8008ec8:	4bac      	ldr	r3, [pc, #688]	@ (800917c <_dtoa_r+0x8cc>)
 8008eca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008ece:	f7f7 f9f5 	bl	80002bc <__adddf3>
 8008ed2:	4602      	mov	r2, r0
 8008ed4:	460b      	mov	r3, r1
 8008ed6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008eda:	f7f7 fe35 	bl	8000b48 <__aeabi_dcmpgt>
 8008ede:	2800      	cmp	r0, #0
 8008ee0:	d145      	bne.n	8008f6e <_dtoa_r+0x6be>
 8008ee2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008ee6:	49a5      	ldr	r1, [pc, #660]	@ (800917c <_dtoa_r+0x8cc>)
 8008ee8:	2000      	movs	r0, #0
 8008eea:	f7f7 f9e5 	bl	80002b8 <__aeabi_dsub>
 8008eee:	4602      	mov	r2, r0
 8008ef0:	460b      	mov	r3, r1
 8008ef2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ef6:	f7f7 fe09 	bl	8000b0c <__aeabi_dcmplt>
 8008efa:	2800      	cmp	r0, #0
 8008efc:	f43f aef5 	beq.w	8008cea <_dtoa_r+0x43a>
 8008f00:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008f02:	1e73      	subs	r3, r6, #1
 8008f04:	9315      	str	r3, [sp, #84]	@ 0x54
 8008f06:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008f0a:	2b30      	cmp	r3, #48	@ 0x30
 8008f0c:	d0f8      	beq.n	8008f00 <_dtoa_r+0x650>
 8008f0e:	9f04      	ldr	r7, [sp, #16]
 8008f10:	e73e      	b.n	8008d90 <_dtoa_r+0x4e0>
 8008f12:	4b9b      	ldr	r3, [pc, #620]	@ (8009180 <_dtoa_r+0x8d0>)
 8008f14:	f7f7 fb88 	bl	8000628 <__aeabi_dmul>
 8008f18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f1c:	e7bc      	b.n	8008e98 <_dtoa_r+0x5e8>
 8008f1e:	d10c      	bne.n	8008f3a <_dtoa_r+0x68a>
 8008f20:	4b98      	ldr	r3, [pc, #608]	@ (8009184 <_dtoa_r+0x8d4>)
 8008f22:	2200      	movs	r2, #0
 8008f24:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f28:	f7f7 fb7e 	bl	8000628 <__aeabi_dmul>
 8008f2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f30:	f7f7 fe00 	bl	8000b34 <__aeabi_dcmpge>
 8008f34:	2800      	cmp	r0, #0
 8008f36:	f000 8157 	beq.w	80091e8 <_dtoa_r+0x938>
 8008f3a:	2400      	movs	r4, #0
 8008f3c:	4625      	mov	r5, r4
 8008f3e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f40:	43db      	mvns	r3, r3
 8008f42:	9304      	str	r3, [sp, #16]
 8008f44:	4656      	mov	r6, sl
 8008f46:	2700      	movs	r7, #0
 8008f48:	4621      	mov	r1, r4
 8008f4a:	4658      	mov	r0, fp
 8008f4c:	f000 feb0 	bl	8009cb0 <_Bfree>
 8008f50:	2d00      	cmp	r5, #0
 8008f52:	d0dc      	beq.n	8008f0e <_dtoa_r+0x65e>
 8008f54:	b12f      	cbz	r7, 8008f62 <_dtoa_r+0x6b2>
 8008f56:	42af      	cmp	r7, r5
 8008f58:	d003      	beq.n	8008f62 <_dtoa_r+0x6b2>
 8008f5a:	4639      	mov	r1, r7
 8008f5c:	4658      	mov	r0, fp
 8008f5e:	f000 fea7 	bl	8009cb0 <_Bfree>
 8008f62:	4629      	mov	r1, r5
 8008f64:	4658      	mov	r0, fp
 8008f66:	f000 fea3 	bl	8009cb0 <_Bfree>
 8008f6a:	e7d0      	b.n	8008f0e <_dtoa_r+0x65e>
 8008f6c:	9704      	str	r7, [sp, #16]
 8008f6e:	4633      	mov	r3, r6
 8008f70:	461e      	mov	r6, r3
 8008f72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008f76:	2a39      	cmp	r2, #57	@ 0x39
 8008f78:	d107      	bne.n	8008f8a <_dtoa_r+0x6da>
 8008f7a:	459a      	cmp	sl, r3
 8008f7c:	d1f8      	bne.n	8008f70 <_dtoa_r+0x6c0>
 8008f7e:	9a04      	ldr	r2, [sp, #16]
 8008f80:	3201      	adds	r2, #1
 8008f82:	9204      	str	r2, [sp, #16]
 8008f84:	2230      	movs	r2, #48	@ 0x30
 8008f86:	f88a 2000 	strb.w	r2, [sl]
 8008f8a:	781a      	ldrb	r2, [r3, #0]
 8008f8c:	3201      	adds	r2, #1
 8008f8e:	701a      	strb	r2, [r3, #0]
 8008f90:	e7bd      	b.n	8008f0e <_dtoa_r+0x65e>
 8008f92:	4b7b      	ldr	r3, [pc, #492]	@ (8009180 <_dtoa_r+0x8d0>)
 8008f94:	2200      	movs	r2, #0
 8008f96:	f7f7 fb47 	bl	8000628 <__aeabi_dmul>
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	4604      	mov	r4, r0
 8008fa0:	460d      	mov	r5, r1
 8008fa2:	f7f7 fda9 	bl	8000af8 <__aeabi_dcmpeq>
 8008fa6:	2800      	cmp	r0, #0
 8008fa8:	f43f aebb 	beq.w	8008d22 <_dtoa_r+0x472>
 8008fac:	e6f0      	b.n	8008d90 <_dtoa_r+0x4e0>
 8008fae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008fb0:	2a00      	cmp	r2, #0
 8008fb2:	f000 80db 	beq.w	800916c <_dtoa_r+0x8bc>
 8008fb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008fb8:	2a01      	cmp	r2, #1
 8008fba:	f300 80bf 	bgt.w	800913c <_dtoa_r+0x88c>
 8008fbe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008fc0:	2a00      	cmp	r2, #0
 8008fc2:	f000 80b7 	beq.w	8009134 <_dtoa_r+0x884>
 8008fc6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008fca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008fcc:	4646      	mov	r6, r8
 8008fce:	9a08      	ldr	r2, [sp, #32]
 8008fd0:	2101      	movs	r1, #1
 8008fd2:	441a      	add	r2, r3
 8008fd4:	4658      	mov	r0, fp
 8008fd6:	4498      	add	r8, r3
 8008fd8:	9208      	str	r2, [sp, #32]
 8008fda:	f000 ff1d 	bl	8009e18 <__i2b>
 8008fde:	4605      	mov	r5, r0
 8008fe0:	b15e      	cbz	r6, 8008ffa <_dtoa_r+0x74a>
 8008fe2:	9b08      	ldr	r3, [sp, #32]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	dd08      	ble.n	8008ffa <_dtoa_r+0x74a>
 8008fe8:	42b3      	cmp	r3, r6
 8008fea:	9a08      	ldr	r2, [sp, #32]
 8008fec:	bfa8      	it	ge
 8008fee:	4633      	movge	r3, r6
 8008ff0:	eba8 0803 	sub.w	r8, r8, r3
 8008ff4:	1af6      	subs	r6, r6, r3
 8008ff6:	1ad3      	subs	r3, r2, r3
 8008ff8:	9308      	str	r3, [sp, #32]
 8008ffa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ffc:	b1f3      	cbz	r3, 800903c <_dtoa_r+0x78c>
 8008ffe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009000:	2b00      	cmp	r3, #0
 8009002:	f000 80b7 	beq.w	8009174 <_dtoa_r+0x8c4>
 8009006:	b18c      	cbz	r4, 800902c <_dtoa_r+0x77c>
 8009008:	4629      	mov	r1, r5
 800900a:	4622      	mov	r2, r4
 800900c:	4658      	mov	r0, fp
 800900e:	f000 ffc3 	bl	8009f98 <__pow5mult>
 8009012:	464a      	mov	r2, r9
 8009014:	4601      	mov	r1, r0
 8009016:	4605      	mov	r5, r0
 8009018:	4658      	mov	r0, fp
 800901a:	f000 ff13 	bl	8009e44 <__multiply>
 800901e:	4649      	mov	r1, r9
 8009020:	9004      	str	r0, [sp, #16]
 8009022:	4658      	mov	r0, fp
 8009024:	f000 fe44 	bl	8009cb0 <_Bfree>
 8009028:	9b04      	ldr	r3, [sp, #16]
 800902a:	4699      	mov	r9, r3
 800902c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800902e:	1b1a      	subs	r2, r3, r4
 8009030:	d004      	beq.n	800903c <_dtoa_r+0x78c>
 8009032:	4649      	mov	r1, r9
 8009034:	4658      	mov	r0, fp
 8009036:	f000 ffaf 	bl	8009f98 <__pow5mult>
 800903a:	4681      	mov	r9, r0
 800903c:	2101      	movs	r1, #1
 800903e:	4658      	mov	r0, fp
 8009040:	f000 feea 	bl	8009e18 <__i2b>
 8009044:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009046:	4604      	mov	r4, r0
 8009048:	2b00      	cmp	r3, #0
 800904a:	f000 81cf 	beq.w	80093ec <_dtoa_r+0xb3c>
 800904e:	461a      	mov	r2, r3
 8009050:	4601      	mov	r1, r0
 8009052:	4658      	mov	r0, fp
 8009054:	f000 ffa0 	bl	8009f98 <__pow5mult>
 8009058:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800905a:	2b01      	cmp	r3, #1
 800905c:	4604      	mov	r4, r0
 800905e:	f300 8095 	bgt.w	800918c <_dtoa_r+0x8dc>
 8009062:	9b02      	ldr	r3, [sp, #8]
 8009064:	2b00      	cmp	r3, #0
 8009066:	f040 8087 	bne.w	8009178 <_dtoa_r+0x8c8>
 800906a:	9b03      	ldr	r3, [sp, #12]
 800906c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009070:	2b00      	cmp	r3, #0
 8009072:	f040 8089 	bne.w	8009188 <_dtoa_r+0x8d8>
 8009076:	9b03      	ldr	r3, [sp, #12]
 8009078:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800907c:	0d1b      	lsrs	r3, r3, #20
 800907e:	051b      	lsls	r3, r3, #20
 8009080:	b12b      	cbz	r3, 800908e <_dtoa_r+0x7de>
 8009082:	9b08      	ldr	r3, [sp, #32]
 8009084:	3301      	adds	r3, #1
 8009086:	9308      	str	r3, [sp, #32]
 8009088:	f108 0801 	add.w	r8, r8, #1
 800908c:	2301      	movs	r3, #1
 800908e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009090:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009092:	2b00      	cmp	r3, #0
 8009094:	f000 81b0 	beq.w	80093f8 <_dtoa_r+0xb48>
 8009098:	6923      	ldr	r3, [r4, #16]
 800909a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800909e:	6918      	ldr	r0, [r3, #16]
 80090a0:	f000 fe6e 	bl	8009d80 <__hi0bits>
 80090a4:	f1c0 0020 	rsb	r0, r0, #32
 80090a8:	9b08      	ldr	r3, [sp, #32]
 80090aa:	4418      	add	r0, r3
 80090ac:	f010 001f 	ands.w	r0, r0, #31
 80090b0:	d077      	beq.n	80091a2 <_dtoa_r+0x8f2>
 80090b2:	f1c0 0320 	rsb	r3, r0, #32
 80090b6:	2b04      	cmp	r3, #4
 80090b8:	dd6b      	ble.n	8009192 <_dtoa_r+0x8e2>
 80090ba:	9b08      	ldr	r3, [sp, #32]
 80090bc:	f1c0 001c 	rsb	r0, r0, #28
 80090c0:	4403      	add	r3, r0
 80090c2:	4480      	add	r8, r0
 80090c4:	4406      	add	r6, r0
 80090c6:	9308      	str	r3, [sp, #32]
 80090c8:	f1b8 0f00 	cmp.w	r8, #0
 80090cc:	dd05      	ble.n	80090da <_dtoa_r+0x82a>
 80090ce:	4649      	mov	r1, r9
 80090d0:	4642      	mov	r2, r8
 80090d2:	4658      	mov	r0, fp
 80090d4:	f000 ffba 	bl	800a04c <__lshift>
 80090d8:	4681      	mov	r9, r0
 80090da:	9b08      	ldr	r3, [sp, #32]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	dd05      	ble.n	80090ec <_dtoa_r+0x83c>
 80090e0:	4621      	mov	r1, r4
 80090e2:	461a      	mov	r2, r3
 80090e4:	4658      	mov	r0, fp
 80090e6:	f000 ffb1 	bl	800a04c <__lshift>
 80090ea:	4604      	mov	r4, r0
 80090ec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d059      	beq.n	80091a6 <_dtoa_r+0x8f6>
 80090f2:	4621      	mov	r1, r4
 80090f4:	4648      	mov	r0, r9
 80090f6:	f001 f815 	bl	800a124 <__mcmp>
 80090fa:	2800      	cmp	r0, #0
 80090fc:	da53      	bge.n	80091a6 <_dtoa_r+0x8f6>
 80090fe:	1e7b      	subs	r3, r7, #1
 8009100:	9304      	str	r3, [sp, #16]
 8009102:	4649      	mov	r1, r9
 8009104:	2300      	movs	r3, #0
 8009106:	220a      	movs	r2, #10
 8009108:	4658      	mov	r0, fp
 800910a:	f000 fdf3 	bl	8009cf4 <__multadd>
 800910e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009110:	4681      	mov	r9, r0
 8009112:	2b00      	cmp	r3, #0
 8009114:	f000 8172 	beq.w	80093fc <_dtoa_r+0xb4c>
 8009118:	2300      	movs	r3, #0
 800911a:	4629      	mov	r1, r5
 800911c:	220a      	movs	r2, #10
 800911e:	4658      	mov	r0, fp
 8009120:	f000 fde8 	bl	8009cf4 <__multadd>
 8009124:	9b00      	ldr	r3, [sp, #0]
 8009126:	2b00      	cmp	r3, #0
 8009128:	4605      	mov	r5, r0
 800912a:	dc67      	bgt.n	80091fc <_dtoa_r+0x94c>
 800912c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800912e:	2b02      	cmp	r3, #2
 8009130:	dc41      	bgt.n	80091b6 <_dtoa_r+0x906>
 8009132:	e063      	b.n	80091fc <_dtoa_r+0x94c>
 8009134:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009136:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800913a:	e746      	b.n	8008fca <_dtoa_r+0x71a>
 800913c:	9b07      	ldr	r3, [sp, #28]
 800913e:	1e5c      	subs	r4, r3, #1
 8009140:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009142:	42a3      	cmp	r3, r4
 8009144:	bfbf      	itttt	lt
 8009146:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009148:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800914a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800914c:	1ae3      	sublt	r3, r4, r3
 800914e:	bfb4      	ite	lt
 8009150:	18d2      	addlt	r2, r2, r3
 8009152:	1b1c      	subge	r4, r3, r4
 8009154:	9b07      	ldr	r3, [sp, #28]
 8009156:	bfbc      	itt	lt
 8009158:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800915a:	2400      	movlt	r4, #0
 800915c:	2b00      	cmp	r3, #0
 800915e:	bfb5      	itete	lt
 8009160:	eba8 0603 	sublt.w	r6, r8, r3
 8009164:	9b07      	ldrge	r3, [sp, #28]
 8009166:	2300      	movlt	r3, #0
 8009168:	4646      	movge	r6, r8
 800916a:	e730      	b.n	8008fce <_dtoa_r+0x71e>
 800916c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800916e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009170:	4646      	mov	r6, r8
 8009172:	e735      	b.n	8008fe0 <_dtoa_r+0x730>
 8009174:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009176:	e75c      	b.n	8009032 <_dtoa_r+0x782>
 8009178:	2300      	movs	r3, #0
 800917a:	e788      	b.n	800908e <_dtoa_r+0x7de>
 800917c:	3fe00000 	.word	0x3fe00000
 8009180:	40240000 	.word	0x40240000
 8009184:	40140000 	.word	0x40140000
 8009188:	9b02      	ldr	r3, [sp, #8]
 800918a:	e780      	b.n	800908e <_dtoa_r+0x7de>
 800918c:	2300      	movs	r3, #0
 800918e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009190:	e782      	b.n	8009098 <_dtoa_r+0x7e8>
 8009192:	d099      	beq.n	80090c8 <_dtoa_r+0x818>
 8009194:	9a08      	ldr	r2, [sp, #32]
 8009196:	331c      	adds	r3, #28
 8009198:	441a      	add	r2, r3
 800919a:	4498      	add	r8, r3
 800919c:	441e      	add	r6, r3
 800919e:	9208      	str	r2, [sp, #32]
 80091a0:	e792      	b.n	80090c8 <_dtoa_r+0x818>
 80091a2:	4603      	mov	r3, r0
 80091a4:	e7f6      	b.n	8009194 <_dtoa_r+0x8e4>
 80091a6:	9b07      	ldr	r3, [sp, #28]
 80091a8:	9704      	str	r7, [sp, #16]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	dc20      	bgt.n	80091f0 <_dtoa_r+0x940>
 80091ae:	9300      	str	r3, [sp, #0]
 80091b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091b2:	2b02      	cmp	r3, #2
 80091b4:	dd1e      	ble.n	80091f4 <_dtoa_r+0x944>
 80091b6:	9b00      	ldr	r3, [sp, #0]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	f47f aec0 	bne.w	8008f3e <_dtoa_r+0x68e>
 80091be:	4621      	mov	r1, r4
 80091c0:	2205      	movs	r2, #5
 80091c2:	4658      	mov	r0, fp
 80091c4:	f000 fd96 	bl	8009cf4 <__multadd>
 80091c8:	4601      	mov	r1, r0
 80091ca:	4604      	mov	r4, r0
 80091cc:	4648      	mov	r0, r9
 80091ce:	f000 ffa9 	bl	800a124 <__mcmp>
 80091d2:	2800      	cmp	r0, #0
 80091d4:	f77f aeb3 	ble.w	8008f3e <_dtoa_r+0x68e>
 80091d8:	4656      	mov	r6, sl
 80091da:	2331      	movs	r3, #49	@ 0x31
 80091dc:	f806 3b01 	strb.w	r3, [r6], #1
 80091e0:	9b04      	ldr	r3, [sp, #16]
 80091e2:	3301      	adds	r3, #1
 80091e4:	9304      	str	r3, [sp, #16]
 80091e6:	e6ae      	b.n	8008f46 <_dtoa_r+0x696>
 80091e8:	9c07      	ldr	r4, [sp, #28]
 80091ea:	9704      	str	r7, [sp, #16]
 80091ec:	4625      	mov	r5, r4
 80091ee:	e7f3      	b.n	80091d8 <_dtoa_r+0x928>
 80091f0:	9b07      	ldr	r3, [sp, #28]
 80091f2:	9300      	str	r3, [sp, #0]
 80091f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	f000 8104 	beq.w	8009404 <_dtoa_r+0xb54>
 80091fc:	2e00      	cmp	r6, #0
 80091fe:	dd05      	ble.n	800920c <_dtoa_r+0x95c>
 8009200:	4629      	mov	r1, r5
 8009202:	4632      	mov	r2, r6
 8009204:	4658      	mov	r0, fp
 8009206:	f000 ff21 	bl	800a04c <__lshift>
 800920a:	4605      	mov	r5, r0
 800920c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800920e:	2b00      	cmp	r3, #0
 8009210:	d05a      	beq.n	80092c8 <_dtoa_r+0xa18>
 8009212:	6869      	ldr	r1, [r5, #4]
 8009214:	4658      	mov	r0, fp
 8009216:	f000 fd0b 	bl	8009c30 <_Balloc>
 800921a:	4606      	mov	r6, r0
 800921c:	b928      	cbnz	r0, 800922a <_dtoa_r+0x97a>
 800921e:	4b84      	ldr	r3, [pc, #528]	@ (8009430 <_dtoa_r+0xb80>)
 8009220:	4602      	mov	r2, r0
 8009222:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009226:	f7ff bb5a 	b.w	80088de <_dtoa_r+0x2e>
 800922a:	692a      	ldr	r2, [r5, #16]
 800922c:	3202      	adds	r2, #2
 800922e:	0092      	lsls	r2, r2, #2
 8009230:	f105 010c 	add.w	r1, r5, #12
 8009234:	300c      	adds	r0, #12
 8009236:	f7ff faa2 	bl	800877e <memcpy>
 800923a:	2201      	movs	r2, #1
 800923c:	4631      	mov	r1, r6
 800923e:	4658      	mov	r0, fp
 8009240:	f000 ff04 	bl	800a04c <__lshift>
 8009244:	f10a 0301 	add.w	r3, sl, #1
 8009248:	9307      	str	r3, [sp, #28]
 800924a:	9b00      	ldr	r3, [sp, #0]
 800924c:	4453      	add	r3, sl
 800924e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009250:	9b02      	ldr	r3, [sp, #8]
 8009252:	f003 0301 	and.w	r3, r3, #1
 8009256:	462f      	mov	r7, r5
 8009258:	930a      	str	r3, [sp, #40]	@ 0x28
 800925a:	4605      	mov	r5, r0
 800925c:	9b07      	ldr	r3, [sp, #28]
 800925e:	4621      	mov	r1, r4
 8009260:	3b01      	subs	r3, #1
 8009262:	4648      	mov	r0, r9
 8009264:	9300      	str	r3, [sp, #0]
 8009266:	f7ff fa98 	bl	800879a <quorem>
 800926a:	4639      	mov	r1, r7
 800926c:	9002      	str	r0, [sp, #8]
 800926e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009272:	4648      	mov	r0, r9
 8009274:	f000 ff56 	bl	800a124 <__mcmp>
 8009278:	462a      	mov	r2, r5
 800927a:	9008      	str	r0, [sp, #32]
 800927c:	4621      	mov	r1, r4
 800927e:	4658      	mov	r0, fp
 8009280:	f000 ff6c 	bl	800a15c <__mdiff>
 8009284:	68c2      	ldr	r2, [r0, #12]
 8009286:	4606      	mov	r6, r0
 8009288:	bb02      	cbnz	r2, 80092cc <_dtoa_r+0xa1c>
 800928a:	4601      	mov	r1, r0
 800928c:	4648      	mov	r0, r9
 800928e:	f000 ff49 	bl	800a124 <__mcmp>
 8009292:	4602      	mov	r2, r0
 8009294:	4631      	mov	r1, r6
 8009296:	4658      	mov	r0, fp
 8009298:	920e      	str	r2, [sp, #56]	@ 0x38
 800929a:	f000 fd09 	bl	8009cb0 <_Bfree>
 800929e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80092a2:	9e07      	ldr	r6, [sp, #28]
 80092a4:	ea43 0102 	orr.w	r1, r3, r2
 80092a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80092aa:	4319      	orrs	r1, r3
 80092ac:	d110      	bne.n	80092d0 <_dtoa_r+0xa20>
 80092ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80092b2:	d029      	beq.n	8009308 <_dtoa_r+0xa58>
 80092b4:	9b08      	ldr	r3, [sp, #32]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	dd02      	ble.n	80092c0 <_dtoa_r+0xa10>
 80092ba:	9b02      	ldr	r3, [sp, #8]
 80092bc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80092c0:	9b00      	ldr	r3, [sp, #0]
 80092c2:	f883 8000 	strb.w	r8, [r3]
 80092c6:	e63f      	b.n	8008f48 <_dtoa_r+0x698>
 80092c8:	4628      	mov	r0, r5
 80092ca:	e7bb      	b.n	8009244 <_dtoa_r+0x994>
 80092cc:	2201      	movs	r2, #1
 80092ce:	e7e1      	b.n	8009294 <_dtoa_r+0x9e4>
 80092d0:	9b08      	ldr	r3, [sp, #32]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	db04      	blt.n	80092e0 <_dtoa_r+0xa30>
 80092d6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80092d8:	430b      	orrs	r3, r1
 80092da:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80092dc:	430b      	orrs	r3, r1
 80092de:	d120      	bne.n	8009322 <_dtoa_r+0xa72>
 80092e0:	2a00      	cmp	r2, #0
 80092e2:	dded      	ble.n	80092c0 <_dtoa_r+0xa10>
 80092e4:	4649      	mov	r1, r9
 80092e6:	2201      	movs	r2, #1
 80092e8:	4658      	mov	r0, fp
 80092ea:	f000 feaf 	bl	800a04c <__lshift>
 80092ee:	4621      	mov	r1, r4
 80092f0:	4681      	mov	r9, r0
 80092f2:	f000 ff17 	bl	800a124 <__mcmp>
 80092f6:	2800      	cmp	r0, #0
 80092f8:	dc03      	bgt.n	8009302 <_dtoa_r+0xa52>
 80092fa:	d1e1      	bne.n	80092c0 <_dtoa_r+0xa10>
 80092fc:	f018 0f01 	tst.w	r8, #1
 8009300:	d0de      	beq.n	80092c0 <_dtoa_r+0xa10>
 8009302:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009306:	d1d8      	bne.n	80092ba <_dtoa_r+0xa0a>
 8009308:	9a00      	ldr	r2, [sp, #0]
 800930a:	2339      	movs	r3, #57	@ 0x39
 800930c:	7013      	strb	r3, [r2, #0]
 800930e:	4633      	mov	r3, r6
 8009310:	461e      	mov	r6, r3
 8009312:	3b01      	subs	r3, #1
 8009314:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009318:	2a39      	cmp	r2, #57	@ 0x39
 800931a:	d052      	beq.n	80093c2 <_dtoa_r+0xb12>
 800931c:	3201      	adds	r2, #1
 800931e:	701a      	strb	r2, [r3, #0]
 8009320:	e612      	b.n	8008f48 <_dtoa_r+0x698>
 8009322:	2a00      	cmp	r2, #0
 8009324:	dd07      	ble.n	8009336 <_dtoa_r+0xa86>
 8009326:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800932a:	d0ed      	beq.n	8009308 <_dtoa_r+0xa58>
 800932c:	9a00      	ldr	r2, [sp, #0]
 800932e:	f108 0301 	add.w	r3, r8, #1
 8009332:	7013      	strb	r3, [r2, #0]
 8009334:	e608      	b.n	8008f48 <_dtoa_r+0x698>
 8009336:	9b07      	ldr	r3, [sp, #28]
 8009338:	9a07      	ldr	r2, [sp, #28]
 800933a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800933e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009340:	4293      	cmp	r3, r2
 8009342:	d028      	beq.n	8009396 <_dtoa_r+0xae6>
 8009344:	4649      	mov	r1, r9
 8009346:	2300      	movs	r3, #0
 8009348:	220a      	movs	r2, #10
 800934a:	4658      	mov	r0, fp
 800934c:	f000 fcd2 	bl	8009cf4 <__multadd>
 8009350:	42af      	cmp	r7, r5
 8009352:	4681      	mov	r9, r0
 8009354:	f04f 0300 	mov.w	r3, #0
 8009358:	f04f 020a 	mov.w	r2, #10
 800935c:	4639      	mov	r1, r7
 800935e:	4658      	mov	r0, fp
 8009360:	d107      	bne.n	8009372 <_dtoa_r+0xac2>
 8009362:	f000 fcc7 	bl	8009cf4 <__multadd>
 8009366:	4607      	mov	r7, r0
 8009368:	4605      	mov	r5, r0
 800936a:	9b07      	ldr	r3, [sp, #28]
 800936c:	3301      	adds	r3, #1
 800936e:	9307      	str	r3, [sp, #28]
 8009370:	e774      	b.n	800925c <_dtoa_r+0x9ac>
 8009372:	f000 fcbf 	bl	8009cf4 <__multadd>
 8009376:	4629      	mov	r1, r5
 8009378:	4607      	mov	r7, r0
 800937a:	2300      	movs	r3, #0
 800937c:	220a      	movs	r2, #10
 800937e:	4658      	mov	r0, fp
 8009380:	f000 fcb8 	bl	8009cf4 <__multadd>
 8009384:	4605      	mov	r5, r0
 8009386:	e7f0      	b.n	800936a <_dtoa_r+0xaba>
 8009388:	9b00      	ldr	r3, [sp, #0]
 800938a:	2b00      	cmp	r3, #0
 800938c:	bfcc      	ite	gt
 800938e:	461e      	movgt	r6, r3
 8009390:	2601      	movle	r6, #1
 8009392:	4456      	add	r6, sl
 8009394:	2700      	movs	r7, #0
 8009396:	4649      	mov	r1, r9
 8009398:	2201      	movs	r2, #1
 800939a:	4658      	mov	r0, fp
 800939c:	f000 fe56 	bl	800a04c <__lshift>
 80093a0:	4621      	mov	r1, r4
 80093a2:	4681      	mov	r9, r0
 80093a4:	f000 febe 	bl	800a124 <__mcmp>
 80093a8:	2800      	cmp	r0, #0
 80093aa:	dcb0      	bgt.n	800930e <_dtoa_r+0xa5e>
 80093ac:	d102      	bne.n	80093b4 <_dtoa_r+0xb04>
 80093ae:	f018 0f01 	tst.w	r8, #1
 80093b2:	d1ac      	bne.n	800930e <_dtoa_r+0xa5e>
 80093b4:	4633      	mov	r3, r6
 80093b6:	461e      	mov	r6, r3
 80093b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80093bc:	2a30      	cmp	r2, #48	@ 0x30
 80093be:	d0fa      	beq.n	80093b6 <_dtoa_r+0xb06>
 80093c0:	e5c2      	b.n	8008f48 <_dtoa_r+0x698>
 80093c2:	459a      	cmp	sl, r3
 80093c4:	d1a4      	bne.n	8009310 <_dtoa_r+0xa60>
 80093c6:	9b04      	ldr	r3, [sp, #16]
 80093c8:	3301      	adds	r3, #1
 80093ca:	9304      	str	r3, [sp, #16]
 80093cc:	2331      	movs	r3, #49	@ 0x31
 80093ce:	f88a 3000 	strb.w	r3, [sl]
 80093d2:	e5b9      	b.n	8008f48 <_dtoa_r+0x698>
 80093d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80093d6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009434 <_dtoa_r+0xb84>
 80093da:	b11b      	cbz	r3, 80093e4 <_dtoa_r+0xb34>
 80093dc:	f10a 0308 	add.w	r3, sl, #8
 80093e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80093e2:	6013      	str	r3, [r2, #0]
 80093e4:	4650      	mov	r0, sl
 80093e6:	b019      	add	sp, #100	@ 0x64
 80093e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093ee:	2b01      	cmp	r3, #1
 80093f0:	f77f ae37 	ble.w	8009062 <_dtoa_r+0x7b2>
 80093f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80093f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80093f8:	2001      	movs	r0, #1
 80093fa:	e655      	b.n	80090a8 <_dtoa_r+0x7f8>
 80093fc:	9b00      	ldr	r3, [sp, #0]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	f77f aed6 	ble.w	80091b0 <_dtoa_r+0x900>
 8009404:	4656      	mov	r6, sl
 8009406:	4621      	mov	r1, r4
 8009408:	4648      	mov	r0, r9
 800940a:	f7ff f9c6 	bl	800879a <quorem>
 800940e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009412:	f806 8b01 	strb.w	r8, [r6], #1
 8009416:	9b00      	ldr	r3, [sp, #0]
 8009418:	eba6 020a 	sub.w	r2, r6, sl
 800941c:	4293      	cmp	r3, r2
 800941e:	ddb3      	ble.n	8009388 <_dtoa_r+0xad8>
 8009420:	4649      	mov	r1, r9
 8009422:	2300      	movs	r3, #0
 8009424:	220a      	movs	r2, #10
 8009426:	4658      	mov	r0, fp
 8009428:	f000 fc64 	bl	8009cf4 <__multadd>
 800942c:	4681      	mov	r9, r0
 800942e:	e7ea      	b.n	8009406 <_dtoa_r+0xb56>
 8009430:	0800ab88 	.word	0x0800ab88
 8009434:	0800ab0c 	.word	0x0800ab0c

08009438 <__ssputs_r>:
 8009438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800943c:	688e      	ldr	r6, [r1, #8]
 800943e:	461f      	mov	r7, r3
 8009440:	42be      	cmp	r6, r7
 8009442:	680b      	ldr	r3, [r1, #0]
 8009444:	4682      	mov	sl, r0
 8009446:	460c      	mov	r4, r1
 8009448:	4690      	mov	r8, r2
 800944a:	d82d      	bhi.n	80094a8 <__ssputs_r+0x70>
 800944c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009450:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009454:	d026      	beq.n	80094a4 <__ssputs_r+0x6c>
 8009456:	6965      	ldr	r5, [r4, #20]
 8009458:	6909      	ldr	r1, [r1, #16]
 800945a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800945e:	eba3 0901 	sub.w	r9, r3, r1
 8009462:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009466:	1c7b      	adds	r3, r7, #1
 8009468:	444b      	add	r3, r9
 800946a:	106d      	asrs	r5, r5, #1
 800946c:	429d      	cmp	r5, r3
 800946e:	bf38      	it	cc
 8009470:	461d      	movcc	r5, r3
 8009472:	0553      	lsls	r3, r2, #21
 8009474:	d527      	bpl.n	80094c6 <__ssputs_r+0x8e>
 8009476:	4629      	mov	r1, r5
 8009478:	f000 faa2 	bl	80099c0 <_malloc_r>
 800947c:	4606      	mov	r6, r0
 800947e:	b360      	cbz	r0, 80094da <__ssputs_r+0xa2>
 8009480:	6921      	ldr	r1, [r4, #16]
 8009482:	464a      	mov	r2, r9
 8009484:	f7ff f97b 	bl	800877e <memcpy>
 8009488:	89a3      	ldrh	r3, [r4, #12]
 800948a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800948e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009492:	81a3      	strh	r3, [r4, #12]
 8009494:	6126      	str	r6, [r4, #16]
 8009496:	6165      	str	r5, [r4, #20]
 8009498:	444e      	add	r6, r9
 800949a:	eba5 0509 	sub.w	r5, r5, r9
 800949e:	6026      	str	r6, [r4, #0]
 80094a0:	60a5      	str	r5, [r4, #8]
 80094a2:	463e      	mov	r6, r7
 80094a4:	42be      	cmp	r6, r7
 80094a6:	d900      	bls.n	80094aa <__ssputs_r+0x72>
 80094a8:	463e      	mov	r6, r7
 80094aa:	6820      	ldr	r0, [r4, #0]
 80094ac:	4632      	mov	r2, r6
 80094ae:	4641      	mov	r1, r8
 80094b0:	f001 f8a8 	bl	800a604 <memmove>
 80094b4:	68a3      	ldr	r3, [r4, #8]
 80094b6:	1b9b      	subs	r3, r3, r6
 80094b8:	60a3      	str	r3, [r4, #8]
 80094ba:	6823      	ldr	r3, [r4, #0]
 80094bc:	4433      	add	r3, r6
 80094be:	6023      	str	r3, [r4, #0]
 80094c0:	2000      	movs	r0, #0
 80094c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094c6:	462a      	mov	r2, r5
 80094c8:	f000 ff77 	bl	800a3ba <_realloc_r>
 80094cc:	4606      	mov	r6, r0
 80094ce:	2800      	cmp	r0, #0
 80094d0:	d1e0      	bne.n	8009494 <__ssputs_r+0x5c>
 80094d2:	6921      	ldr	r1, [r4, #16]
 80094d4:	4650      	mov	r0, sl
 80094d6:	f001 f959 	bl	800a78c <_free_r>
 80094da:	230c      	movs	r3, #12
 80094dc:	f8ca 3000 	str.w	r3, [sl]
 80094e0:	89a3      	ldrh	r3, [r4, #12]
 80094e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80094e6:	81a3      	strh	r3, [r4, #12]
 80094e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80094ec:	e7e9      	b.n	80094c2 <__ssputs_r+0x8a>
	...

080094f0 <_svfiprintf_r>:
 80094f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094f4:	4698      	mov	r8, r3
 80094f6:	898b      	ldrh	r3, [r1, #12]
 80094f8:	061b      	lsls	r3, r3, #24
 80094fa:	b09d      	sub	sp, #116	@ 0x74
 80094fc:	4607      	mov	r7, r0
 80094fe:	460d      	mov	r5, r1
 8009500:	4614      	mov	r4, r2
 8009502:	d510      	bpl.n	8009526 <_svfiprintf_r+0x36>
 8009504:	690b      	ldr	r3, [r1, #16]
 8009506:	b973      	cbnz	r3, 8009526 <_svfiprintf_r+0x36>
 8009508:	2140      	movs	r1, #64	@ 0x40
 800950a:	f000 fa59 	bl	80099c0 <_malloc_r>
 800950e:	6028      	str	r0, [r5, #0]
 8009510:	6128      	str	r0, [r5, #16]
 8009512:	b930      	cbnz	r0, 8009522 <_svfiprintf_r+0x32>
 8009514:	230c      	movs	r3, #12
 8009516:	603b      	str	r3, [r7, #0]
 8009518:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800951c:	b01d      	add	sp, #116	@ 0x74
 800951e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009522:	2340      	movs	r3, #64	@ 0x40
 8009524:	616b      	str	r3, [r5, #20]
 8009526:	2300      	movs	r3, #0
 8009528:	9309      	str	r3, [sp, #36]	@ 0x24
 800952a:	2320      	movs	r3, #32
 800952c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009530:	f8cd 800c 	str.w	r8, [sp, #12]
 8009534:	2330      	movs	r3, #48	@ 0x30
 8009536:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80096d4 <_svfiprintf_r+0x1e4>
 800953a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800953e:	f04f 0901 	mov.w	r9, #1
 8009542:	4623      	mov	r3, r4
 8009544:	469a      	mov	sl, r3
 8009546:	f813 2b01 	ldrb.w	r2, [r3], #1
 800954a:	b10a      	cbz	r2, 8009550 <_svfiprintf_r+0x60>
 800954c:	2a25      	cmp	r2, #37	@ 0x25
 800954e:	d1f9      	bne.n	8009544 <_svfiprintf_r+0x54>
 8009550:	ebba 0b04 	subs.w	fp, sl, r4
 8009554:	d00b      	beq.n	800956e <_svfiprintf_r+0x7e>
 8009556:	465b      	mov	r3, fp
 8009558:	4622      	mov	r2, r4
 800955a:	4629      	mov	r1, r5
 800955c:	4638      	mov	r0, r7
 800955e:	f7ff ff6b 	bl	8009438 <__ssputs_r>
 8009562:	3001      	adds	r0, #1
 8009564:	f000 80a7 	beq.w	80096b6 <_svfiprintf_r+0x1c6>
 8009568:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800956a:	445a      	add	r2, fp
 800956c:	9209      	str	r2, [sp, #36]	@ 0x24
 800956e:	f89a 3000 	ldrb.w	r3, [sl]
 8009572:	2b00      	cmp	r3, #0
 8009574:	f000 809f 	beq.w	80096b6 <_svfiprintf_r+0x1c6>
 8009578:	2300      	movs	r3, #0
 800957a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800957e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009582:	f10a 0a01 	add.w	sl, sl, #1
 8009586:	9304      	str	r3, [sp, #16]
 8009588:	9307      	str	r3, [sp, #28]
 800958a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800958e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009590:	4654      	mov	r4, sl
 8009592:	2205      	movs	r2, #5
 8009594:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009598:	484e      	ldr	r0, [pc, #312]	@ (80096d4 <_svfiprintf_r+0x1e4>)
 800959a:	f7f6 fe31 	bl	8000200 <memchr>
 800959e:	9a04      	ldr	r2, [sp, #16]
 80095a0:	b9d8      	cbnz	r0, 80095da <_svfiprintf_r+0xea>
 80095a2:	06d0      	lsls	r0, r2, #27
 80095a4:	bf44      	itt	mi
 80095a6:	2320      	movmi	r3, #32
 80095a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80095ac:	0711      	lsls	r1, r2, #28
 80095ae:	bf44      	itt	mi
 80095b0:	232b      	movmi	r3, #43	@ 0x2b
 80095b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80095b6:	f89a 3000 	ldrb.w	r3, [sl]
 80095ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80095bc:	d015      	beq.n	80095ea <_svfiprintf_r+0xfa>
 80095be:	9a07      	ldr	r2, [sp, #28]
 80095c0:	4654      	mov	r4, sl
 80095c2:	2000      	movs	r0, #0
 80095c4:	f04f 0c0a 	mov.w	ip, #10
 80095c8:	4621      	mov	r1, r4
 80095ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80095ce:	3b30      	subs	r3, #48	@ 0x30
 80095d0:	2b09      	cmp	r3, #9
 80095d2:	d94b      	bls.n	800966c <_svfiprintf_r+0x17c>
 80095d4:	b1b0      	cbz	r0, 8009604 <_svfiprintf_r+0x114>
 80095d6:	9207      	str	r2, [sp, #28]
 80095d8:	e014      	b.n	8009604 <_svfiprintf_r+0x114>
 80095da:	eba0 0308 	sub.w	r3, r0, r8
 80095de:	fa09 f303 	lsl.w	r3, r9, r3
 80095e2:	4313      	orrs	r3, r2
 80095e4:	9304      	str	r3, [sp, #16]
 80095e6:	46a2      	mov	sl, r4
 80095e8:	e7d2      	b.n	8009590 <_svfiprintf_r+0xa0>
 80095ea:	9b03      	ldr	r3, [sp, #12]
 80095ec:	1d19      	adds	r1, r3, #4
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	9103      	str	r1, [sp, #12]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	bfbb      	ittet	lt
 80095f6:	425b      	neglt	r3, r3
 80095f8:	f042 0202 	orrlt.w	r2, r2, #2
 80095fc:	9307      	strge	r3, [sp, #28]
 80095fe:	9307      	strlt	r3, [sp, #28]
 8009600:	bfb8      	it	lt
 8009602:	9204      	strlt	r2, [sp, #16]
 8009604:	7823      	ldrb	r3, [r4, #0]
 8009606:	2b2e      	cmp	r3, #46	@ 0x2e
 8009608:	d10a      	bne.n	8009620 <_svfiprintf_r+0x130>
 800960a:	7863      	ldrb	r3, [r4, #1]
 800960c:	2b2a      	cmp	r3, #42	@ 0x2a
 800960e:	d132      	bne.n	8009676 <_svfiprintf_r+0x186>
 8009610:	9b03      	ldr	r3, [sp, #12]
 8009612:	1d1a      	adds	r2, r3, #4
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	9203      	str	r2, [sp, #12]
 8009618:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800961c:	3402      	adds	r4, #2
 800961e:	9305      	str	r3, [sp, #20]
 8009620:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80096e4 <_svfiprintf_r+0x1f4>
 8009624:	7821      	ldrb	r1, [r4, #0]
 8009626:	2203      	movs	r2, #3
 8009628:	4650      	mov	r0, sl
 800962a:	f7f6 fde9 	bl	8000200 <memchr>
 800962e:	b138      	cbz	r0, 8009640 <_svfiprintf_r+0x150>
 8009630:	9b04      	ldr	r3, [sp, #16]
 8009632:	eba0 000a 	sub.w	r0, r0, sl
 8009636:	2240      	movs	r2, #64	@ 0x40
 8009638:	4082      	lsls	r2, r0
 800963a:	4313      	orrs	r3, r2
 800963c:	3401      	adds	r4, #1
 800963e:	9304      	str	r3, [sp, #16]
 8009640:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009644:	4824      	ldr	r0, [pc, #144]	@ (80096d8 <_svfiprintf_r+0x1e8>)
 8009646:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800964a:	2206      	movs	r2, #6
 800964c:	f7f6 fdd8 	bl	8000200 <memchr>
 8009650:	2800      	cmp	r0, #0
 8009652:	d036      	beq.n	80096c2 <_svfiprintf_r+0x1d2>
 8009654:	4b21      	ldr	r3, [pc, #132]	@ (80096dc <_svfiprintf_r+0x1ec>)
 8009656:	bb1b      	cbnz	r3, 80096a0 <_svfiprintf_r+0x1b0>
 8009658:	9b03      	ldr	r3, [sp, #12]
 800965a:	3307      	adds	r3, #7
 800965c:	f023 0307 	bic.w	r3, r3, #7
 8009660:	3308      	adds	r3, #8
 8009662:	9303      	str	r3, [sp, #12]
 8009664:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009666:	4433      	add	r3, r6
 8009668:	9309      	str	r3, [sp, #36]	@ 0x24
 800966a:	e76a      	b.n	8009542 <_svfiprintf_r+0x52>
 800966c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009670:	460c      	mov	r4, r1
 8009672:	2001      	movs	r0, #1
 8009674:	e7a8      	b.n	80095c8 <_svfiprintf_r+0xd8>
 8009676:	2300      	movs	r3, #0
 8009678:	3401      	adds	r4, #1
 800967a:	9305      	str	r3, [sp, #20]
 800967c:	4619      	mov	r1, r3
 800967e:	f04f 0c0a 	mov.w	ip, #10
 8009682:	4620      	mov	r0, r4
 8009684:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009688:	3a30      	subs	r2, #48	@ 0x30
 800968a:	2a09      	cmp	r2, #9
 800968c:	d903      	bls.n	8009696 <_svfiprintf_r+0x1a6>
 800968e:	2b00      	cmp	r3, #0
 8009690:	d0c6      	beq.n	8009620 <_svfiprintf_r+0x130>
 8009692:	9105      	str	r1, [sp, #20]
 8009694:	e7c4      	b.n	8009620 <_svfiprintf_r+0x130>
 8009696:	fb0c 2101 	mla	r1, ip, r1, r2
 800969a:	4604      	mov	r4, r0
 800969c:	2301      	movs	r3, #1
 800969e:	e7f0      	b.n	8009682 <_svfiprintf_r+0x192>
 80096a0:	ab03      	add	r3, sp, #12
 80096a2:	9300      	str	r3, [sp, #0]
 80096a4:	462a      	mov	r2, r5
 80096a6:	4b0e      	ldr	r3, [pc, #56]	@ (80096e0 <_svfiprintf_r+0x1f0>)
 80096a8:	a904      	add	r1, sp, #16
 80096aa:	4638      	mov	r0, r7
 80096ac:	f7fe fb82 	bl	8007db4 <_printf_float>
 80096b0:	1c42      	adds	r2, r0, #1
 80096b2:	4606      	mov	r6, r0
 80096b4:	d1d6      	bne.n	8009664 <_svfiprintf_r+0x174>
 80096b6:	89ab      	ldrh	r3, [r5, #12]
 80096b8:	065b      	lsls	r3, r3, #25
 80096ba:	f53f af2d 	bmi.w	8009518 <_svfiprintf_r+0x28>
 80096be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80096c0:	e72c      	b.n	800951c <_svfiprintf_r+0x2c>
 80096c2:	ab03      	add	r3, sp, #12
 80096c4:	9300      	str	r3, [sp, #0]
 80096c6:	462a      	mov	r2, r5
 80096c8:	4b05      	ldr	r3, [pc, #20]	@ (80096e0 <_svfiprintf_r+0x1f0>)
 80096ca:	a904      	add	r1, sp, #16
 80096cc:	4638      	mov	r0, r7
 80096ce:	f7fe fe09 	bl	80082e4 <_printf_i>
 80096d2:	e7ed      	b.n	80096b0 <_svfiprintf_r+0x1c0>
 80096d4:	0800ab99 	.word	0x0800ab99
 80096d8:	0800aba3 	.word	0x0800aba3
 80096dc:	08007db5 	.word	0x08007db5
 80096e0:	08009439 	.word	0x08009439
 80096e4:	0800ab9f 	.word	0x0800ab9f

080096e8 <__sfputc_r>:
 80096e8:	6893      	ldr	r3, [r2, #8]
 80096ea:	3b01      	subs	r3, #1
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	b410      	push	{r4}
 80096f0:	6093      	str	r3, [r2, #8]
 80096f2:	da08      	bge.n	8009706 <__sfputc_r+0x1e>
 80096f4:	6994      	ldr	r4, [r2, #24]
 80096f6:	42a3      	cmp	r3, r4
 80096f8:	db01      	blt.n	80096fe <__sfputc_r+0x16>
 80096fa:	290a      	cmp	r1, #10
 80096fc:	d103      	bne.n	8009706 <__sfputc_r+0x1e>
 80096fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009702:	f000 be88 	b.w	800a416 <__swbuf_r>
 8009706:	6813      	ldr	r3, [r2, #0]
 8009708:	1c58      	adds	r0, r3, #1
 800970a:	6010      	str	r0, [r2, #0]
 800970c:	7019      	strb	r1, [r3, #0]
 800970e:	4608      	mov	r0, r1
 8009710:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009714:	4770      	bx	lr

08009716 <__sfputs_r>:
 8009716:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009718:	4606      	mov	r6, r0
 800971a:	460f      	mov	r7, r1
 800971c:	4614      	mov	r4, r2
 800971e:	18d5      	adds	r5, r2, r3
 8009720:	42ac      	cmp	r4, r5
 8009722:	d101      	bne.n	8009728 <__sfputs_r+0x12>
 8009724:	2000      	movs	r0, #0
 8009726:	e007      	b.n	8009738 <__sfputs_r+0x22>
 8009728:	f814 1b01 	ldrb.w	r1, [r4], #1
 800972c:	463a      	mov	r2, r7
 800972e:	4630      	mov	r0, r6
 8009730:	f7ff ffda 	bl	80096e8 <__sfputc_r>
 8009734:	1c43      	adds	r3, r0, #1
 8009736:	d1f3      	bne.n	8009720 <__sfputs_r+0xa>
 8009738:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800973c <_vfiprintf_r>:
 800973c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009740:	460d      	mov	r5, r1
 8009742:	b09d      	sub	sp, #116	@ 0x74
 8009744:	4614      	mov	r4, r2
 8009746:	4698      	mov	r8, r3
 8009748:	4606      	mov	r6, r0
 800974a:	b118      	cbz	r0, 8009754 <_vfiprintf_r+0x18>
 800974c:	6a03      	ldr	r3, [r0, #32]
 800974e:	b90b      	cbnz	r3, 8009754 <_vfiprintf_r+0x18>
 8009750:	f7fe ff94 	bl	800867c <__sinit>
 8009754:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009756:	07d9      	lsls	r1, r3, #31
 8009758:	d405      	bmi.n	8009766 <_vfiprintf_r+0x2a>
 800975a:	89ab      	ldrh	r3, [r5, #12]
 800975c:	059a      	lsls	r2, r3, #22
 800975e:	d402      	bmi.n	8009766 <_vfiprintf_r+0x2a>
 8009760:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009762:	f7ff f80a 	bl	800877a <__retarget_lock_acquire_recursive>
 8009766:	89ab      	ldrh	r3, [r5, #12]
 8009768:	071b      	lsls	r3, r3, #28
 800976a:	d501      	bpl.n	8009770 <_vfiprintf_r+0x34>
 800976c:	692b      	ldr	r3, [r5, #16]
 800976e:	b99b      	cbnz	r3, 8009798 <_vfiprintf_r+0x5c>
 8009770:	4629      	mov	r1, r5
 8009772:	4630      	mov	r0, r6
 8009774:	f000 fe8e 	bl	800a494 <__swsetup_r>
 8009778:	b170      	cbz	r0, 8009798 <_vfiprintf_r+0x5c>
 800977a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800977c:	07dc      	lsls	r4, r3, #31
 800977e:	d504      	bpl.n	800978a <_vfiprintf_r+0x4e>
 8009780:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009784:	b01d      	add	sp, #116	@ 0x74
 8009786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800978a:	89ab      	ldrh	r3, [r5, #12]
 800978c:	0598      	lsls	r0, r3, #22
 800978e:	d4f7      	bmi.n	8009780 <_vfiprintf_r+0x44>
 8009790:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009792:	f7fe fff3 	bl	800877c <__retarget_lock_release_recursive>
 8009796:	e7f3      	b.n	8009780 <_vfiprintf_r+0x44>
 8009798:	2300      	movs	r3, #0
 800979a:	9309      	str	r3, [sp, #36]	@ 0x24
 800979c:	2320      	movs	r3, #32
 800979e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80097a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80097a6:	2330      	movs	r3, #48	@ 0x30
 80097a8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009958 <_vfiprintf_r+0x21c>
 80097ac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80097b0:	f04f 0901 	mov.w	r9, #1
 80097b4:	4623      	mov	r3, r4
 80097b6:	469a      	mov	sl, r3
 80097b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097bc:	b10a      	cbz	r2, 80097c2 <_vfiprintf_r+0x86>
 80097be:	2a25      	cmp	r2, #37	@ 0x25
 80097c0:	d1f9      	bne.n	80097b6 <_vfiprintf_r+0x7a>
 80097c2:	ebba 0b04 	subs.w	fp, sl, r4
 80097c6:	d00b      	beq.n	80097e0 <_vfiprintf_r+0xa4>
 80097c8:	465b      	mov	r3, fp
 80097ca:	4622      	mov	r2, r4
 80097cc:	4629      	mov	r1, r5
 80097ce:	4630      	mov	r0, r6
 80097d0:	f7ff ffa1 	bl	8009716 <__sfputs_r>
 80097d4:	3001      	adds	r0, #1
 80097d6:	f000 80a7 	beq.w	8009928 <_vfiprintf_r+0x1ec>
 80097da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80097dc:	445a      	add	r2, fp
 80097de:	9209      	str	r2, [sp, #36]	@ 0x24
 80097e0:	f89a 3000 	ldrb.w	r3, [sl]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	f000 809f 	beq.w	8009928 <_vfiprintf_r+0x1ec>
 80097ea:	2300      	movs	r3, #0
 80097ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80097f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80097f4:	f10a 0a01 	add.w	sl, sl, #1
 80097f8:	9304      	str	r3, [sp, #16]
 80097fa:	9307      	str	r3, [sp, #28]
 80097fc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009800:	931a      	str	r3, [sp, #104]	@ 0x68
 8009802:	4654      	mov	r4, sl
 8009804:	2205      	movs	r2, #5
 8009806:	f814 1b01 	ldrb.w	r1, [r4], #1
 800980a:	4853      	ldr	r0, [pc, #332]	@ (8009958 <_vfiprintf_r+0x21c>)
 800980c:	f7f6 fcf8 	bl	8000200 <memchr>
 8009810:	9a04      	ldr	r2, [sp, #16]
 8009812:	b9d8      	cbnz	r0, 800984c <_vfiprintf_r+0x110>
 8009814:	06d1      	lsls	r1, r2, #27
 8009816:	bf44      	itt	mi
 8009818:	2320      	movmi	r3, #32
 800981a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800981e:	0713      	lsls	r3, r2, #28
 8009820:	bf44      	itt	mi
 8009822:	232b      	movmi	r3, #43	@ 0x2b
 8009824:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009828:	f89a 3000 	ldrb.w	r3, [sl]
 800982c:	2b2a      	cmp	r3, #42	@ 0x2a
 800982e:	d015      	beq.n	800985c <_vfiprintf_r+0x120>
 8009830:	9a07      	ldr	r2, [sp, #28]
 8009832:	4654      	mov	r4, sl
 8009834:	2000      	movs	r0, #0
 8009836:	f04f 0c0a 	mov.w	ip, #10
 800983a:	4621      	mov	r1, r4
 800983c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009840:	3b30      	subs	r3, #48	@ 0x30
 8009842:	2b09      	cmp	r3, #9
 8009844:	d94b      	bls.n	80098de <_vfiprintf_r+0x1a2>
 8009846:	b1b0      	cbz	r0, 8009876 <_vfiprintf_r+0x13a>
 8009848:	9207      	str	r2, [sp, #28]
 800984a:	e014      	b.n	8009876 <_vfiprintf_r+0x13a>
 800984c:	eba0 0308 	sub.w	r3, r0, r8
 8009850:	fa09 f303 	lsl.w	r3, r9, r3
 8009854:	4313      	orrs	r3, r2
 8009856:	9304      	str	r3, [sp, #16]
 8009858:	46a2      	mov	sl, r4
 800985a:	e7d2      	b.n	8009802 <_vfiprintf_r+0xc6>
 800985c:	9b03      	ldr	r3, [sp, #12]
 800985e:	1d19      	adds	r1, r3, #4
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	9103      	str	r1, [sp, #12]
 8009864:	2b00      	cmp	r3, #0
 8009866:	bfbb      	ittet	lt
 8009868:	425b      	neglt	r3, r3
 800986a:	f042 0202 	orrlt.w	r2, r2, #2
 800986e:	9307      	strge	r3, [sp, #28]
 8009870:	9307      	strlt	r3, [sp, #28]
 8009872:	bfb8      	it	lt
 8009874:	9204      	strlt	r2, [sp, #16]
 8009876:	7823      	ldrb	r3, [r4, #0]
 8009878:	2b2e      	cmp	r3, #46	@ 0x2e
 800987a:	d10a      	bne.n	8009892 <_vfiprintf_r+0x156>
 800987c:	7863      	ldrb	r3, [r4, #1]
 800987e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009880:	d132      	bne.n	80098e8 <_vfiprintf_r+0x1ac>
 8009882:	9b03      	ldr	r3, [sp, #12]
 8009884:	1d1a      	adds	r2, r3, #4
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	9203      	str	r2, [sp, #12]
 800988a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800988e:	3402      	adds	r4, #2
 8009890:	9305      	str	r3, [sp, #20]
 8009892:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009968 <_vfiprintf_r+0x22c>
 8009896:	7821      	ldrb	r1, [r4, #0]
 8009898:	2203      	movs	r2, #3
 800989a:	4650      	mov	r0, sl
 800989c:	f7f6 fcb0 	bl	8000200 <memchr>
 80098a0:	b138      	cbz	r0, 80098b2 <_vfiprintf_r+0x176>
 80098a2:	9b04      	ldr	r3, [sp, #16]
 80098a4:	eba0 000a 	sub.w	r0, r0, sl
 80098a8:	2240      	movs	r2, #64	@ 0x40
 80098aa:	4082      	lsls	r2, r0
 80098ac:	4313      	orrs	r3, r2
 80098ae:	3401      	adds	r4, #1
 80098b0:	9304      	str	r3, [sp, #16]
 80098b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098b6:	4829      	ldr	r0, [pc, #164]	@ (800995c <_vfiprintf_r+0x220>)
 80098b8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80098bc:	2206      	movs	r2, #6
 80098be:	f7f6 fc9f 	bl	8000200 <memchr>
 80098c2:	2800      	cmp	r0, #0
 80098c4:	d03f      	beq.n	8009946 <_vfiprintf_r+0x20a>
 80098c6:	4b26      	ldr	r3, [pc, #152]	@ (8009960 <_vfiprintf_r+0x224>)
 80098c8:	bb1b      	cbnz	r3, 8009912 <_vfiprintf_r+0x1d6>
 80098ca:	9b03      	ldr	r3, [sp, #12]
 80098cc:	3307      	adds	r3, #7
 80098ce:	f023 0307 	bic.w	r3, r3, #7
 80098d2:	3308      	adds	r3, #8
 80098d4:	9303      	str	r3, [sp, #12]
 80098d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098d8:	443b      	add	r3, r7
 80098da:	9309      	str	r3, [sp, #36]	@ 0x24
 80098dc:	e76a      	b.n	80097b4 <_vfiprintf_r+0x78>
 80098de:	fb0c 3202 	mla	r2, ip, r2, r3
 80098e2:	460c      	mov	r4, r1
 80098e4:	2001      	movs	r0, #1
 80098e6:	e7a8      	b.n	800983a <_vfiprintf_r+0xfe>
 80098e8:	2300      	movs	r3, #0
 80098ea:	3401      	adds	r4, #1
 80098ec:	9305      	str	r3, [sp, #20]
 80098ee:	4619      	mov	r1, r3
 80098f0:	f04f 0c0a 	mov.w	ip, #10
 80098f4:	4620      	mov	r0, r4
 80098f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80098fa:	3a30      	subs	r2, #48	@ 0x30
 80098fc:	2a09      	cmp	r2, #9
 80098fe:	d903      	bls.n	8009908 <_vfiprintf_r+0x1cc>
 8009900:	2b00      	cmp	r3, #0
 8009902:	d0c6      	beq.n	8009892 <_vfiprintf_r+0x156>
 8009904:	9105      	str	r1, [sp, #20]
 8009906:	e7c4      	b.n	8009892 <_vfiprintf_r+0x156>
 8009908:	fb0c 2101 	mla	r1, ip, r1, r2
 800990c:	4604      	mov	r4, r0
 800990e:	2301      	movs	r3, #1
 8009910:	e7f0      	b.n	80098f4 <_vfiprintf_r+0x1b8>
 8009912:	ab03      	add	r3, sp, #12
 8009914:	9300      	str	r3, [sp, #0]
 8009916:	462a      	mov	r2, r5
 8009918:	4b12      	ldr	r3, [pc, #72]	@ (8009964 <_vfiprintf_r+0x228>)
 800991a:	a904      	add	r1, sp, #16
 800991c:	4630      	mov	r0, r6
 800991e:	f7fe fa49 	bl	8007db4 <_printf_float>
 8009922:	4607      	mov	r7, r0
 8009924:	1c78      	adds	r0, r7, #1
 8009926:	d1d6      	bne.n	80098d6 <_vfiprintf_r+0x19a>
 8009928:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800992a:	07d9      	lsls	r1, r3, #31
 800992c:	d405      	bmi.n	800993a <_vfiprintf_r+0x1fe>
 800992e:	89ab      	ldrh	r3, [r5, #12]
 8009930:	059a      	lsls	r2, r3, #22
 8009932:	d402      	bmi.n	800993a <_vfiprintf_r+0x1fe>
 8009934:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009936:	f7fe ff21 	bl	800877c <__retarget_lock_release_recursive>
 800993a:	89ab      	ldrh	r3, [r5, #12]
 800993c:	065b      	lsls	r3, r3, #25
 800993e:	f53f af1f 	bmi.w	8009780 <_vfiprintf_r+0x44>
 8009942:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009944:	e71e      	b.n	8009784 <_vfiprintf_r+0x48>
 8009946:	ab03      	add	r3, sp, #12
 8009948:	9300      	str	r3, [sp, #0]
 800994a:	462a      	mov	r2, r5
 800994c:	4b05      	ldr	r3, [pc, #20]	@ (8009964 <_vfiprintf_r+0x228>)
 800994e:	a904      	add	r1, sp, #16
 8009950:	4630      	mov	r0, r6
 8009952:	f7fe fcc7 	bl	80082e4 <_printf_i>
 8009956:	e7e4      	b.n	8009922 <_vfiprintf_r+0x1e6>
 8009958:	0800ab99 	.word	0x0800ab99
 800995c:	0800aba3 	.word	0x0800aba3
 8009960:	08007db5 	.word	0x08007db5
 8009964:	08009717 	.word	0x08009717
 8009968:	0800ab9f 	.word	0x0800ab9f

0800996c <malloc>:
 800996c:	4b02      	ldr	r3, [pc, #8]	@ (8009978 <malloc+0xc>)
 800996e:	4601      	mov	r1, r0
 8009970:	6818      	ldr	r0, [r3, #0]
 8009972:	f000 b825 	b.w	80099c0 <_malloc_r>
 8009976:	bf00      	nop
 8009978:	2000009c 	.word	0x2000009c

0800997c <sbrk_aligned>:
 800997c:	b570      	push	{r4, r5, r6, lr}
 800997e:	4e0f      	ldr	r6, [pc, #60]	@ (80099bc <sbrk_aligned+0x40>)
 8009980:	460c      	mov	r4, r1
 8009982:	6831      	ldr	r1, [r6, #0]
 8009984:	4605      	mov	r5, r0
 8009986:	b911      	cbnz	r1, 800998e <sbrk_aligned+0x12>
 8009988:	f000 feac 	bl	800a6e4 <_sbrk_r>
 800998c:	6030      	str	r0, [r6, #0]
 800998e:	4621      	mov	r1, r4
 8009990:	4628      	mov	r0, r5
 8009992:	f000 fea7 	bl	800a6e4 <_sbrk_r>
 8009996:	1c43      	adds	r3, r0, #1
 8009998:	d103      	bne.n	80099a2 <sbrk_aligned+0x26>
 800999a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800999e:	4620      	mov	r0, r4
 80099a0:	bd70      	pop	{r4, r5, r6, pc}
 80099a2:	1cc4      	adds	r4, r0, #3
 80099a4:	f024 0403 	bic.w	r4, r4, #3
 80099a8:	42a0      	cmp	r0, r4
 80099aa:	d0f8      	beq.n	800999e <sbrk_aligned+0x22>
 80099ac:	1a21      	subs	r1, r4, r0
 80099ae:	4628      	mov	r0, r5
 80099b0:	f000 fe98 	bl	800a6e4 <_sbrk_r>
 80099b4:	3001      	adds	r0, #1
 80099b6:	d1f2      	bne.n	800999e <sbrk_aligned+0x22>
 80099b8:	e7ef      	b.n	800999a <sbrk_aligned+0x1e>
 80099ba:	bf00      	nop
 80099bc:	200014dc 	.word	0x200014dc

080099c0 <_malloc_r>:
 80099c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099c4:	1ccd      	adds	r5, r1, #3
 80099c6:	f025 0503 	bic.w	r5, r5, #3
 80099ca:	3508      	adds	r5, #8
 80099cc:	2d0c      	cmp	r5, #12
 80099ce:	bf38      	it	cc
 80099d0:	250c      	movcc	r5, #12
 80099d2:	2d00      	cmp	r5, #0
 80099d4:	4606      	mov	r6, r0
 80099d6:	db01      	blt.n	80099dc <_malloc_r+0x1c>
 80099d8:	42a9      	cmp	r1, r5
 80099da:	d904      	bls.n	80099e6 <_malloc_r+0x26>
 80099dc:	230c      	movs	r3, #12
 80099de:	6033      	str	r3, [r6, #0]
 80099e0:	2000      	movs	r0, #0
 80099e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009abc <_malloc_r+0xfc>
 80099ea:	f000 f915 	bl	8009c18 <__malloc_lock>
 80099ee:	f8d8 3000 	ldr.w	r3, [r8]
 80099f2:	461c      	mov	r4, r3
 80099f4:	bb44      	cbnz	r4, 8009a48 <_malloc_r+0x88>
 80099f6:	4629      	mov	r1, r5
 80099f8:	4630      	mov	r0, r6
 80099fa:	f7ff ffbf 	bl	800997c <sbrk_aligned>
 80099fe:	1c43      	adds	r3, r0, #1
 8009a00:	4604      	mov	r4, r0
 8009a02:	d158      	bne.n	8009ab6 <_malloc_r+0xf6>
 8009a04:	f8d8 4000 	ldr.w	r4, [r8]
 8009a08:	4627      	mov	r7, r4
 8009a0a:	2f00      	cmp	r7, #0
 8009a0c:	d143      	bne.n	8009a96 <_malloc_r+0xd6>
 8009a0e:	2c00      	cmp	r4, #0
 8009a10:	d04b      	beq.n	8009aaa <_malloc_r+0xea>
 8009a12:	6823      	ldr	r3, [r4, #0]
 8009a14:	4639      	mov	r1, r7
 8009a16:	4630      	mov	r0, r6
 8009a18:	eb04 0903 	add.w	r9, r4, r3
 8009a1c:	f000 fe62 	bl	800a6e4 <_sbrk_r>
 8009a20:	4581      	cmp	r9, r0
 8009a22:	d142      	bne.n	8009aaa <_malloc_r+0xea>
 8009a24:	6821      	ldr	r1, [r4, #0]
 8009a26:	1a6d      	subs	r5, r5, r1
 8009a28:	4629      	mov	r1, r5
 8009a2a:	4630      	mov	r0, r6
 8009a2c:	f7ff ffa6 	bl	800997c <sbrk_aligned>
 8009a30:	3001      	adds	r0, #1
 8009a32:	d03a      	beq.n	8009aaa <_malloc_r+0xea>
 8009a34:	6823      	ldr	r3, [r4, #0]
 8009a36:	442b      	add	r3, r5
 8009a38:	6023      	str	r3, [r4, #0]
 8009a3a:	f8d8 3000 	ldr.w	r3, [r8]
 8009a3e:	685a      	ldr	r2, [r3, #4]
 8009a40:	bb62      	cbnz	r2, 8009a9c <_malloc_r+0xdc>
 8009a42:	f8c8 7000 	str.w	r7, [r8]
 8009a46:	e00f      	b.n	8009a68 <_malloc_r+0xa8>
 8009a48:	6822      	ldr	r2, [r4, #0]
 8009a4a:	1b52      	subs	r2, r2, r5
 8009a4c:	d420      	bmi.n	8009a90 <_malloc_r+0xd0>
 8009a4e:	2a0b      	cmp	r2, #11
 8009a50:	d917      	bls.n	8009a82 <_malloc_r+0xc2>
 8009a52:	1961      	adds	r1, r4, r5
 8009a54:	42a3      	cmp	r3, r4
 8009a56:	6025      	str	r5, [r4, #0]
 8009a58:	bf18      	it	ne
 8009a5a:	6059      	strne	r1, [r3, #4]
 8009a5c:	6863      	ldr	r3, [r4, #4]
 8009a5e:	bf08      	it	eq
 8009a60:	f8c8 1000 	streq.w	r1, [r8]
 8009a64:	5162      	str	r2, [r4, r5]
 8009a66:	604b      	str	r3, [r1, #4]
 8009a68:	4630      	mov	r0, r6
 8009a6a:	f000 f8db 	bl	8009c24 <__malloc_unlock>
 8009a6e:	f104 000b 	add.w	r0, r4, #11
 8009a72:	1d23      	adds	r3, r4, #4
 8009a74:	f020 0007 	bic.w	r0, r0, #7
 8009a78:	1ac2      	subs	r2, r0, r3
 8009a7a:	bf1c      	itt	ne
 8009a7c:	1a1b      	subne	r3, r3, r0
 8009a7e:	50a3      	strne	r3, [r4, r2]
 8009a80:	e7af      	b.n	80099e2 <_malloc_r+0x22>
 8009a82:	6862      	ldr	r2, [r4, #4]
 8009a84:	42a3      	cmp	r3, r4
 8009a86:	bf0c      	ite	eq
 8009a88:	f8c8 2000 	streq.w	r2, [r8]
 8009a8c:	605a      	strne	r2, [r3, #4]
 8009a8e:	e7eb      	b.n	8009a68 <_malloc_r+0xa8>
 8009a90:	4623      	mov	r3, r4
 8009a92:	6864      	ldr	r4, [r4, #4]
 8009a94:	e7ae      	b.n	80099f4 <_malloc_r+0x34>
 8009a96:	463c      	mov	r4, r7
 8009a98:	687f      	ldr	r7, [r7, #4]
 8009a9a:	e7b6      	b.n	8009a0a <_malloc_r+0x4a>
 8009a9c:	461a      	mov	r2, r3
 8009a9e:	685b      	ldr	r3, [r3, #4]
 8009aa0:	42a3      	cmp	r3, r4
 8009aa2:	d1fb      	bne.n	8009a9c <_malloc_r+0xdc>
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	6053      	str	r3, [r2, #4]
 8009aa8:	e7de      	b.n	8009a68 <_malloc_r+0xa8>
 8009aaa:	230c      	movs	r3, #12
 8009aac:	6033      	str	r3, [r6, #0]
 8009aae:	4630      	mov	r0, r6
 8009ab0:	f000 f8b8 	bl	8009c24 <__malloc_unlock>
 8009ab4:	e794      	b.n	80099e0 <_malloc_r+0x20>
 8009ab6:	6005      	str	r5, [r0, #0]
 8009ab8:	e7d6      	b.n	8009a68 <_malloc_r+0xa8>
 8009aba:	bf00      	nop
 8009abc:	200014e0 	.word	0x200014e0

08009ac0 <__sflush_r>:
 8009ac0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ac8:	0716      	lsls	r6, r2, #28
 8009aca:	4605      	mov	r5, r0
 8009acc:	460c      	mov	r4, r1
 8009ace:	d454      	bmi.n	8009b7a <__sflush_r+0xba>
 8009ad0:	684b      	ldr	r3, [r1, #4]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	dc02      	bgt.n	8009adc <__sflush_r+0x1c>
 8009ad6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	dd48      	ble.n	8009b6e <__sflush_r+0xae>
 8009adc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009ade:	2e00      	cmp	r6, #0
 8009ae0:	d045      	beq.n	8009b6e <__sflush_r+0xae>
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009ae8:	682f      	ldr	r7, [r5, #0]
 8009aea:	6a21      	ldr	r1, [r4, #32]
 8009aec:	602b      	str	r3, [r5, #0]
 8009aee:	d030      	beq.n	8009b52 <__sflush_r+0x92>
 8009af0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009af2:	89a3      	ldrh	r3, [r4, #12]
 8009af4:	0759      	lsls	r1, r3, #29
 8009af6:	d505      	bpl.n	8009b04 <__sflush_r+0x44>
 8009af8:	6863      	ldr	r3, [r4, #4]
 8009afa:	1ad2      	subs	r2, r2, r3
 8009afc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009afe:	b10b      	cbz	r3, 8009b04 <__sflush_r+0x44>
 8009b00:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009b02:	1ad2      	subs	r2, r2, r3
 8009b04:	2300      	movs	r3, #0
 8009b06:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009b08:	6a21      	ldr	r1, [r4, #32]
 8009b0a:	4628      	mov	r0, r5
 8009b0c:	47b0      	blx	r6
 8009b0e:	1c43      	adds	r3, r0, #1
 8009b10:	89a3      	ldrh	r3, [r4, #12]
 8009b12:	d106      	bne.n	8009b22 <__sflush_r+0x62>
 8009b14:	6829      	ldr	r1, [r5, #0]
 8009b16:	291d      	cmp	r1, #29
 8009b18:	d82b      	bhi.n	8009b72 <__sflush_r+0xb2>
 8009b1a:	4a2a      	ldr	r2, [pc, #168]	@ (8009bc4 <__sflush_r+0x104>)
 8009b1c:	410a      	asrs	r2, r1
 8009b1e:	07d6      	lsls	r6, r2, #31
 8009b20:	d427      	bmi.n	8009b72 <__sflush_r+0xb2>
 8009b22:	2200      	movs	r2, #0
 8009b24:	6062      	str	r2, [r4, #4]
 8009b26:	04d9      	lsls	r1, r3, #19
 8009b28:	6922      	ldr	r2, [r4, #16]
 8009b2a:	6022      	str	r2, [r4, #0]
 8009b2c:	d504      	bpl.n	8009b38 <__sflush_r+0x78>
 8009b2e:	1c42      	adds	r2, r0, #1
 8009b30:	d101      	bne.n	8009b36 <__sflush_r+0x76>
 8009b32:	682b      	ldr	r3, [r5, #0]
 8009b34:	b903      	cbnz	r3, 8009b38 <__sflush_r+0x78>
 8009b36:	6560      	str	r0, [r4, #84]	@ 0x54
 8009b38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009b3a:	602f      	str	r7, [r5, #0]
 8009b3c:	b1b9      	cbz	r1, 8009b6e <__sflush_r+0xae>
 8009b3e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009b42:	4299      	cmp	r1, r3
 8009b44:	d002      	beq.n	8009b4c <__sflush_r+0x8c>
 8009b46:	4628      	mov	r0, r5
 8009b48:	f000 fe20 	bl	800a78c <_free_r>
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	6363      	str	r3, [r4, #52]	@ 0x34
 8009b50:	e00d      	b.n	8009b6e <__sflush_r+0xae>
 8009b52:	2301      	movs	r3, #1
 8009b54:	4628      	mov	r0, r5
 8009b56:	47b0      	blx	r6
 8009b58:	4602      	mov	r2, r0
 8009b5a:	1c50      	adds	r0, r2, #1
 8009b5c:	d1c9      	bne.n	8009af2 <__sflush_r+0x32>
 8009b5e:	682b      	ldr	r3, [r5, #0]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d0c6      	beq.n	8009af2 <__sflush_r+0x32>
 8009b64:	2b1d      	cmp	r3, #29
 8009b66:	d001      	beq.n	8009b6c <__sflush_r+0xac>
 8009b68:	2b16      	cmp	r3, #22
 8009b6a:	d11e      	bne.n	8009baa <__sflush_r+0xea>
 8009b6c:	602f      	str	r7, [r5, #0]
 8009b6e:	2000      	movs	r0, #0
 8009b70:	e022      	b.n	8009bb8 <__sflush_r+0xf8>
 8009b72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b76:	b21b      	sxth	r3, r3
 8009b78:	e01b      	b.n	8009bb2 <__sflush_r+0xf2>
 8009b7a:	690f      	ldr	r7, [r1, #16]
 8009b7c:	2f00      	cmp	r7, #0
 8009b7e:	d0f6      	beq.n	8009b6e <__sflush_r+0xae>
 8009b80:	0793      	lsls	r3, r2, #30
 8009b82:	680e      	ldr	r6, [r1, #0]
 8009b84:	bf08      	it	eq
 8009b86:	694b      	ldreq	r3, [r1, #20]
 8009b88:	600f      	str	r7, [r1, #0]
 8009b8a:	bf18      	it	ne
 8009b8c:	2300      	movne	r3, #0
 8009b8e:	eba6 0807 	sub.w	r8, r6, r7
 8009b92:	608b      	str	r3, [r1, #8]
 8009b94:	f1b8 0f00 	cmp.w	r8, #0
 8009b98:	dde9      	ble.n	8009b6e <__sflush_r+0xae>
 8009b9a:	6a21      	ldr	r1, [r4, #32]
 8009b9c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009b9e:	4643      	mov	r3, r8
 8009ba0:	463a      	mov	r2, r7
 8009ba2:	4628      	mov	r0, r5
 8009ba4:	47b0      	blx	r6
 8009ba6:	2800      	cmp	r0, #0
 8009ba8:	dc08      	bgt.n	8009bbc <__sflush_r+0xfc>
 8009baa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009bb2:	81a3      	strh	r3, [r4, #12]
 8009bb4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bbc:	4407      	add	r7, r0
 8009bbe:	eba8 0800 	sub.w	r8, r8, r0
 8009bc2:	e7e7      	b.n	8009b94 <__sflush_r+0xd4>
 8009bc4:	dfbffffe 	.word	0xdfbffffe

08009bc8 <_fflush_r>:
 8009bc8:	b538      	push	{r3, r4, r5, lr}
 8009bca:	690b      	ldr	r3, [r1, #16]
 8009bcc:	4605      	mov	r5, r0
 8009bce:	460c      	mov	r4, r1
 8009bd0:	b913      	cbnz	r3, 8009bd8 <_fflush_r+0x10>
 8009bd2:	2500      	movs	r5, #0
 8009bd4:	4628      	mov	r0, r5
 8009bd6:	bd38      	pop	{r3, r4, r5, pc}
 8009bd8:	b118      	cbz	r0, 8009be2 <_fflush_r+0x1a>
 8009bda:	6a03      	ldr	r3, [r0, #32]
 8009bdc:	b90b      	cbnz	r3, 8009be2 <_fflush_r+0x1a>
 8009bde:	f7fe fd4d 	bl	800867c <__sinit>
 8009be2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d0f3      	beq.n	8009bd2 <_fflush_r+0xa>
 8009bea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009bec:	07d0      	lsls	r0, r2, #31
 8009bee:	d404      	bmi.n	8009bfa <_fflush_r+0x32>
 8009bf0:	0599      	lsls	r1, r3, #22
 8009bf2:	d402      	bmi.n	8009bfa <_fflush_r+0x32>
 8009bf4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009bf6:	f7fe fdc0 	bl	800877a <__retarget_lock_acquire_recursive>
 8009bfa:	4628      	mov	r0, r5
 8009bfc:	4621      	mov	r1, r4
 8009bfe:	f7ff ff5f 	bl	8009ac0 <__sflush_r>
 8009c02:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009c04:	07da      	lsls	r2, r3, #31
 8009c06:	4605      	mov	r5, r0
 8009c08:	d4e4      	bmi.n	8009bd4 <_fflush_r+0xc>
 8009c0a:	89a3      	ldrh	r3, [r4, #12]
 8009c0c:	059b      	lsls	r3, r3, #22
 8009c0e:	d4e1      	bmi.n	8009bd4 <_fflush_r+0xc>
 8009c10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009c12:	f7fe fdb3 	bl	800877c <__retarget_lock_release_recursive>
 8009c16:	e7dd      	b.n	8009bd4 <_fflush_r+0xc>

08009c18 <__malloc_lock>:
 8009c18:	4801      	ldr	r0, [pc, #4]	@ (8009c20 <__malloc_lock+0x8>)
 8009c1a:	f7fe bdae 	b.w	800877a <__retarget_lock_acquire_recursive>
 8009c1e:	bf00      	nop
 8009c20:	200014d8 	.word	0x200014d8

08009c24 <__malloc_unlock>:
 8009c24:	4801      	ldr	r0, [pc, #4]	@ (8009c2c <__malloc_unlock+0x8>)
 8009c26:	f7fe bda9 	b.w	800877c <__retarget_lock_release_recursive>
 8009c2a:	bf00      	nop
 8009c2c:	200014d8 	.word	0x200014d8

08009c30 <_Balloc>:
 8009c30:	b570      	push	{r4, r5, r6, lr}
 8009c32:	69c6      	ldr	r6, [r0, #28]
 8009c34:	4604      	mov	r4, r0
 8009c36:	460d      	mov	r5, r1
 8009c38:	b976      	cbnz	r6, 8009c58 <_Balloc+0x28>
 8009c3a:	2010      	movs	r0, #16
 8009c3c:	f7ff fe96 	bl	800996c <malloc>
 8009c40:	4602      	mov	r2, r0
 8009c42:	61e0      	str	r0, [r4, #28]
 8009c44:	b920      	cbnz	r0, 8009c50 <_Balloc+0x20>
 8009c46:	4b18      	ldr	r3, [pc, #96]	@ (8009ca8 <_Balloc+0x78>)
 8009c48:	4818      	ldr	r0, [pc, #96]	@ (8009cac <_Balloc+0x7c>)
 8009c4a:	216b      	movs	r1, #107	@ 0x6b
 8009c4c:	f000 fd6c 	bl	800a728 <__assert_func>
 8009c50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009c54:	6006      	str	r6, [r0, #0]
 8009c56:	60c6      	str	r6, [r0, #12]
 8009c58:	69e6      	ldr	r6, [r4, #28]
 8009c5a:	68f3      	ldr	r3, [r6, #12]
 8009c5c:	b183      	cbz	r3, 8009c80 <_Balloc+0x50>
 8009c5e:	69e3      	ldr	r3, [r4, #28]
 8009c60:	68db      	ldr	r3, [r3, #12]
 8009c62:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009c66:	b9b8      	cbnz	r0, 8009c98 <_Balloc+0x68>
 8009c68:	2101      	movs	r1, #1
 8009c6a:	fa01 f605 	lsl.w	r6, r1, r5
 8009c6e:	1d72      	adds	r2, r6, #5
 8009c70:	0092      	lsls	r2, r2, #2
 8009c72:	4620      	mov	r0, r4
 8009c74:	f000 fd76 	bl	800a764 <_calloc_r>
 8009c78:	b160      	cbz	r0, 8009c94 <_Balloc+0x64>
 8009c7a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009c7e:	e00e      	b.n	8009c9e <_Balloc+0x6e>
 8009c80:	2221      	movs	r2, #33	@ 0x21
 8009c82:	2104      	movs	r1, #4
 8009c84:	4620      	mov	r0, r4
 8009c86:	f000 fd6d 	bl	800a764 <_calloc_r>
 8009c8a:	69e3      	ldr	r3, [r4, #28]
 8009c8c:	60f0      	str	r0, [r6, #12]
 8009c8e:	68db      	ldr	r3, [r3, #12]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d1e4      	bne.n	8009c5e <_Balloc+0x2e>
 8009c94:	2000      	movs	r0, #0
 8009c96:	bd70      	pop	{r4, r5, r6, pc}
 8009c98:	6802      	ldr	r2, [r0, #0]
 8009c9a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009ca4:	e7f7      	b.n	8009c96 <_Balloc+0x66>
 8009ca6:	bf00      	nop
 8009ca8:	0800ab19 	.word	0x0800ab19
 8009cac:	0800abaa 	.word	0x0800abaa

08009cb0 <_Bfree>:
 8009cb0:	b570      	push	{r4, r5, r6, lr}
 8009cb2:	69c6      	ldr	r6, [r0, #28]
 8009cb4:	4605      	mov	r5, r0
 8009cb6:	460c      	mov	r4, r1
 8009cb8:	b976      	cbnz	r6, 8009cd8 <_Bfree+0x28>
 8009cba:	2010      	movs	r0, #16
 8009cbc:	f7ff fe56 	bl	800996c <malloc>
 8009cc0:	4602      	mov	r2, r0
 8009cc2:	61e8      	str	r0, [r5, #28]
 8009cc4:	b920      	cbnz	r0, 8009cd0 <_Bfree+0x20>
 8009cc6:	4b09      	ldr	r3, [pc, #36]	@ (8009cec <_Bfree+0x3c>)
 8009cc8:	4809      	ldr	r0, [pc, #36]	@ (8009cf0 <_Bfree+0x40>)
 8009cca:	218f      	movs	r1, #143	@ 0x8f
 8009ccc:	f000 fd2c 	bl	800a728 <__assert_func>
 8009cd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009cd4:	6006      	str	r6, [r0, #0]
 8009cd6:	60c6      	str	r6, [r0, #12]
 8009cd8:	b13c      	cbz	r4, 8009cea <_Bfree+0x3a>
 8009cda:	69eb      	ldr	r3, [r5, #28]
 8009cdc:	6862      	ldr	r2, [r4, #4]
 8009cde:	68db      	ldr	r3, [r3, #12]
 8009ce0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009ce4:	6021      	str	r1, [r4, #0]
 8009ce6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009cea:	bd70      	pop	{r4, r5, r6, pc}
 8009cec:	0800ab19 	.word	0x0800ab19
 8009cf0:	0800abaa 	.word	0x0800abaa

08009cf4 <__multadd>:
 8009cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cf8:	690d      	ldr	r5, [r1, #16]
 8009cfa:	4607      	mov	r7, r0
 8009cfc:	460c      	mov	r4, r1
 8009cfe:	461e      	mov	r6, r3
 8009d00:	f101 0c14 	add.w	ip, r1, #20
 8009d04:	2000      	movs	r0, #0
 8009d06:	f8dc 3000 	ldr.w	r3, [ip]
 8009d0a:	b299      	uxth	r1, r3
 8009d0c:	fb02 6101 	mla	r1, r2, r1, r6
 8009d10:	0c1e      	lsrs	r6, r3, #16
 8009d12:	0c0b      	lsrs	r3, r1, #16
 8009d14:	fb02 3306 	mla	r3, r2, r6, r3
 8009d18:	b289      	uxth	r1, r1
 8009d1a:	3001      	adds	r0, #1
 8009d1c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009d20:	4285      	cmp	r5, r0
 8009d22:	f84c 1b04 	str.w	r1, [ip], #4
 8009d26:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009d2a:	dcec      	bgt.n	8009d06 <__multadd+0x12>
 8009d2c:	b30e      	cbz	r6, 8009d72 <__multadd+0x7e>
 8009d2e:	68a3      	ldr	r3, [r4, #8]
 8009d30:	42ab      	cmp	r3, r5
 8009d32:	dc19      	bgt.n	8009d68 <__multadd+0x74>
 8009d34:	6861      	ldr	r1, [r4, #4]
 8009d36:	4638      	mov	r0, r7
 8009d38:	3101      	adds	r1, #1
 8009d3a:	f7ff ff79 	bl	8009c30 <_Balloc>
 8009d3e:	4680      	mov	r8, r0
 8009d40:	b928      	cbnz	r0, 8009d4e <__multadd+0x5a>
 8009d42:	4602      	mov	r2, r0
 8009d44:	4b0c      	ldr	r3, [pc, #48]	@ (8009d78 <__multadd+0x84>)
 8009d46:	480d      	ldr	r0, [pc, #52]	@ (8009d7c <__multadd+0x88>)
 8009d48:	21ba      	movs	r1, #186	@ 0xba
 8009d4a:	f000 fced 	bl	800a728 <__assert_func>
 8009d4e:	6922      	ldr	r2, [r4, #16]
 8009d50:	3202      	adds	r2, #2
 8009d52:	f104 010c 	add.w	r1, r4, #12
 8009d56:	0092      	lsls	r2, r2, #2
 8009d58:	300c      	adds	r0, #12
 8009d5a:	f7fe fd10 	bl	800877e <memcpy>
 8009d5e:	4621      	mov	r1, r4
 8009d60:	4638      	mov	r0, r7
 8009d62:	f7ff ffa5 	bl	8009cb0 <_Bfree>
 8009d66:	4644      	mov	r4, r8
 8009d68:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009d6c:	3501      	adds	r5, #1
 8009d6e:	615e      	str	r6, [r3, #20]
 8009d70:	6125      	str	r5, [r4, #16]
 8009d72:	4620      	mov	r0, r4
 8009d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d78:	0800ab88 	.word	0x0800ab88
 8009d7c:	0800abaa 	.word	0x0800abaa

08009d80 <__hi0bits>:
 8009d80:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009d84:	4603      	mov	r3, r0
 8009d86:	bf36      	itet	cc
 8009d88:	0403      	lslcc	r3, r0, #16
 8009d8a:	2000      	movcs	r0, #0
 8009d8c:	2010      	movcc	r0, #16
 8009d8e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009d92:	bf3c      	itt	cc
 8009d94:	021b      	lslcc	r3, r3, #8
 8009d96:	3008      	addcc	r0, #8
 8009d98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009d9c:	bf3c      	itt	cc
 8009d9e:	011b      	lslcc	r3, r3, #4
 8009da0:	3004      	addcc	r0, #4
 8009da2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009da6:	bf3c      	itt	cc
 8009da8:	009b      	lslcc	r3, r3, #2
 8009daa:	3002      	addcc	r0, #2
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	db05      	blt.n	8009dbc <__hi0bits+0x3c>
 8009db0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009db4:	f100 0001 	add.w	r0, r0, #1
 8009db8:	bf08      	it	eq
 8009dba:	2020      	moveq	r0, #32
 8009dbc:	4770      	bx	lr

08009dbe <__lo0bits>:
 8009dbe:	6803      	ldr	r3, [r0, #0]
 8009dc0:	4602      	mov	r2, r0
 8009dc2:	f013 0007 	ands.w	r0, r3, #7
 8009dc6:	d00b      	beq.n	8009de0 <__lo0bits+0x22>
 8009dc8:	07d9      	lsls	r1, r3, #31
 8009dca:	d421      	bmi.n	8009e10 <__lo0bits+0x52>
 8009dcc:	0798      	lsls	r0, r3, #30
 8009dce:	bf49      	itett	mi
 8009dd0:	085b      	lsrmi	r3, r3, #1
 8009dd2:	089b      	lsrpl	r3, r3, #2
 8009dd4:	2001      	movmi	r0, #1
 8009dd6:	6013      	strmi	r3, [r2, #0]
 8009dd8:	bf5c      	itt	pl
 8009dda:	6013      	strpl	r3, [r2, #0]
 8009ddc:	2002      	movpl	r0, #2
 8009dde:	4770      	bx	lr
 8009de0:	b299      	uxth	r1, r3
 8009de2:	b909      	cbnz	r1, 8009de8 <__lo0bits+0x2a>
 8009de4:	0c1b      	lsrs	r3, r3, #16
 8009de6:	2010      	movs	r0, #16
 8009de8:	b2d9      	uxtb	r1, r3
 8009dea:	b909      	cbnz	r1, 8009df0 <__lo0bits+0x32>
 8009dec:	3008      	adds	r0, #8
 8009dee:	0a1b      	lsrs	r3, r3, #8
 8009df0:	0719      	lsls	r1, r3, #28
 8009df2:	bf04      	itt	eq
 8009df4:	091b      	lsreq	r3, r3, #4
 8009df6:	3004      	addeq	r0, #4
 8009df8:	0799      	lsls	r1, r3, #30
 8009dfa:	bf04      	itt	eq
 8009dfc:	089b      	lsreq	r3, r3, #2
 8009dfe:	3002      	addeq	r0, #2
 8009e00:	07d9      	lsls	r1, r3, #31
 8009e02:	d403      	bmi.n	8009e0c <__lo0bits+0x4e>
 8009e04:	085b      	lsrs	r3, r3, #1
 8009e06:	f100 0001 	add.w	r0, r0, #1
 8009e0a:	d003      	beq.n	8009e14 <__lo0bits+0x56>
 8009e0c:	6013      	str	r3, [r2, #0]
 8009e0e:	4770      	bx	lr
 8009e10:	2000      	movs	r0, #0
 8009e12:	4770      	bx	lr
 8009e14:	2020      	movs	r0, #32
 8009e16:	4770      	bx	lr

08009e18 <__i2b>:
 8009e18:	b510      	push	{r4, lr}
 8009e1a:	460c      	mov	r4, r1
 8009e1c:	2101      	movs	r1, #1
 8009e1e:	f7ff ff07 	bl	8009c30 <_Balloc>
 8009e22:	4602      	mov	r2, r0
 8009e24:	b928      	cbnz	r0, 8009e32 <__i2b+0x1a>
 8009e26:	4b05      	ldr	r3, [pc, #20]	@ (8009e3c <__i2b+0x24>)
 8009e28:	4805      	ldr	r0, [pc, #20]	@ (8009e40 <__i2b+0x28>)
 8009e2a:	f240 1145 	movw	r1, #325	@ 0x145
 8009e2e:	f000 fc7b 	bl	800a728 <__assert_func>
 8009e32:	2301      	movs	r3, #1
 8009e34:	6144      	str	r4, [r0, #20]
 8009e36:	6103      	str	r3, [r0, #16]
 8009e38:	bd10      	pop	{r4, pc}
 8009e3a:	bf00      	nop
 8009e3c:	0800ab88 	.word	0x0800ab88
 8009e40:	0800abaa 	.word	0x0800abaa

08009e44 <__multiply>:
 8009e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e48:	4614      	mov	r4, r2
 8009e4a:	690a      	ldr	r2, [r1, #16]
 8009e4c:	6923      	ldr	r3, [r4, #16]
 8009e4e:	429a      	cmp	r2, r3
 8009e50:	bfa8      	it	ge
 8009e52:	4623      	movge	r3, r4
 8009e54:	460f      	mov	r7, r1
 8009e56:	bfa4      	itt	ge
 8009e58:	460c      	movge	r4, r1
 8009e5a:	461f      	movge	r7, r3
 8009e5c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009e60:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009e64:	68a3      	ldr	r3, [r4, #8]
 8009e66:	6861      	ldr	r1, [r4, #4]
 8009e68:	eb0a 0609 	add.w	r6, sl, r9
 8009e6c:	42b3      	cmp	r3, r6
 8009e6e:	b085      	sub	sp, #20
 8009e70:	bfb8      	it	lt
 8009e72:	3101      	addlt	r1, #1
 8009e74:	f7ff fedc 	bl	8009c30 <_Balloc>
 8009e78:	b930      	cbnz	r0, 8009e88 <__multiply+0x44>
 8009e7a:	4602      	mov	r2, r0
 8009e7c:	4b44      	ldr	r3, [pc, #272]	@ (8009f90 <__multiply+0x14c>)
 8009e7e:	4845      	ldr	r0, [pc, #276]	@ (8009f94 <__multiply+0x150>)
 8009e80:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009e84:	f000 fc50 	bl	800a728 <__assert_func>
 8009e88:	f100 0514 	add.w	r5, r0, #20
 8009e8c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009e90:	462b      	mov	r3, r5
 8009e92:	2200      	movs	r2, #0
 8009e94:	4543      	cmp	r3, r8
 8009e96:	d321      	bcc.n	8009edc <__multiply+0x98>
 8009e98:	f107 0114 	add.w	r1, r7, #20
 8009e9c:	f104 0214 	add.w	r2, r4, #20
 8009ea0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009ea4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009ea8:	9302      	str	r3, [sp, #8]
 8009eaa:	1b13      	subs	r3, r2, r4
 8009eac:	3b15      	subs	r3, #21
 8009eae:	f023 0303 	bic.w	r3, r3, #3
 8009eb2:	3304      	adds	r3, #4
 8009eb4:	f104 0715 	add.w	r7, r4, #21
 8009eb8:	42ba      	cmp	r2, r7
 8009eba:	bf38      	it	cc
 8009ebc:	2304      	movcc	r3, #4
 8009ebe:	9301      	str	r3, [sp, #4]
 8009ec0:	9b02      	ldr	r3, [sp, #8]
 8009ec2:	9103      	str	r1, [sp, #12]
 8009ec4:	428b      	cmp	r3, r1
 8009ec6:	d80c      	bhi.n	8009ee2 <__multiply+0x9e>
 8009ec8:	2e00      	cmp	r6, #0
 8009eca:	dd03      	ble.n	8009ed4 <__multiply+0x90>
 8009ecc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d05b      	beq.n	8009f8c <__multiply+0x148>
 8009ed4:	6106      	str	r6, [r0, #16]
 8009ed6:	b005      	add	sp, #20
 8009ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009edc:	f843 2b04 	str.w	r2, [r3], #4
 8009ee0:	e7d8      	b.n	8009e94 <__multiply+0x50>
 8009ee2:	f8b1 a000 	ldrh.w	sl, [r1]
 8009ee6:	f1ba 0f00 	cmp.w	sl, #0
 8009eea:	d024      	beq.n	8009f36 <__multiply+0xf2>
 8009eec:	f104 0e14 	add.w	lr, r4, #20
 8009ef0:	46a9      	mov	r9, r5
 8009ef2:	f04f 0c00 	mov.w	ip, #0
 8009ef6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009efa:	f8d9 3000 	ldr.w	r3, [r9]
 8009efe:	fa1f fb87 	uxth.w	fp, r7
 8009f02:	b29b      	uxth	r3, r3
 8009f04:	fb0a 330b 	mla	r3, sl, fp, r3
 8009f08:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009f0c:	f8d9 7000 	ldr.w	r7, [r9]
 8009f10:	4463      	add	r3, ip
 8009f12:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009f16:	fb0a c70b 	mla	r7, sl, fp, ip
 8009f1a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009f1e:	b29b      	uxth	r3, r3
 8009f20:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009f24:	4572      	cmp	r2, lr
 8009f26:	f849 3b04 	str.w	r3, [r9], #4
 8009f2a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009f2e:	d8e2      	bhi.n	8009ef6 <__multiply+0xb2>
 8009f30:	9b01      	ldr	r3, [sp, #4]
 8009f32:	f845 c003 	str.w	ip, [r5, r3]
 8009f36:	9b03      	ldr	r3, [sp, #12]
 8009f38:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009f3c:	3104      	adds	r1, #4
 8009f3e:	f1b9 0f00 	cmp.w	r9, #0
 8009f42:	d021      	beq.n	8009f88 <__multiply+0x144>
 8009f44:	682b      	ldr	r3, [r5, #0]
 8009f46:	f104 0c14 	add.w	ip, r4, #20
 8009f4a:	46ae      	mov	lr, r5
 8009f4c:	f04f 0a00 	mov.w	sl, #0
 8009f50:	f8bc b000 	ldrh.w	fp, [ip]
 8009f54:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009f58:	fb09 770b 	mla	r7, r9, fp, r7
 8009f5c:	4457      	add	r7, sl
 8009f5e:	b29b      	uxth	r3, r3
 8009f60:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009f64:	f84e 3b04 	str.w	r3, [lr], #4
 8009f68:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009f6c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009f70:	f8be 3000 	ldrh.w	r3, [lr]
 8009f74:	fb09 330a 	mla	r3, r9, sl, r3
 8009f78:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009f7c:	4562      	cmp	r2, ip
 8009f7e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009f82:	d8e5      	bhi.n	8009f50 <__multiply+0x10c>
 8009f84:	9f01      	ldr	r7, [sp, #4]
 8009f86:	51eb      	str	r3, [r5, r7]
 8009f88:	3504      	adds	r5, #4
 8009f8a:	e799      	b.n	8009ec0 <__multiply+0x7c>
 8009f8c:	3e01      	subs	r6, #1
 8009f8e:	e79b      	b.n	8009ec8 <__multiply+0x84>
 8009f90:	0800ab88 	.word	0x0800ab88
 8009f94:	0800abaa 	.word	0x0800abaa

08009f98 <__pow5mult>:
 8009f98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f9c:	4615      	mov	r5, r2
 8009f9e:	f012 0203 	ands.w	r2, r2, #3
 8009fa2:	4607      	mov	r7, r0
 8009fa4:	460e      	mov	r6, r1
 8009fa6:	d007      	beq.n	8009fb8 <__pow5mult+0x20>
 8009fa8:	4c25      	ldr	r4, [pc, #148]	@ (800a040 <__pow5mult+0xa8>)
 8009faa:	3a01      	subs	r2, #1
 8009fac:	2300      	movs	r3, #0
 8009fae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009fb2:	f7ff fe9f 	bl	8009cf4 <__multadd>
 8009fb6:	4606      	mov	r6, r0
 8009fb8:	10ad      	asrs	r5, r5, #2
 8009fba:	d03d      	beq.n	800a038 <__pow5mult+0xa0>
 8009fbc:	69fc      	ldr	r4, [r7, #28]
 8009fbe:	b97c      	cbnz	r4, 8009fe0 <__pow5mult+0x48>
 8009fc0:	2010      	movs	r0, #16
 8009fc2:	f7ff fcd3 	bl	800996c <malloc>
 8009fc6:	4602      	mov	r2, r0
 8009fc8:	61f8      	str	r0, [r7, #28]
 8009fca:	b928      	cbnz	r0, 8009fd8 <__pow5mult+0x40>
 8009fcc:	4b1d      	ldr	r3, [pc, #116]	@ (800a044 <__pow5mult+0xac>)
 8009fce:	481e      	ldr	r0, [pc, #120]	@ (800a048 <__pow5mult+0xb0>)
 8009fd0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009fd4:	f000 fba8 	bl	800a728 <__assert_func>
 8009fd8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009fdc:	6004      	str	r4, [r0, #0]
 8009fde:	60c4      	str	r4, [r0, #12]
 8009fe0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009fe4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009fe8:	b94c      	cbnz	r4, 8009ffe <__pow5mult+0x66>
 8009fea:	f240 2171 	movw	r1, #625	@ 0x271
 8009fee:	4638      	mov	r0, r7
 8009ff0:	f7ff ff12 	bl	8009e18 <__i2b>
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	f8c8 0008 	str.w	r0, [r8, #8]
 8009ffa:	4604      	mov	r4, r0
 8009ffc:	6003      	str	r3, [r0, #0]
 8009ffe:	f04f 0900 	mov.w	r9, #0
 800a002:	07eb      	lsls	r3, r5, #31
 800a004:	d50a      	bpl.n	800a01c <__pow5mult+0x84>
 800a006:	4631      	mov	r1, r6
 800a008:	4622      	mov	r2, r4
 800a00a:	4638      	mov	r0, r7
 800a00c:	f7ff ff1a 	bl	8009e44 <__multiply>
 800a010:	4631      	mov	r1, r6
 800a012:	4680      	mov	r8, r0
 800a014:	4638      	mov	r0, r7
 800a016:	f7ff fe4b 	bl	8009cb0 <_Bfree>
 800a01a:	4646      	mov	r6, r8
 800a01c:	106d      	asrs	r5, r5, #1
 800a01e:	d00b      	beq.n	800a038 <__pow5mult+0xa0>
 800a020:	6820      	ldr	r0, [r4, #0]
 800a022:	b938      	cbnz	r0, 800a034 <__pow5mult+0x9c>
 800a024:	4622      	mov	r2, r4
 800a026:	4621      	mov	r1, r4
 800a028:	4638      	mov	r0, r7
 800a02a:	f7ff ff0b 	bl	8009e44 <__multiply>
 800a02e:	6020      	str	r0, [r4, #0]
 800a030:	f8c0 9000 	str.w	r9, [r0]
 800a034:	4604      	mov	r4, r0
 800a036:	e7e4      	b.n	800a002 <__pow5mult+0x6a>
 800a038:	4630      	mov	r0, r6
 800a03a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a03e:	bf00      	nop
 800a040:	0800ac04 	.word	0x0800ac04
 800a044:	0800ab19 	.word	0x0800ab19
 800a048:	0800abaa 	.word	0x0800abaa

0800a04c <__lshift>:
 800a04c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a050:	460c      	mov	r4, r1
 800a052:	6849      	ldr	r1, [r1, #4]
 800a054:	6923      	ldr	r3, [r4, #16]
 800a056:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a05a:	68a3      	ldr	r3, [r4, #8]
 800a05c:	4607      	mov	r7, r0
 800a05e:	4691      	mov	r9, r2
 800a060:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a064:	f108 0601 	add.w	r6, r8, #1
 800a068:	42b3      	cmp	r3, r6
 800a06a:	db0b      	blt.n	800a084 <__lshift+0x38>
 800a06c:	4638      	mov	r0, r7
 800a06e:	f7ff fddf 	bl	8009c30 <_Balloc>
 800a072:	4605      	mov	r5, r0
 800a074:	b948      	cbnz	r0, 800a08a <__lshift+0x3e>
 800a076:	4602      	mov	r2, r0
 800a078:	4b28      	ldr	r3, [pc, #160]	@ (800a11c <__lshift+0xd0>)
 800a07a:	4829      	ldr	r0, [pc, #164]	@ (800a120 <__lshift+0xd4>)
 800a07c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a080:	f000 fb52 	bl	800a728 <__assert_func>
 800a084:	3101      	adds	r1, #1
 800a086:	005b      	lsls	r3, r3, #1
 800a088:	e7ee      	b.n	800a068 <__lshift+0x1c>
 800a08a:	2300      	movs	r3, #0
 800a08c:	f100 0114 	add.w	r1, r0, #20
 800a090:	f100 0210 	add.w	r2, r0, #16
 800a094:	4618      	mov	r0, r3
 800a096:	4553      	cmp	r3, sl
 800a098:	db33      	blt.n	800a102 <__lshift+0xb6>
 800a09a:	6920      	ldr	r0, [r4, #16]
 800a09c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a0a0:	f104 0314 	add.w	r3, r4, #20
 800a0a4:	f019 091f 	ands.w	r9, r9, #31
 800a0a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a0ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a0b0:	d02b      	beq.n	800a10a <__lshift+0xbe>
 800a0b2:	f1c9 0e20 	rsb	lr, r9, #32
 800a0b6:	468a      	mov	sl, r1
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	6818      	ldr	r0, [r3, #0]
 800a0bc:	fa00 f009 	lsl.w	r0, r0, r9
 800a0c0:	4310      	orrs	r0, r2
 800a0c2:	f84a 0b04 	str.w	r0, [sl], #4
 800a0c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0ca:	459c      	cmp	ip, r3
 800a0cc:	fa22 f20e 	lsr.w	r2, r2, lr
 800a0d0:	d8f3      	bhi.n	800a0ba <__lshift+0x6e>
 800a0d2:	ebac 0304 	sub.w	r3, ip, r4
 800a0d6:	3b15      	subs	r3, #21
 800a0d8:	f023 0303 	bic.w	r3, r3, #3
 800a0dc:	3304      	adds	r3, #4
 800a0de:	f104 0015 	add.w	r0, r4, #21
 800a0e2:	4584      	cmp	ip, r0
 800a0e4:	bf38      	it	cc
 800a0e6:	2304      	movcc	r3, #4
 800a0e8:	50ca      	str	r2, [r1, r3]
 800a0ea:	b10a      	cbz	r2, 800a0f0 <__lshift+0xa4>
 800a0ec:	f108 0602 	add.w	r6, r8, #2
 800a0f0:	3e01      	subs	r6, #1
 800a0f2:	4638      	mov	r0, r7
 800a0f4:	612e      	str	r6, [r5, #16]
 800a0f6:	4621      	mov	r1, r4
 800a0f8:	f7ff fdda 	bl	8009cb0 <_Bfree>
 800a0fc:	4628      	mov	r0, r5
 800a0fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a102:	f842 0f04 	str.w	r0, [r2, #4]!
 800a106:	3301      	adds	r3, #1
 800a108:	e7c5      	b.n	800a096 <__lshift+0x4a>
 800a10a:	3904      	subs	r1, #4
 800a10c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a110:	f841 2f04 	str.w	r2, [r1, #4]!
 800a114:	459c      	cmp	ip, r3
 800a116:	d8f9      	bhi.n	800a10c <__lshift+0xc0>
 800a118:	e7ea      	b.n	800a0f0 <__lshift+0xa4>
 800a11a:	bf00      	nop
 800a11c:	0800ab88 	.word	0x0800ab88
 800a120:	0800abaa 	.word	0x0800abaa

0800a124 <__mcmp>:
 800a124:	690a      	ldr	r2, [r1, #16]
 800a126:	4603      	mov	r3, r0
 800a128:	6900      	ldr	r0, [r0, #16]
 800a12a:	1a80      	subs	r0, r0, r2
 800a12c:	b530      	push	{r4, r5, lr}
 800a12e:	d10e      	bne.n	800a14e <__mcmp+0x2a>
 800a130:	3314      	adds	r3, #20
 800a132:	3114      	adds	r1, #20
 800a134:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a138:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a13c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a140:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a144:	4295      	cmp	r5, r2
 800a146:	d003      	beq.n	800a150 <__mcmp+0x2c>
 800a148:	d205      	bcs.n	800a156 <__mcmp+0x32>
 800a14a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a14e:	bd30      	pop	{r4, r5, pc}
 800a150:	42a3      	cmp	r3, r4
 800a152:	d3f3      	bcc.n	800a13c <__mcmp+0x18>
 800a154:	e7fb      	b.n	800a14e <__mcmp+0x2a>
 800a156:	2001      	movs	r0, #1
 800a158:	e7f9      	b.n	800a14e <__mcmp+0x2a>
	...

0800a15c <__mdiff>:
 800a15c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a160:	4689      	mov	r9, r1
 800a162:	4606      	mov	r6, r0
 800a164:	4611      	mov	r1, r2
 800a166:	4648      	mov	r0, r9
 800a168:	4614      	mov	r4, r2
 800a16a:	f7ff ffdb 	bl	800a124 <__mcmp>
 800a16e:	1e05      	subs	r5, r0, #0
 800a170:	d112      	bne.n	800a198 <__mdiff+0x3c>
 800a172:	4629      	mov	r1, r5
 800a174:	4630      	mov	r0, r6
 800a176:	f7ff fd5b 	bl	8009c30 <_Balloc>
 800a17a:	4602      	mov	r2, r0
 800a17c:	b928      	cbnz	r0, 800a18a <__mdiff+0x2e>
 800a17e:	4b3f      	ldr	r3, [pc, #252]	@ (800a27c <__mdiff+0x120>)
 800a180:	f240 2137 	movw	r1, #567	@ 0x237
 800a184:	483e      	ldr	r0, [pc, #248]	@ (800a280 <__mdiff+0x124>)
 800a186:	f000 facf 	bl	800a728 <__assert_func>
 800a18a:	2301      	movs	r3, #1
 800a18c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a190:	4610      	mov	r0, r2
 800a192:	b003      	add	sp, #12
 800a194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a198:	bfbc      	itt	lt
 800a19a:	464b      	movlt	r3, r9
 800a19c:	46a1      	movlt	r9, r4
 800a19e:	4630      	mov	r0, r6
 800a1a0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a1a4:	bfba      	itte	lt
 800a1a6:	461c      	movlt	r4, r3
 800a1a8:	2501      	movlt	r5, #1
 800a1aa:	2500      	movge	r5, #0
 800a1ac:	f7ff fd40 	bl	8009c30 <_Balloc>
 800a1b0:	4602      	mov	r2, r0
 800a1b2:	b918      	cbnz	r0, 800a1bc <__mdiff+0x60>
 800a1b4:	4b31      	ldr	r3, [pc, #196]	@ (800a27c <__mdiff+0x120>)
 800a1b6:	f240 2145 	movw	r1, #581	@ 0x245
 800a1ba:	e7e3      	b.n	800a184 <__mdiff+0x28>
 800a1bc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a1c0:	6926      	ldr	r6, [r4, #16]
 800a1c2:	60c5      	str	r5, [r0, #12]
 800a1c4:	f109 0310 	add.w	r3, r9, #16
 800a1c8:	f109 0514 	add.w	r5, r9, #20
 800a1cc:	f104 0e14 	add.w	lr, r4, #20
 800a1d0:	f100 0b14 	add.w	fp, r0, #20
 800a1d4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a1d8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a1dc:	9301      	str	r3, [sp, #4]
 800a1de:	46d9      	mov	r9, fp
 800a1e0:	f04f 0c00 	mov.w	ip, #0
 800a1e4:	9b01      	ldr	r3, [sp, #4]
 800a1e6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a1ea:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a1ee:	9301      	str	r3, [sp, #4]
 800a1f0:	fa1f f38a 	uxth.w	r3, sl
 800a1f4:	4619      	mov	r1, r3
 800a1f6:	b283      	uxth	r3, r0
 800a1f8:	1acb      	subs	r3, r1, r3
 800a1fa:	0c00      	lsrs	r0, r0, #16
 800a1fc:	4463      	add	r3, ip
 800a1fe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a202:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a206:	b29b      	uxth	r3, r3
 800a208:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a20c:	4576      	cmp	r6, lr
 800a20e:	f849 3b04 	str.w	r3, [r9], #4
 800a212:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a216:	d8e5      	bhi.n	800a1e4 <__mdiff+0x88>
 800a218:	1b33      	subs	r3, r6, r4
 800a21a:	3b15      	subs	r3, #21
 800a21c:	f023 0303 	bic.w	r3, r3, #3
 800a220:	3415      	adds	r4, #21
 800a222:	3304      	adds	r3, #4
 800a224:	42a6      	cmp	r6, r4
 800a226:	bf38      	it	cc
 800a228:	2304      	movcc	r3, #4
 800a22a:	441d      	add	r5, r3
 800a22c:	445b      	add	r3, fp
 800a22e:	461e      	mov	r6, r3
 800a230:	462c      	mov	r4, r5
 800a232:	4544      	cmp	r4, r8
 800a234:	d30e      	bcc.n	800a254 <__mdiff+0xf8>
 800a236:	f108 0103 	add.w	r1, r8, #3
 800a23a:	1b49      	subs	r1, r1, r5
 800a23c:	f021 0103 	bic.w	r1, r1, #3
 800a240:	3d03      	subs	r5, #3
 800a242:	45a8      	cmp	r8, r5
 800a244:	bf38      	it	cc
 800a246:	2100      	movcc	r1, #0
 800a248:	440b      	add	r3, r1
 800a24a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a24e:	b191      	cbz	r1, 800a276 <__mdiff+0x11a>
 800a250:	6117      	str	r7, [r2, #16]
 800a252:	e79d      	b.n	800a190 <__mdiff+0x34>
 800a254:	f854 1b04 	ldr.w	r1, [r4], #4
 800a258:	46e6      	mov	lr, ip
 800a25a:	0c08      	lsrs	r0, r1, #16
 800a25c:	fa1c fc81 	uxtah	ip, ip, r1
 800a260:	4471      	add	r1, lr
 800a262:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a266:	b289      	uxth	r1, r1
 800a268:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a26c:	f846 1b04 	str.w	r1, [r6], #4
 800a270:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a274:	e7dd      	b.n	800a232 <__mdiff+0xd6>
 800a276:	3f01      	subs	r7, #1
 800a278:	e7e7      	b.n	800a24a <__mdiff+0xee>
 800a27a:	bf00      	nop
 800a27c:	0800ab88 	.word	0x0800ab88
 800a280:	0800abaa 	.word	0x0800abaa

0800a284 <__d2b>:
 800a284:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a288:	460f      	mov	r7, r1
 800a28a:	2101      	movs	r1, #1
 800a28c:	ec59 8b10 	vmov	r8, r9, d0
 800a290:	4616      	mov	r6, r2
 800a292:	f7ff fccd 	bl	8009c30 <_Balloc>
 800a296:	4604      	mov	r4, r0
 800a298:	b930      	cbnz	r0, 800a2a8 <__d2b+0x24>
 800a29a:	4602      	mov	r2, r0
 800a29c:	4b23      	ldr	r3, [pc, #140]	@ (800a32c <__d2b+0xa8>)
 800a29e:	4824      	ldr	r0, [pc, #144]	@ (800a330 <__d2b+0xac>)
 800a2a0:	f240 310f 	movw	r1, #783	@ 0x30f
 800a2a4:	f000 fa40 	bl	800a728 <__assert_func>
 800a2a8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a2ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a2b0:	b10d      	cbz	r5, 800a2b6 <__d2b+0x32>
 800a2b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a2b6:	9301      	str	r3, [sp, #4]
 800a2b8:	f1b8 0300 	subs.w	r3, r8, #0
 800a2bc:	d023      	beq.n	800a306 <__d2b+0x82>
 800a2be:	4668      	mov	r0, sp
 800a2c0:	9300      	str	r3, [sp, #0]
 800a2c2:	f7ff fd7c 	bl	8009dbe <__lo0bits>
 800a2c6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a2ca:	b1d0      	cbz	r0, 800a302 <__d2b+0x7e>
 800a2cc:	f1c0 0320 	rsb	r3, r0, #32
 800a2d0:	fa02 f303 	lsl.w	r3, r2, r3
 800a2d4:	430b      	orrs	r3, r1
 800a2d6:	40c2      	lsrs	r2, r0
 800a2d8:	6163      	str	r3, [r4, #20]
 800a2da:	9201      	str	r2, [sp, #4]
 800a2dc:	9b01      	ldr	r3, [sp, #4]
 800a2de:	61a3      	str	r3, [r4, #24]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	bf0c      	ite	eq
 800a2e4:	2201      	moveq	r2, #1
 800a2e6:	2202      	movne	r2, #2
 800a2e8:	6122      	str	r2, [r4, #16]
 800a2ea:	b1a5      	cbz	r5, 800a316 <__d2b+0x92>
 800a2ec:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a2f0:	4405      	add	r5, r0
 800a2f2:	603d      	str	r5, [r7, #0]
 800a2f4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a2f8:	6030      	str	r0, [r6, #0]
 800a2fa:	4620      	mov	r0, r4
 800a2fc:	b003      	add	sp, #12
 800a2fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a302:	6161      	str	r1, [r4, #20]
 800a304:	e7ea      	b.n	800a2dc <__d2b+0x58>
 800a306:	a801      	add	r0, sp, #4
 800a308:	f7ff fd59 	bl	8009dbe <__lo0bits>
 800a30c:	9b01      	ldr	r3, [sp, #4]
 800a30e:	6163      	str	r3, [r4, #20]
 800a310:	3020      	adds	r0, #32
 800a312:	2201      	movs	r2, #1
 800a314:	e7e8      	b.n	800a2e8 <__d2b+0x64>
 800a316:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a31a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a31e:	6038      	str	r0, [r7, #0]
 800a320:	6918      	ldr	r0, [r3, #16]
 800a322:	f7ff fd2d 	bl	8009d80 <__hi0bits>
 800a326:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a32a:	e7e5      	b.n	800a2f8 <__d2b+0x74>
 800a32c:	0800ab88 	.word	0x0800ab88
 800a330:	0800abaa 	.word	0x0800abaa

0800a334 <__sread>:
 800a334:	b510      	push	{r4, lr}
 800a336:	460c      	mov	r4, r1
 800a338:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a33c:	f000 f9c0 	bl	800a6c0 <_read_r>
 800a340:	2800      	cmp	r0, #0
 800a342:	bfab      	itete	ge
 800a344:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a346:	89a3      	ldrhlt	r3, [r4, #12]
 800a348:	181b      	addge	r3, r3, r0
 800a34a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a34e:	bfac      	ite	ge
 800a350:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a352:	81a3      	strhlt	r3, [r4, #12]
 800a354:	bd10      	pop	{r4, pc}

0800a356 <__swrite>:
 800a356:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a35a:	461f      	mov	r7, r3
 800a35c:	898b      	ldrh	r3, [r1, #12]
 800a35e:	05db      	lsls	r3, r3, #23
 800a360:	4605      	mov	r5, r0
 800a362:	460c      	mov	r4, r1
 800a364:	4616      	mov	r6, r2
 800a366:	d505      	bpl.n	800a374 <__swrite+0x1e>
 800a368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a36c:	2302      	movs	r3, #2
 800a36e:	2200      	movs	r2, #0
 800a370:	f000 f994 	bl	800a69c <_lseek_r>
 800a374:	89a3      	ldrh	r3, [r4, #12]
 800a376:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a37a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a37e:	81a3      	strh	r3, [r4, #12]
 800a380:	4632      	mov	r2, r6
 800a382:	463b      	mov	r3, r7
 800a384:	4628      	mov	r0, r5
 800a386:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a38a:	f000 b9bb 	b.w	800a704 <_write_r>

0800a38e <__sseek>:
 800a38e:	b510      	push	{r4, lr}
 800a390:	460c      	mov	r4, r1
 800a392:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a396:	f000 f981 	bl	800a69c <_lseek_r>
 800a39a:	1c43      	adds	r3, r0, #1
 800a39c:	89a3      	ldrh	r3, [r4, #12]
 800a39e:	bf15      	itete	ne
 800a3a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a3a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a3a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a3aa:	81a3      	strheq	r3, [r4, #12]
 800a3ac:	bf18      	it	ne
 800a3ae:	81a3      	strhne	r3, [r4, #12]
 800a3b0:	bd10      	pop	{r4, pc}

0800a3b2 <__sclose>:
 800a3b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3b6:	f000 b93f 	b.w	800a638 <_close_r>

0800a3ba <_realloc_r>:
 800a3ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3be:	4680      	mov	r8, r0
 800a3c0:	4615      	mov	r5, r2
 800a3c2:	460c      	mov	r4, r1
 800a3c4:	b921      	cbnz	r1, 800a3d0 <_realloc_r+0x16>
 800a3c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a3ca:	4611      	mov	r1, r2
 800a3cc:	f7ff baf8 	b.w	80099c0 <_malloc_r>
 800a3d0:	b92a      	cbnz	r2, 800a3de <_realloc_r+0x24>
 800a3d2:	f000 f9db 	bl	800a78c <_free_r>
 800a3d6:	2400      	movs	r4, #0
 800a3d8:	4620      	mov	r0, r4
 800a3da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3de:	f000 fa31 	bl	800a844 <_malloc_usable_size_r>
 800a3e2:	4285      	cmp	r5, r0
 800a3e4:	4606      	mov	r6, r0
 800a3e6:	d802      	bhi.n	800a3ee <_realloc_r+0x34>
 800a3e8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a3ec:	d8f4      	bhi.n	800a3d8 <_realloc_r+0x1e>
 800a3ee:	4629      	mov	r1, r5
 800a3f0:	4640      	mov	r0, r8
 800a3f2:	f7ff fae5 	bl	80099c0 <_malloc_r>
 800a3f6:	4607      	mov	r7, r0
 800a3f8:	2800      	cmp	r0, #0
 800a3fa:	d0ec      	beq.n	800a3d6 <_realloc_r+0x1c>
 800a3fc:	42b5      	cmp	r5, r6
 800a3fe:	462a      	mov	r2, r5
 800a400:	4621      	mov	r1, r4
 800a402:	bf28      	it	cs
 800a404:	4632      	movcs	r2, r6
 800a406:	f7fe f9ba 	bl	800877e <memcpy>
 800a40a:	4621      	mov	r1, r4
 800a40c:	4640      	mov	r0, r8
 800a40e:	f000 f9bd 	bl	800a78c <_free_r>
 800a412:	463c      	mov	r4, r7
 800a414:	e7e0      	b.n	800a3d8 <_realloc_r+0x1e>

0800a416 <__swbuf_r>:
 800a416:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a418:	460e      	mov	r6, r1
 800a41a:	4614      	mov	r4, r2
 800a41c:	4605      	mov	r5, r0
 800a41e:	b118      	cbz	r0, 800a428 <__swbuf_r+0x12>
 800a420:	6a03      	ldr	r3, [r0, #32]
 800a422:	b90b      	cbnz	r3, 800a428 <__swbuf_r+0x12>
 800a424:	f7fe f92a 	bl	800867c <__sinit>
 800a428:	69a3      	ldr	r3, [r4, #24]
 800a42a:	60a3      	str	r3, [r4, #8]
 800a42c:	89a3      	ldrh	r3, [r4, #12]
 800a42e:	071a      	lsls	r2, r3, #28
 800a430:	d501      	bpl.n	800a436 <__swbuf_r+0x20>
 800a432:	6923      	ldr	r3, [r4, #16]
 800a434:	b943      	cbnz	r3, 800a448 <__swbuf_r+0x32>
 800a436:	4621      	mov	r1, r4
 800a438:	4628      	mov	r0, r5
 800a43a:	f000 f82b 	bl	800a494 <__swsetup_r>
 800a43e:	b118      	cbz	r0, 800a448 <__swbuf_r+0x32>
 800a440:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800a444:	4638      	mov	r0, r7
 800a446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a448:	6823      	ldr	r3, [r4, #0]
 800a44a:	6922      	ldr	r2, [r4, #16]
 800a44c:	1a98      	subs	r0, r3, r2
 800a44e:	6963      	ldr	r3, [r4, #20]
 800a450:	b2f6      	uxtb	r6, r6
 800a452:	4283      	cmp	r3, r0
 800a454:	4637      	mov	r7, r6
 800a456:	dc05      	bgt.n	800a464 <__swbuf_r+0x4e>
 800a458:	4621      	mov	r1, r4
 800a45a:	4628      	mov	r0, r5
 800a45c:	f7ff fbb4 	bl	8009bc8 <_fflush_r>
 800a460:	2800      	cmp	r0, #0
 800a462:	d1ed      	bne.n	800a440 <__swbuf_r+0x2a>
 800a464:	68a3      	ldr	r3, [r4, #8]
 800a466:	3b01      	subs	r3, #1
 800a468:	60a3      	str	r3, [r4, #8]
 800a46a:	6823      	ldr	r3, [r4, #0]
 800a46c:	1c5a      	adds	r2, r3, #1
 800a46e:	6022      	str	r2, [r4, #0]
 800a470:	701e      	strb	r6, [r3, #0]
 800a472:	6962      	ldr	r2, [r4, #20]
 800a474:	1c43      	adds	r3, r0, #1
 800a476:	429a      	cmp	r2, r3
 800a478:	d004      	beq.n	800a484 <__swbuf_r+0x6e>
 800a47a:	89a3      	ldrh	r3, [r4, #12]
 800a47c:	07db      	lsls	r3, r3, #31
 800a47e:	d5e1      	bpl.n	800a444 <__swbuf_r+0x2e>
 800a480:	2e0a      	cmp	r6, #10
 800a482:	d1df      	bne.n	800a444 <__swbuf_r+0x2e>
 800a484:	4621      	mov	r1, r4
 800a486:	4628      	mov	r0, r5
 800a488:	f7ff fb9e 	bl	8009bc8 <_fflush_r>
 800a48c:	2800      	cmp	r0, #0
 800a48e:	d0d9      	beq.n	800a444 <__swbuf_r+0x2e>
 800a490:	e7d6      	b.n	800a440 <__swbuf_r+0x2a>
	...

0800a494 <__swsetup_r>:
 800a494:	b538      	push	{r3, r4, r5, lr}
 800a496:	4b29      	ldr	r3, [pc, #164]	@ (800a53c <__swsetup_r+0xa8>)
 800a498:	4605      	mov	r5, r0
 800a49a:	6818      	ldr	r0, [r3, #0]
 800a49c:	460c      	mov	r4, r1
 800a49e:	b118      	cbz	r0, 800a4a8 <__swsetup_r+0x14>
 800a4a0:	6a03      	ldr	r3, [r0, #32]
 800a4a2:	b90b      	cbnz	r3, 800a4a8 <__swsetup_r+0x14>
 800a4a4:	f7fe f8ea 	bl	800867c <__sinit>
 800a4a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4ac:	0719      	lsls	r1, r3, #28
 800a4ae:	d422      	bmi.n	800a4f6 <__swsetup_r+0x62>
 800a4b0:	06da      	lsls	r2, r3, #27
 800a4b2:	d407      	bmi.n	800a4c4 <__swsetup_r+0x30>
 800a4b4:	2209      	movs	r2, #9
 800a4b6:	602a      	str	r2, [r5, #0]
 800a4b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a4bc:	81a3      	strh	r3, [r4, #12]
 800a4be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a4c2:	e033      	b.n	800a52c <__swsetup_r+0x98>
 800a4c4:	0758      	lsls	r0, r3, #29
 800a4c6:	d512      	bpl.n	800a4ee <__swsetup_r+0x5a>
 800a4c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a4ca:	b141      	cbz	r1, 800a4de <__swsetup_r+0x4a>
 800a4cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a4d0:	4299      	cmp	r1, r3
 800a4d2:	d002      	beq.n	800a4da <__swsetup_r+0x46>
 800a4d4:	4628      	mov	r0, r5
 800a4d6:	f000 f959 	bl	800a78c <_free_r>
 800a4da:	2300      	movs	r3, #0
 800a4dc:	6363      	str	r3, [r4, #52]	@ 0x34
 800a4de:	89a3      	ldrh	r3, [r4, #12]
 800a4e0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a4e4:	81a3      	strh	r3, [r4, #12]
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	6063      	str	r3, [r4, #4]
 800a4ea:	6923      	ldr	r3, [r4, #16]
 800a4ec:	6023      	str	r3, [r4, #0]
 800a4ee:	89a3      	ldrh	r3, [r4, #12]
 800a4f0:	f043 0308 	orr.w	r3, r3, #8
 800a4f4:	81a3      	strh	r3, [r4, #12]
 800a4f6:	6923      	ldr	r3, [r4, #16]
 800a4f8:	b94b      	cbnz	r3, 800a50e <__swsetup_r+0x7a>
 800a4fa:	89a3      	ldrh	r3, [r4, #12]
 800a4fc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a500:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a504:	d003      	beq.n	800a50e <__swsetup_r+0x7a>
 800a506:	4621      	mov	r1, r4
 800a508:	4628      	mov	r0, r5
 800a50a:	f000 f83f 	bl	800a58c <__smakebuf_r>
 800a50e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a512:	f013 0201 	ands.w	r2, r3, #1
 800a516:	d00a      	beq.n	800a52e <__swsetup_r+0x9a>
 800a518:	2200      	movs	r2, #0
 800a51a:	60a2      	str	r2, [r4, #8]
 800a51c:	6962      	ldr	r2, [r4, #20]
 800a51e:	4252      	negs	r2, r2
 800a520:	61a2      	str	r2, [r4, #24]
 800a522:	6922      	ldr	r2, [r4, #16]
 800a524:	b942      	cbnz	r2, 800a538 <__swsetup_r+0xa4>
 800a526:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a52a:	d1c5      	bne.n	800a4b8 <__swsetup_r+0x24>
 800a52c:	bd38      	pop	{r3, r4, r5, pc}
 800a52e:	0799      	lsls	r1, r3, #30
 800a530:	bf58      	it	pl
 800a532:	6962      	ldrpl	r2, [r4, #20]
 800a534:	60a2      	str	r2, [r4, #8]
 800a536:	e7f4      	b.n	800a522 <__swsetup_r+0x8e>
 800a538:	2000      	movs	r0, #0
 800a53a:	e7f7      	b.n	800a52c <__swsetup_r+0x98>
 800a53c:	2000009c 	.word	0x2000009c

0800a540 <__swhatbuf_r>:
 800a540:	b570      	push	{r4, r5, r6, lr}
 800a542:	460c      	mov	r4, r1
 800a544:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a548:	2900      	cmp	r1, #0
 800a54a:	b096      	sub	sp, #88	@ 0x58
 800a54c:	4615      	mov	r5, r2
 800a54e:	461e      	mov	r6, r3
 800a550:	da0d      	bge.n	800a56e <__swhatbuf_r+0x2e>
 800a552:	89a3      	ldrh	r3, [r4, #12]
 800a554:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a558:	f04f 0100 	mov.w	r1, #0
 800a55c:	bf14      	ite	ne
 800a55e:	2340      	movne	r3, #64	@ 0x40
 800a560:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a564:	2000      	movs	r0, #0
 800a566:	6031      	str	r1, [r6, #0]
 800a568:	602b      	str	r3, [r5, #0]
 800a56a:	b016      	add	sp, #88	@ 0x58
 800a56c:	bd70      	pop	{r4, r5, r6, pc}
 800a56e:	466a      	mov	r2, sp
 800a570:	f000 f872 	bl	800a658 <_fstat_r>
 800a574:	2800      	cmp	r0, #0
 800a576:	dbec      	blt.n	800a552 <__swhatbuf_r+0x12>
 800a578:	9901      	ldr	r1, [sp, #4]
 800a57a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a57e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a582:	4259      	negs	r1, r3
 800a584:	4159      	adcs	r1, r3
 800a586:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a58a:	e7eb      	b.n	800a564 <__swhatbuf_r+0x24>

0800a58c <__smakebuf_r>:
 800a58c:	898b      	ldrh	r3, [r1, #12]
 800a58e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a590:	079d      	lsls	r5, r3, #30
 800a592:	4606      	mov	r6, r0
 800a594:	460c      	mov	r4, r1
 800a596:	d507      	bpl.n	800a5a8 <__smakebuf_r+0x1c>
 800a598:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a59c:	6023      	str	r3, [r4, #0]
 800a59e:	6123      	str	r3, [r4, #16]
 800a5a0:	2301      	movs	r3, #1
 800a5a2:	6163      	str	r3, [r4, #20]
 800a5a4:	b003      	add	sp, #12
 800a5a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5a8:	ab01      	add	r3, sp, #4
 800a5aa:	466a      	mov	r2, sp
 800a5ac:	f7ff ffc8 	bl	800a540 <__swhatbuf_r>
 800a5b0:	9f00      	ldr	r7, [sp, #0]
 800a5b2:	4605      	mov	r5, r0
 800a5b4:	4639      	mov	r1, r7
 800a5b6:	4630      	mov	r0, r6
 800a5b8:	f7ff fa02 	bl	80099c0 <_malloc_r>
 800a5bc:	b948      	cbnz	r0, 800a5d2 <__smakebuf_r+0x46>
 800a5be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5c2:	059a      	lsls	r2, r3, #22
 800a5c4:	d4ee      	bmi.n	800a5a4 <__smakebuf_r+0x18>
 800a5c6:	f023 0303 	bic.w	r3, r3, #3
 800a5ca:	f043 0302 	orr.w	r3, r3, #2
 800a5ce:	81a3      	strh	r3, [r4, #12]
 800a5d0:	e7e2      	b.n	800a598 <__smakebuf_r+0xc>
 800a5d2:	89a3      	ldrh	r3, [r4, #12]
 800a5d4:	6020      	str	r0, [r4, #0]
 800a5d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a5da:	81a3      	strh	r3, [r4, #12]
 800a5dc:	9b01      	ldr	r3, [sp, #4]
 800a5de:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a5e2:	b15b      	cbz	r3, 800a5fc <__smakebuf_r+0x70>
 800a5e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a5e8:	4630      	mov	r0, r6
 800a5ea:	f000 f847 	bl	800a67c <_isatty_r>
 800a5ee:	b128      	cbz	r0, 800a5fc <__smakebuf_r+0x70>
 800a5f0:	89a3      	ldrh	r3, [r4, #12]
 800a5f2:	f023 0303 	bic.w	r3, r3, #3
 800a5f6:	f043 0301 	orr.w	r3, r3, #1
 800a5fa:	81a3      	strh	r3, [r4, #12]
 800a5fc:	89a3      	ldrh	r3, [r4, #12]
 800a5fe:	431d      	orrs	r5, r3
 800a600:	81a5      	strh	r5, [r4, #12]
 800a602:	e7cf      	b.n	800a5a4 <__smakebuf_r+0x18>

0800a604 <memmove>:
 800a604:	4288      	cmp	r0, r1
 800a606:	b510      	push	{r4, lr}
 800a608:	eb01 0402 	add.w	r4, r1, r2
 800a60c:	d902      	bls.n	800a614 <memmove+0x10>
 800a60e:	4284      	cmp	r4, r0
 800a610:	4623      	mov	r3, r4
 800a612:	d807      	bhi.n	800a624 <memmove+0x20>
 800a614:	1e43      	subs	r3, r0, #1
 800a616:	42a1      	cmp	r1, r4
 800a618:	d008      	beq.n	800a62c <memmove+0x28>
 800a61a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a61e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a622:	e7f8      	b.n	800a616 <memmove+0x12>
 800a624:	4402      	add	r2, r0
 800a626:	4601      	mov	r1, r0
 800a628:	428a      	cmp	r2, r1
 800a62a:	d100      	bne.n	800a62e <memmove+0x2a>
 800a62c:	bd10      	pop	{r4, pc}
 800a62e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a632:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a636:	e7f7      	b.n	800a628 <memmove+0x24>

0800a638 <_close_r>:
 800a638:	b538      	push	{r3, r4, r5, lr}
 800a63a:	4d06      	ldr	r5, [pc, #24]	@ (800a654 <_close_r+0x1c>)
 800a63c:	2300      	movs	r3, #0
 800a63e:	4604      	mov	r4, r0
 800a640:	4608      	mov	r0, r1
 800a642:	602b      	str	r3, [r5, #0]
 800a644:	f7f7 fb70 	bl	8001d28 <_close>
 800a648:	1c43      	adds	r3, r0, #1
 800a64a:	d102      	bne.n	800a652 <_close_r+0x1a>
 800a64c:	682b      	ldr	r3, [r5, #0]
 800a64e:	b103      	cbz	r3, 800a652 <_close_r+0x1a>
 800a650:	6023      	str	r3, [r4, #0]
 800a652:	bd38      	pop	{r3, r4, r5, pc}
 800a654:	200014e4 	.word	0x200014e4

0800a658 <_fstat_r>:
 800a658:	b538      	push	{r3, r4, r5, lr}
 800a65a:	4d07      	ldr	r5, [pc, #28]	@ (800a678 <_fstat_r+0x20>)
 800a65c:	2300      	movs	r3, #0
 800a65e:	4604      	mov	r4, r0
 800a660:	4608      	mov	r0, r1
 800a662:	4611      	mov	r1, r2
 800a664:	602b      	str	r3, [r5, #0]
 800a666:	f7f7 fb6b 	bl	8001d40 <_fstat>
 800a66a:	1c43      	adds	r3, r0, #1
 800a66c:	d102      	bne.n	800a674 <_fstat_r+0x1c>
 800a66e:	682b      	ldr	r3, [r5, #0]
 800a670:	b103      	cbz	r3, 800a674 <_fstat_r+0x1c>
 800a672:	6023      	str	r3, [r4, #0]
 800a674:	bd38      	pop	{r3, r4, r5, pc}
 800a676:	bf00      	nop
 800a678:	200014e4 	.word	0x200014e4

0800a67c <_isatty_r>:
 800a67c:	b538      	push	{r3, r4, r5, lr}
 800a67e:	4d06      	ldr	r5, [pc, #24]	@ (800a698 <_isatty_r+0x1c>)
 800a680:	2300      	movs	r3, #0
 800a682:	4604      	mov	r4, r0
 800a684:	4608      	mov	r0, r1
 800a686:	602b      	str	r3, [r5, #0]
 800a688:	f7f7 fb6a 	bl	8001d60 <_isatty>
 800a68c:	1c43      	adds	r3, r0, #1
 800a68e:	d102      	bne.n	800a696 <_isatty_r+0x1a>
 800a690:	682b      	ldr	r3, [r5, #0]
 800a692:	b103      	cbz	r3, 800a696 <_isatty_r+0x1a>
 800a694:	6023      	str	r3, [r4, #0]
 800a696:	bd38      	pop	{r3, r4, r5, pc}
 800a698:	200014e4 	.word	0x200014e4

0800a69c <_lseek_r>:
 800a69c:	b538      	push	{r3, r4, r5, lr}
 800a69e:	4d07      	ldr	r5, [pc, #28]	@ (800a6bc <_lseek_r+0x20>)
 800a6a0:	4604      	mov	r4, r0
 800a6a2:	4608      	mov	r0, r1
 800a6a4:	4611      	mov	r1, r2
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	602a      	str	r2, [r5, #0]
 800a6aa:	461a      	mov	r2, r3
 800a6ac:	f7f7 fb63 	bl	8001d76 <_lseek>
 800a6b0:	1c43      	adds	r3, r0, #1
 800a6b2:	d102      	bne.n	800a6ba <_lseek_r+0x1e>
 800a6b4:	682b      	ldr	r3, [r5, #0]
 800a6b6:	b103      	cbz	r3, 800a6ba <_lseek_r+0x1e>
 800a6b8:	6023      	str	r3, [r4, #0]
 800a6ba:	bd38      	pop	{r3, r4, r5, pc}
 800a6bc:	200014e4 	.word	0x200014e4

0800a6c0 <_read_r>:
 800a6c0:	b538      	push	{r3, r4, r5, lr}
 800a6c2:	4d07      	ldr	r5, [pc, #28]	@ (800a6e0 <_read_r+0x20>)
 800a6c4:	4604      	mov	r4, r0
 800a6c6:	4608      	mov	r0, r1
 800a6c8:	4611      	mov	r1, r2
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	602a      	str	r2, [r5, #0]
 800a6ce:	461a      	mov	r2, r3
 800a6d0:	f7f7 faf1 	bl	8001cb6 <_read>
 800a6d4:	1c43      	adds	r3, r0, #1
 800a6d6:	d102      	bne.n	800a6de <_read_r+0x1e>
 800a6d8:	682b      	ldr	r3, [r5, #0]
 800a6da:	b103      	cbz	r3, 800a6de <_read_r+0x1e>
 800a6dc:	6023      	str	r3, [r4, #0]
 800a6de:	bd38      	pop	{r3, r4, r5, pc}
 800a6e0:	200014e4 	.word	0x200014e4

0800a6e4 <_sbrk_r>:
 800a6e4:	b538      	push	{r3, r4, r5, lr}
 800a6e6:	4d06      	ldr	r5, [pc, #24]	@ (800a700 <_sbrk_r+0x1c>)
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	4604      	mov	r4, r0
 800a6ec:	4608      	mov	r0, r1
 800a6ee:	602b      	str	r3, [r5, #0]
 800a6f0:	f7f7 fb4e 	bl	8001d90 <_sbrk>
 800a6f4:	1c43      	adds	r3, r0, #1
 800a6f6:	d102      	bne.n	800a6fe <_sbrk_r+0x1a>
 800a6f8:	682b      	ldr	r3, [r5, #0]
 800a6fa:	b103      	cbz	r3, 800a6fe <_sbrk_r+0x1a>
 800a6fc:	6023      	str	r3, [r4, #0]
 800a6fe:	bd38      	pop	{r3, r4, r5, pc}
 800a700:	200014e4 	.word	0x200014e4

0800a704 <_write_r>:
 800a704:	b538      	push	{r3, r4, r5, lr}
 800a706:	4d07      	ldr	r5, [pc, #28]	@ (800a724 <_write_r+0x20>)
 800a708:	4604      	mov	r4, r0
 800a70a:	4608      	mov	r0, r1
 800a70c:	4611      	mov	r1, r2
 800a70e:	2200      	movs	r2, #0
 800a710:	602a      	str	r2, [r5, #0]
 800a712:	461a      	mov	r2, r3
 800a714:	f7f7 faec 	bl	8001cf0 <_write>
 800a718:	1c43      	adds	r3, r0, #1
 800a71a:	d102      	bne.n	800a722 <_write_r+0x1e>
 800a71c:	682b      	ldr	r3, [r5, #0]
 800a71e:	b103      	cbz	r3, 800a722 <_write_r+0x1e>
 800a720:	6023      	str	r3, [r4, #0]
 800a722:	bd38      	pop	{r3, r4, r5, pc}
 800a724:	200014e4 	.word	0x200014e4

0800a728 <__assert_func>:
 800a728:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a72a:	4614      	mov	r4, r2
 800a72c:	461a      	mov	r2, r3
 800a72e:	4b09      	ldr	r3, [pc, #36]	@ (800a754 <__assert_func+0x2c>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	4605      	mov	r5, r0
 800a734:	68d8      	ldr	r0, [r3, #12]
 800a736:	b954      	cbnz	r4, 800a74e <__assert_func+0x26>
 800a738:	4b07      	ldr	r3, [pc, #28]	@ (800a758 <__assert_func+0x30>)
 800a73a:	461c      	mov	r4, r3
 800a73c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a740:	9100      	str	r1, [sp, #0]
 800a742:	462b      	mov	r3, r5
 800a744:	4905      	ldr	r1, [pc, #20]	@ (800a75c <__assert_func+0x34>)
 800a746:	f000 f885 	bl	800a854 <fiprintf>
 800a74a:	f000 f8a2 	bl	800a892 <abort>
 800a74e:	4b04      	ldr	r3, [pc, #16]	@ (800a760 <__assert_func+0x38>)
 800a750:	e7f4      	b.n	800a73c <__assert_func+0x14>
 800a752:	bf00      	nop
 800a754:	2000009c 	.word	0x2000009c
 800a758:	0800ae46 	.word	0x0800ae46
 800a75c:	0800ae18 	.word	0x0800ae18
 800a760:	0800ae0b 	.word	0x0800ae0b

0800a764 <_calloc_r>:
 800a764:	b570      	push	{r4, r5, r6, lr}
 800a766:	fba1 5402 	umull	r5, r4, r1, r2
 800a76a:	b93c      	cbnz	r4, 800a77c <_calloc_r+0x18>
 800a76c:	4629      	mov	r1, r5
 800a76e:	f7ff f927 	bl	80099c0 <_malloc_r>
 800a772:	4606      	mov	r6, r0
 800a774:	b928      	cbnz	r0, 800a782 <_calloc_r+0x1e>
 800a776:	2600      	movs	r6, #0
 800a778:	4630      	mov	r0, r6
 800a77a:	bd70      	pop	{r4, r5, r6, pc}
 800a77c:	220c      	movs	r2, #12
 800a77e:	6002      	str	r2, [r0, #0]
 800a780:	e7f9      	b.n	800a776 <_calloc_r+0x12>
 800a782:	462a      	mov	r2, r5
 800a784:	4621      	mov	r1, r4
 800a786:	f7fd ffc1 	bl	800870c <memset>
 800a78a:	e7f5      	b.n	800a778 <_calloc_r+0x14>

0800a78c <_free_r>:
 800a78c:	b538      	push	{r3, r4, r5, lr}
 800a78e:	4605      	mov	r5, r0
 800a790:	2900      	cmp	r1, #0
 800a792:	d041      	beq.n	800a818 <_free_r+0x8c>
 800a794:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a798:	1f0c      	subs	r4, r1, #4
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	bfb8      	it	lt
 800a79e:	18e4      	addlt	r4, r4, r3
 800a7a0:	f7ff fa3a 	bl	8009c18 <__malloc_lock>
 800a7a4:	4a1d      	ldr	r2, [pc, #116]	@ (800a81c <_free_r+0x90>)
 800a7a6:	6813      	ldr	r3, [r2, #0]
 800a7a8:	b933      	cbnz	r3, 800a7b8 <_free_r+0x2c>
 800a7aa:	6063      	str	r3, [r4, #4]
 800a7ac:	6014      	str	r4, [r2, #0]
 800a7ae:	4628      	mov	r0, r5
 800a7b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a7b4:	f7ff ba36 	b.w	8009c24 <__malloc_unlock>
 800a7b8:	42a3      	cmp	r3, r4
 800a7ba:	d908      	bls.n	800a7ce <_free_r+0x42>
 800a7bc:	6820      	ldr	r0, [r4, #0]
 800a7be:	1821      	adds	r1, r4, r0
 800a7c0:	428b      	cmp	r3, r1
 800a7c2:	bf01      	itttt	eq
 800a7c4:	6819      	ldreq	r1, [r3, #0]
 800a7c6:	685b      	ldreq	r3, [r3, #4]
 800a7c8:	1809      	addeq	r1, r1, r0
 800a7ca:	6021      	streq	r1, [r4, #0]
 800a7cc:	e7ed      	b.n	800a7aa <_free_r+0x1e>
 800a7ce:	461a      	mov	r2, r3
 800a7d0:	685b      	ldr	r3, [r3, #4]
 800a7d2:	b10b      	cbz	r3, 800a7d8 <_free_r+0x4c>
 800a7d4:	42a3      	cmp	r3, r4
 800a7d6:	d9fa      	bls.n	800a7ce <_free_r+0x42>
 800a7d8:	6811      	ldr	r1, [r2, #0]
 800a7da:	1850      	adds	r0, r2, r1
 800a7dc:	42a0      	cmp	r0, r4
 800a7de:	d10b      	bne.n	800a7f8 <_free_r+0x6c>
 800a7e0:	6820      	ldr	r0, [r4, #0]
 800a7e2:	4401      	add	r1, r0
 800a7e4:	1850      	adds	r0, r2, r1
 800a7e6:	4283      	cmp	r3, r0
 800a7e8:	6011      	str	r1, [r2, #0]
 800a7ea:	d1e0      	bne.n	800a7ae <_free_r+0x22>
 800a7ec:	6818      	ldr	r0, [r3, #0]
 800a7ee:	685b      	ldr	r3, [r3, #4]
 800a7f0:	6053      	str	r3, [r2, #4]
 800a7f2:	4408      	add	r0, r1
 800a7f4:	6010      	str	r0, [r2, #0]
 800a7f6:	e7da      	b.n	800a7ae <_free_r+0x22>
 800a7f8:	d902      	bls.n	800a800 <_free_r+0x74>
 800a7fa:	230c      	movs	r3, #12
 800a7fc:	602b      	str	r3, [r5, #0]
 800a7fe:	e7d6      	b.n	800a7ae <_free_r+0x22>
 800a800:	6820      	ldr	r0, [r4, #0]
 800a802:	1821      	adds	r1, r4, r0
 800a804:	428b      	cmp	r3, r1
 800a806:	bf04      	itt	eq
 800a808:	6819      	ldreq	r1, [r3, #0]
 800a80a:	685b      	ldreq	r3, [r3, #4]
 800a80c:	6063      	str	r3, [r4, #4]
 800a80e:	bf04      	itt	eq
 800a810:	1809      	addeq	r1, r1, r0
 800a812:	6021      	streq	r1, [r4, #0]
 800a814:	6054      	str	r4, [r2, #4]
 800a816:	e7ca      	b.n	800a7ae <_free_r+0x22>
 800a818:	bd38      	pop	{r3, r4, r5, pc}
 800a81a:	bf00      	nop
 800a81c:	200014e0 	.word	0x200014e0

0800a820 <__ascii_mbtowc>:
 800a820:	b082      	sub	sp, #8
 800a822:	b901      	cbnz	r1, 800a826 <__ascii_mbtowc+0x6>
 800a824:	a901      	add	r1, sp, #4
 800a826:	b142      	cbz	r2, 800a83a <__ascii_mbtowc+0x1a>
 800a828:	b14b      	cbz	r3, 800a83e <__ascii_mbtowc+0x1e>
 800a82a:	7813      	ldrb	r3, [r2, #0]
 800a82c:	600b      	str	r3, [r1, #0]
 800a82e:	7812      	ldrb	r2, [r2, #0]
 800a830:	1e10      	subs	r0, r2, #0
 800a832:	bf18      	it	ne
 800a834:	2001      	movne	r0, #1
 800a836:	b002      	add	sp, #8
 800a838:	4770      	bx	lr
 800a83a:	4610      	mov	r0, r2
 800a83c:	e7fb      	b.n	800a836 <__ascii_mbtowc+0x16>
 800a83e:	f06f 0001 	mvn.w	r0, #1
 800a842:	e7f8      	b.n	800a836 <__ascii_mbtowc+0x16>

0800a844 <_malloc_usable_size_r>:
 800a844:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a848:	1f18      	subs	r0, r3, #4
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	bfbc      	itt	lt
 800a84e:	580b      	ldrlt	r3, [r1, r0]
 800a850:	18c0      	addlt	r0, r0, r3
 800a852:	4770      	bx	lr

0800a854 <fiprintf>:
 800a854:	b40e      	push	{r1, r2, r3}
 800a856:	b503      	push	{r0, r1, lr}
 800a858:	4601      	mov	r1, r0
 800a85a:	ab03      	add	r3, sp, #12
 800a85c:	4805      	ldr	r0, [pc, #20]	@ (800a874 <fiprintf+0x20>)
 800a85e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a862:	6800      	ldr	r0, [r0, #0]
 800a864:	9301      	str	r3, [sp, #4]
 800a866:	f7fe ff69 	bl	800973c <_vfiprintf_r>
 800a86a:	b002      	add	sp, #8
 800a86c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a870:	b003      	add	sp, #12
 800a872:	4770      	bx	lr
 800a874:	2000009c 	.word	0x2000009c

0800a878 <__ascii_wctomb>:
 800a878:	4603      	mov	r3, r0
 800a87a:	4608      	mov	r0, r1
 800a87c:	b141      	cbz	r1, 800a890 <__ascii_wctomb+0x18>
 800a87e:	2aff      	cmp	r2, #255	@ 0xff
 800a880:	d904      	bls.n	800a88c <__ascii_wctomb+0x14>
 800a882:	228a      	movs	r2, #138	@ 0x8a
 800a884:	601a      	str	r2, [r3, #0]
 800a886:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a88a:	4770      	bx	lr
 800a88c:	700a      	strb	r2, [r1, #0]
 800a88e:	2001      	movs	r0, #1
 800a890:	4770      	bx	lr

0800a892 <abort>:
 800a892:	b508      	push	{r3, lr}
 800a894:	2006      	movs	r0, #6
 800a896:	f000 f82b 	bl	800a8f0 <raise>
 800a89a:	2001      	movs	r0, #1
 800a89c:	f7f7 fa00 	bl	8001ca0 <_exit>

0800a8a0 <_raise_r>:
 800a8a0:	291f      	cmp	r1, #31
 800a8a2:	b538      	push	{r3, r4, r5, lr}
 800a8a4:	4605      	mov	r5, r0
 800a8a6:	460c      	mov	r4, r1
 800a8a8:	d904      	bls.n	800a8b4 <_raise_r+0x14>
 800a8aa:	2316      	movs	r3, #22
 800a8ac:	6003      	str	r3, [r0, #0]
 800a8ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a8b2:	bd38      	pop	{r3, r4, r5, pc}
 800a8b4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a8b6:	b112      	cbz	r2, 800a8be <_raise_r+0x1e>
 800a8b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a8bc:	b94b      	cbnz	r3, 800a8d2 <_raise_r+0x32>
 800a8be:	4628      	mov	r0, r5
 800a8c0:	f000 f830 	bl	800a924 <_getpid_r>
 800a8c4:	4622      	mov	r2, r4
 800a8c6:	4601      	mov	r1, r0
 800a8c8:	4628      	mov	r0, r5
 800a8ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a8ce:	f000 b817 	b.w	800a900 <_kill_r>
 800a8d2:	2b01      	cmp	r3, #1
 800a8d4:	d00a      	beq.n	800a8ec <_raise_r+0x4c>
 800a8d6:	1c59      	adds	r1, r3, #1
 800a8d8:	d103      	bne.n	800a8e2 <_raise_r+0x42>
 800a8da:	2316      	movs	r3, #22
 800a8dc:	6003      	str	r3, [r0, #0]
 800a8de:	2001      	movs	r0, #1
 800a8e0:	e7e7      	b.n	800a8b2 <_raise_r+0x12>
 800a8e2:	2100      	movs	r1, #0
 800a8e4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a8e8:	4620      	mov	r0, r4
 800a8ea:	4798      	blx	r3
 800a8ec:	2000      	movs	r0, #0
 800a8ee:	e7e0      	b.n	800a8b2 <_raise_r+0x12>

0800a8f0 <raise>:
 800a8f0:	4b02      	ldr	r3, [pc, #8]	@ (800a8fc <raise+0xc>)
 800a8f2:	4601      	mov	r1, r0
 800a8f4:	6818      	ldr	r0, [r3, #0]
 800a8f6:	f7ff bfd3 	b.w	800a8a0 <_raise_r>
 800a8fa:	bf00      	nop
 800a8fc:	2000009c 	.word	0x2000009c

0800a900 <_kill_r>:
 800a900:	b538      	push	{r3, r4, r5, lr}
 800a902:	4d07      	ldr	r5, [pc, #28]	@ (800a920 <_kill_r+0x20>)
 800a904:	2300      	movs	r3, #0
 800a906:	4604      	mov	r4, r0
 800a908:	4608      	mov	r0, r1
 800a90a:	4611      	mov	r1, r2
 800a90c:	602b      	str	r3, [r5, #0]
 800a90e:	f7f7 f9b7 	bl	8001c80 <_kill>
 800a912:	1c43      	adds	r3, r0, #1
 800a914:	d102      	bne.n	800a91c <_kill_r+0x1c>
 800a916:	682b      	ldr	r3, [r5, #0]
 800a918:	b103      	cbz	r3, 800a91c <_kill_r+0x1c>
 800a91a:	6023      	str	r3, [r4, #0]
 800a91c:	bd38      	pop	{r3, r4, r5, pc}
 800a91e:	bf00      	nop
 800a920:	200014e4 	.word	0x200014e4

0800a924 <_getpid_r>:
 800a924:	f7f7 b9a4 	b.w	8001c70 <_getpid>

0800a928 <_init>:
 800a928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a92a:	bf00      	nop
 800a92c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a92e:	bc08      	pop	{r3}
 800a930:	469e      	mov	lr, r3
 800a932:	4770      	bx	lr

0800a934 <_fini>:
 800a934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a936:	bf00      	nop
 800a938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a93a:	bc08      	pop	{r3}
 800a93c:	469e      	mov	lr, r3
 800a93e:	4770      	bx	lr
